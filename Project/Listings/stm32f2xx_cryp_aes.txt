; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f2xx_cryp_aes.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f2xx_cryp_aes.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FatFS\src -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\User -I..\User\bsp -I..\User\emWinTask -I..\STemWin\Config -I..\STemWin\DisplayDriver -I..\STemWin\inc -I..\STemWin\OS -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\stm32f2xx_cryp_aes.crf ..\Libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_cryp_aes.c]
                          THUMB

                          AREA ||i.CRYP_AES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_AES_CBC PROC
;;;284      */
;;;285    ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;286                             uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
;;;287                             uint8_t *Output)
;;;288    {
000004  b091              SUB      sp,sp,#0x44
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
00000a  4693              MOV      r11,r2
;;;289      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;290      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;291      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;292      __IO uint32_t counter = 0;
00000c  2000              MOVS     r0,#0
00000e  9002              STR      r0,[sp,#8]
;;;293      uint32_t busystatus = 0;
000010  4680              MOV      r8,r0
;;;294      ErrorStatus status = SUCCESS;
000012  2001              MOVS     r0,#1
000014  9001              STR      r0,[sp,#4]
;;;295      uint32_t keyaddr    = (uint32_t)Key;
000016  465c              MOV      r4,r11
;;;296      uint32_t inputaddr  = (uint32_t)Input;
000018  9d1e              LDR      r5,[sp,#0x78]
;;;297      uint32_t outputaddr = (uint32_t)Output;
00001a  9e20              LDR      r6,[sp,#0x80]
;;;298      uint32_t ivaddr     = (uint32_t)InitVectors;
00001c  4657              MOV      r7,r10
;;;299      uint32_t i = 0;
00001e  2000              MOVS     r0,#0
000020  9000              STR      r0,[sp,#0]
;;;300    
;;;301      /* Crypto structures initialisation*/
;;;302      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000022  a807              ADD      r0,sp,#0x1c
000024  f7fffffe          BL       CRYP_KeyStructInit
;;;303    
;;;304      switch(Keysize)
000028  9814              LDR      r0,[sp,#0x50]
00002a  2880              CMP      r0,#0x80
00002c  d005              BEQ      |L1.58|
00002e  28c0              CMP      r0,#0xc0
000030  d016              BEQ      |L1.96|
000032  f5b07f80          CMP      r0,#0x100
000036  d153              BNE      |L1.224|
000038  e02e              B        |L1.152|
                  |L1.58|
;;;305      {
;;;306        case 128:
;;;307        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
00003a  2000              MOVS     r0,#0
00003c  f8ad0042          STRH     r0,[sp,#0x42]
;;;308        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000040  6820              LDR      r0,[r4,#0]
000042  ba00              REV      r0,r0
000044  900b              STR      r0,[sp,#0x2c]
;;;309        keyaddr+=4;
000046  1d24              ADDS     r4,r4,#4
;;;310        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000048  6820              LDR      r0,[r4,#0]
00004a  ba00              REV      r0,r0
00004c  900c              STR      r0,[sp,#0x30]
;;;311        keyaddr+=4;
00004e  1d24              ADDS     r4,r4,#4
;;;312        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000050  6820              LDR      r0,[r4,#0]
000052  ba00              REV      r0,r0
000054  900d              STR      r0,[sp,#0x34]
;;;313        keyaddr+=4;
000056  1d24              ADDS     r4,r4,#4
;;;314        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000058  6820              LDR      r0,[r4,#0]
00005a  ba00              REV      r0,r0
00005c  900e              STR      r0,[sp,#0x38]
;;;315        break;
00005e  e040              B        |L1.226|
                  |L1.96|
;;;316        case 192:
;;;317        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
000060  f44f7080          MOV      r0,#0x100
000064  f8ad0042          STRH     r0,[sp,#0x42]
;;;318        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000068  6820              LDR      r0,[r4,#0]
00006a  ba00              REV      r0,r0
00006c  9009              STR      r0,[sp,#0x24]
;;;319        keyaddr+=4;
00006e  1d24              ADDS     r4,r4,#4
;;;320        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000070  6820              LDR      r0,[r4,#0]
000072  ba00              REV      r0,r0
000074  900a              STR      r0,[sp,#0x28]
;;;321        keyaddr+=4;
000076  1d24              ADDS     r4,r4,#4
;;;322        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000078  6820              LDR      r0,[r4,#0]
00007a  ba00              REV      r0,r0
00007c  900b              STR      r0,[sp,#0x2c]
;;;323        keyaddr+=4;
00007e  1d24              ADDS     r4,r4,#4
;;;324        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000080  6820              LDR      r0,[r4,#0]
000082  ba00              REV      r0,r0
000084  900c              STR      r0,[sp,#0x30]
;;;325        keyaddr+=4;
000086  1d24              ADDS     r4,r4,#4
;;;326        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000088  6820              LDR      r0,[r4,#0]
00008a  ba00              REV      r0,r0
00008c  900d              STR      r0,[sp,#0x34]
;;;327        keyaddr+=4;
00008e  1d24              ADDS     r4,r4,#4
;;;328        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000090  6820              LDR      r0,[r4,#0]
000092  ba00              REV      r0,r0
000094  900e              STR      r0,[sp,#0x38]
;;;329        break;
000096  e024              B        |L1.226|
                  |L1.152|
;;;330        case 256:
;;;331        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
000098  f44f7000          MOV      r0,#0x200
00009c  f8ad0042          STRH     r0,[sp,#0x42]
;;;332        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
0000a0  6820              LDR      r0,[r4,#0]
0000a2  ba00              REV      r0,r0
0000a4  9007              STR      r0,[sp,#0x1c]
;;;333        keyaddr+=4;
0000a6  1d24              ADDS     r4,r4,#4
;;;334        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
0000a8  6820              LDR      r0,[r4,#0]
0000aa  ba00              REV      r0,r0
0000ac  9008              STR      r0,[sp,#0x20]
;;;335        keyaddr+=4;
0000ae  1d24              ADDS     r4,r4,#4
;;;336        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
0000b0  6820              LDR      r0,[r4,#0]
0000b2  ba00              REV      r0,r0
0000b4  9009              STR      r0,[sp,#0x24]
;;;337        keyaddr+=4;
0000b6  1d24              ADDS     r4,r4,#4
;;;338        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
0000b8  6820              LDR      r0,[r4,#0]
0000ba  ba00              REV      r0,r0
0000bc  900a              STR      r0,[sp,#0x28]
;;;339        keyaddr+=4;
0000be  1d24              ADDS     r4,r4,#4
;;;340        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
0000c0  6820              LDR      r0,[r4,#0]
0000c2  ba00              REV      r0,r0
0000c4  900b              STR      r0,[sp,#0x2c]
;;;341        keyaddr+=4;
0000c6  1d24              ADDS     r4,r4,#4
;;;342        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
0000c8  6820              LDR      r0,[r4,#0]
0000ca  ba00              REV      r0,r0
0000cc  900c              STR      r0,[sp,#0x30]
;;;343        keyaddr+=4;
0000ce  1d24              ADDS     r4,r4,#4
;;;344        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
0000d0  6820              LDR      r0,[r4,#0]
0000d2  ba00              REV      r0,r0
0000d4  900d              STR      r0,[sp,#0x34]
;;;345        keyaddr+=4;
0000d6  1d24              ADDS     r4,r4,#4
;;;346        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0000d8  6820              LDR      r0,[r4,#0]
0000da  ba00              REV      r0,r0
0000dc  900e              STR      r0,[sp,#0x38]
;;;347        break;
0000de  e000              B        |L1.226|
                  |L1.224|
;;;348        default:
;;;349        break;
0000e0  bf00              NOP      
                  |L1.226|
0000e2  bf00              NOP                            ;315
;;;350      }
;;;351    
;;;352      /* CRYP Initialization Vectors */
;;;353      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
0000e4  6838              LDR      r0,[r7,#0]
0000e6  ba00              REV      r0,r0
0000e8  9003              STR      r0,[sp,#0xc]
;;;354      ivaddr+=4;
0000ea  1d3f              ADDS     r7,r7,#4
;;;355      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
0000ec  6838              LDR      r0,[r7,#0]
0000ee  ba00              REV      r0,r0
0000f0  9004              STR      r0,[sp,#0x10]
;;;356      ivaddr+=4;
0000f2  1d3f              ADDS     r7,r7,#4
;;;357      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
0000f4  6838              LDR      r0,[r7,#0]
0000f6  ba00              REV      r0,r0
0000f8  9005              STR      r0,[sp,#0x14]
;;;358      ivaddr+=4;
0000fa  1d3f              ADDS     r7,r7,#4
;;;359      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
0000fc  6838              LDR      r0,[r7,#0]
0000fe  ba00              REV      r0,r0
000100  9006              STR      r0,[sp,#0x18]
;;;360    
;;;361    
;;;362      /*------------------ AES Decryption ------------------*/
;;;363      if(Mode == MODE_DECRYPT) /* AES decryption */
000102  f1b90f00          CMP      r9,#0
000106  d12c              BNE      |L1.354|
;;;364      {
;;;365        /* Flush IN/OUT FIFOs */
;;;366        CRYP_FIFOFlush();
000108  f7fffffe          BL       CRYP_FIFOFlush
;;;367    
;;;368        /* Crypto Init for Key preparation for decryption process */
;;;369        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
00010c  2004              MOVS     r0,#4
00010e  f8ad003c          STRH     r0,[sp,#0x3c]
;;;370        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
000112  2038              MOVS     r0,#0x38
000114  f8ad003e          STRH     r0,[sp,#0x3e]
;;;371        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
000118  2000              MOVS     r0,#0
00011a  f8ad0040          STRH     r0,[sp,#0x40]
;;;372    
;;;373        CRYP_Init(&AES_CRYP_InitStructure);
00011e  a80f              ADD      r0,sp,#0x3c
000120  f7fffffe          BL       CRYP_Init
;;;374    
;;;375        /* Key Initialisation */
;;;376        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
000124  a807              ADD      r0,sp,#0x1c
000126  f7fffffe          BL       CRYP_KeyInit
;;;377    
;;;378        /* Enable Crypto processor */
;;;379        CRYP_Cmd(ENABLE);
00012a  2001              MOVS     r0,#1
00012c  f7fffffe          BL       CRYP_Cmd
;;;380    
;;;381        /* wait until the Busy flag is RESET */
;;;382        do
000130  bf00              NOP      
                  |L1.306|
;;;383        {
;;;384          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
000132  2010              MOVS     r0,#0x10
000134  f7fffffe          BL       CRYP_GetFlagStatus
000138  4680              MOV      r8,r0
;;;385          counter++;
00013a  9802              LDR      r0,[sp,#8]
00013c  1c40              ADDS     r0,r0,#1
00013e  9002              STR      r0,[sp,#8]
;;;386        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
000140  9802              LDR      r0,[sp,#8]
000142  f5b03f80          CMP      r0,#0x10000
000146  d002              BEQ      |L1.334|
000148  f1b80f00          CMP      r8,#0
00014c  d1f1              BNE      |L1.306|
                  |L1.334|
;;;387    
;;;388        if (busystatus != RESET)
00014e  f1b80f00          CMP      r8,#0
000152  d002              BEQ      |L1.346|
;;;389       {
;;;390           status = ERROR;
000154  2000              MOVS     r0,#0
000156  9001              STR      r0,[sp,#4]
000158  e009              B        |L1.366|
                  |L1.346|
;;;391        }
;;;392        else
;;;393        {
;;;394          /* Crypto Init for decryption process */  
;;;395          AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
00015a  2004              MOVS     r0,#4
00015c  f8ad003c          STRH     r0,[sp,#0x3c]
000160  e005              B        |L1.366|
                  |L1.354|
;;;396        }
;;;397      }
;;;398      /*------------------ AES Encryption ------------------*/
;;;399      else /* AES encryption */
;;;400      {
;;;401        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
000162  a807              ADD      r0,sp,#0x1c
000164  f7fffffe          BL       CRYP_KeyInit
;;;402    
;;;403        /* Crypto Init for Encryption process */
;;;404        AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
000168  2000              MOVS     r0,#0
00016a  f8ad003c          STRH     r0,[sp,#0x3c]
                  |L1.366|
;;;405      }
;;;406      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
00016e  2028              MOVS     r0,#0x28
000170  f8ad003e          STRH     r0,[sp,#0x3e]
;;;407      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000174  2080              MOVS     r0,#0x80
000176  f8ad0040          STRH     r0,[sp,#0x40]
;;;408      CRYP_Init(&AES_CRYP_InitStructure);
00017a  a80f              ADD      r0,sp,#0x3c
00017c  f7fffffe          BL       CRYP_Init
;;;409    
;;;410      /* CRYP Initialization Vectors */
;;;411      CRYP_IVInit(&AES_CRYP_IVInitStructure);
000180  a803              ADD      r0,sp,#0xc
000182  f7fffffe          BL       CRYP_IVInit
;;;412    
;;;413      /* Flush IN/OUT FIFOs */
;;;414      CRYP_FIFOFlush();
000186  f7fffffe          BL       CRYP_FIFOFlush
;;;415    
;;;416      /* Enable Crypto processor */
;;;417      CRYP_Cmd(ENABLE);
00018a  2001              MOVS     r0,#1
00018c  f7fffffe          BL       CRYP_Cmd
;;;418    
;;;419    
;;;420      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
000190  2000              MOVS     r0,#0
000192  9000              STR      r0,[sp,#0]
000194  e039              B        |L1.522|
                  |L1.406|
;;;421      {
;;;422    
;;;423        /* Write the Input block in the IN FIFO */
;;;424        CRYP_DataIn(*(uint32_t*)(inputaddr));
000196  6828              LDR      r0,[r5,#0]
000198  f7fffffe          BL       CRYP_DataIn
;;;425        inputaddr+=4;
00019c  1d2d              ADDS     r5,r5,#4
;;;426        CRYP_DataIn(*(uint32_t*)(inputaddr));
00019e  6828              LDR      r0,[r5,#0]
0001a0  f7fffffe          BL       CRYP_DataIn
;;;427        inputaddr+=4;
0001a4  1d2d              ADDS     r5,r5,#4
;;;428        CRYP_DataIn(*(uint32_t*)(inputaddr));
0001a6  6828              LDR      r0,[r5,#0]
0001a8  f7fffffe          BL       CRYP_DataIn
;;;429        inputaddr+=4;
0001ac  1d2d              ADDS     r5,r5,#4
;;;430        CRYP_DataIn(*(uint32_t*)(inputaddr));
0001ae  6828              LDR      r0,[r5,#0]
0001b0  f7fffffe          BL       CRYP_DataIn
;;;431        inputaddr+=4;
0001b4  1d2d              ADDS     r5,r5,#4
;;;432        /* Wait until the complete message has been processed */
;;;433        counter = 0;
0001b6  2000              MOVS     r0,#0
0001b8  9002              STR      r0,[sp,#8]
;;;434        do
0001ba  bf00              NOP      
                  |L1.444|
;;;435        {
;;;436          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
0001bc  2010              MOVS     r0,#0x10
0001be  f7fffffe          BL       CRYP_GetFlagStatus
0001c2  4680              MOV      r8,r0
;;;437          counter++;
0001c4  9802              LDR      r0,[sp,#8]
0001c6  1c40              ADDS     r0,r0,#1
0001c8  9002              STR      r0,[sp,#8]
;;;438        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
0001ca  9802              LDR      r0,[sp,#8]
0001cc  f5b03f80          CMP      r0,#0x10000
0001d0  d002              BEQ      |L1.472|
0001d2  f1b80f00          CMP      r8,#0
0001d6  d1f1              BNE      |L1.444|
                  |L1.472|
;;;439    
;;;440        if (busystatus != RESET)
0001d8  f1b80f00          CMP      r8,#0
0001dc  d002              BEQ      |L1.484|
;;;441       {
;;;442           status = ERROR;
0001de  2000              MOVS     r0,#0
0001e0  9001              STR      r0,[sp,#4]
0001e2  e00f              B        |L1.516|
                  |L1.484|
;;;443        }
;;;444        else
;;;445        {
;;;446    
;;;447          /* Read the Output block from the Output FIFO */
;;;448          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0001e4  f7fffffe          BL       CRYP_DataOut
0001e8  6030              STR      r0,[r6,#0]
;;;449          outputaddr+=4;
0001ea  1d36              ADDS     r6,r6,#4
;;;450          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0001ec  f7fffffe          BL       CRYP_DataOut
0001f0  6030              STR      r0,[r6,#0]
;;;451          outputaddr+=4;
0001f2  1d36              ADDS     r6,r6,#4
;;;452          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0001f4  f7fffffe          BL       CRYP_DataOut
0001f8  6030              STR      r0,[r6,#0]
;;;453          outputaddr+=4;
0001fa  1d36              ADDS     r6,r6,#4
;;;454          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0001fc  f7fffffe          BL       CRYP_DataOut
000200  6030              STR      r0,[r6,#0]
;;;455          outputaddr+=4;
000202  1d36              ADDS     r6,r6,#4
                  |L1.516|
000204  9800              LDR      r0,[sp,#0]            ;420
000206  3010              ADDS     r0,r0,#0x10           ;420
000208  9000              STR      r0,[sp,#0]            ;420
                  |L1.522|
00020a  991f              LDR      r1,[sp,#0x7c]         ;420
00020c  9800              LDR      r0,[sp,#0]            ;420
00020e  4288              CMP      r0,r1                 ;420
000210  d202              BCS      |L1.536|
000212  9801              LDR      r0,[sp,#4]            ;420
000214  2800              CMP      r0,#0                 ;420
000216  d1be              BNE      |L1.406|
                  |L1.536|
;;;456        }
;;;457      }
;;;458    
;;;459      /* Disable Crypto */
;;;460      CRYP_Cmd(DISABLE);
000218  2000              MOVS     r0,#0
00021a  f7fffffe          BL       CRYP_Cmd
;;;461    
;;;462      return status;
00021e  9801              LDR      r0,[sp,#4]
;;;463    }
000220  b015              ADD      sp,sp,#0x54
000222  e8bd8ff0          POP      {r4-r11,pc}
;;;464    
                          ENDP


                          AREA ||i.CRYP_AES_CTR||, CODE, READONLY, ALIGN=1

                  CRYP_AES_CTR PROC
;;;480      */
;;;481    ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;482                             uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
;;;483                             uint8_t *Output)
;;;484    {
000004  b093              SUB      sp,sp,#0x4c
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  469b              MOV      r11,r3
;;;485      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;486      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;487      CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
;;;488      __IO uint32_t counter = 0;
00000e  2000              MOVS     r0,#0
000010  9004              STR      r0,[sp,#0x10]
;;;489      uint32_t busystatus = 0;
000012  9003              STR      r0,[sp,#0xc]
;;;490      ErrorStatus status = SUCCESS;
000014  2001              MOVS     r0,#1
000016  9002              STR      r0,[sp,#8]
;;;491      uint32_t keyaddr    = (uint32_t)Key;
000018  4654              MOV      r4,r10
;;;492      uint32_t inputaddr  = (uint32_t)Input;
00001a  9d1c              LDR      r5,[sp,#0x70]
;;;493      uint32_t outputaddr = (uint32_t)Output;
00001c  9e1e              LDR      r6,[sp,#0x78]
;;;494      uint32_t ivaddr     = (uint32_t)InitVectors;
00001e  464f              MOV      r7,r9
;;;495      uint32_t i = 0;
000020  2000              MOVS     r0,#0
000022  9001              STR      r0,[sp,#4]
;;;496    
;;;497      /* Crypto structures initialisation*/
;;;498      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000024  a809              ADD      r0,sp,#0x24
000026  f7fffffe          BL       CRYP_KeyStructInit
;;;499    
;;;500      switch(Keysize)
00002a  f1bb0f80          CMP      r11,#0x80
00002e  d006              BEQ      |L2.62|
000030  f1bb0fc0          CMP      r11,#0xc0
000034  d016              BEQ      |L2.100|
000036  f5bb7f80          CMP      r11,#0x100
00003a  d153              BNE      |L2.228|
00003c  e02e              B        |L2.156|
                  |L2.62|
;;;501      {
;;;502        case 128:
;;;503        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
00003e  2000              MOVS     r0,#0
000040  f8ad004a          STRH     r0,[sp,#0x4a]
;;;504        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000044  6820              LDR      r0,[r4,#0]
000046  ba00              REV      r0,r0
000048  900d              STR      r0,[sp,#0x34]
;;;505        keyaddr+=4;
00004a  1d24              ADDS     r4,r4,#4
;;;506        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00004c  6820              LDR      r0,[r4,#0]
00004e  ba00              REV      r0,r0
000050  900e              STR      r0,[sp,#0x38]
;;;507        keyaddr+=4;
000052  1d24              ADDS     r4,r4,#4
;;;508        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000054  6820              LDR      r0,[r4,#0]
000056  ba00              REV      r0,r0
000058  900f              STR      r0,[sp,#0x3c]
;;;509        keyaddr+=4;
00005a  1d24              ADDS     r4,r4,#4
;;;510        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00005c  6820              LDR      r0,[r4,#0]
00005e  ba00              REV      r0,r0
000060  9010              STR      r0,[sp,#0x40]
;;;511        break;
000062  e040              B        |L2.230|
                  |L2.100|
;;;512        case 192:
;;;513        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
000064  f44f7080          MOV      r0,#0x100
000068  f8ad004a          STRH     r0,[sp,#0x4a]
;;;514        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00006c  6820              LDR      r0,[r4,#0]
00006e  ba00              REV      r0,r0
000070  900b              STR      r0,[sp,#0x2c]
;;;515        keyaddr+=4;
000072  1d24              ADDS     r4,r4,#4
;;;516        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000074  6820              LDR      r0,[r4,#0]
000076  ba00              REV      r0,r0
000078  900c              STR      r0,[sp,#0x30]
;;;517        keyaddr+=4;
00007a  1d24              ADDS     r4,r4,#4
;;;518        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00007c  6820              LDR      r0,[r4,#0]
00007e  ba00              REV      r0,r0
000080  900d              STR      r0,[sp,#0x34]
;;;519        keyaddr+=4;
000082  1d24              ADDS     r4,r4,#4
;;;520        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000084  6820              LDR      r0,[r4,#0]
000086  ba00              REV      r0,r0
000088  900e              STR      r0,[sp,#0x38]
;;;521        keyaddr+=4;
00008a  1d24              ADDS     r4,r4,#4
;;;522        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00008c  6820              LDR      r0,[r4,#0]
00008e  ba00              REV      r0,r0
000090  900f              STR      r0,[sp,#0x3c]
;;;523        keyaddr+=4;
000092  1d24              ADDS     r4,r4,#4
;;;524        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000094  6820              LDR      r0,[r4,#0]
000096  ba00              REV      r0,r0
000098  9010              STR      r0,[sp,#0x40]
;;;525        break;
00009a  e024              B        |L2.230|
                  |L2.156|
;;;526        case 256:
;;;527        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
00009c  f44f7000          MOV      r0,#0x200
0000a0  f8ad004a          STRH     r0,[sp,#0x4a]
;;;528        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
0000a4  6820              LDR      r0,[r4,#0]
0000a6  ba00              REV      r0,r0
0000a8  9009              STR      r0,[sp,#0x24]
;;;529        keyaddr+=4;
0000aa  1d24              ADDS     r4,r4,#4
;;;530        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
0000ac  6820              LDR      r0,[r4,#0]
0000ae  ba00              REV      r0,r0
0000b0  900a              STR      r0,[sp,#0x28]
;;;531        keyaddr+=4;
0000b2  1d24              ADDS     r4,r4,#4
;;;532        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
0000b4  6820              LDR      r0,[r4,#0]
0000b6  ba00              REV      r0,r0
0000b8  900b              STR      r0,[sp,#0x2c]
;;;533        keyaddr+=4;
0000ba  1d24              ADDS     r4,r4,#4
;;;534        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
0000bc  6820              LDR      r0,[r4,#0]
0000be  ba00              REV      r0,r0
0000c0  900c              STR      r0,[sp,#0x30]
;;;535        keyaddr+=4;
0000c2  1d24              ADDS     r4,r4,#4
;;;536        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
0000c4  6820              LDR      r0,[r4,#0]
0000c6  ba00              REV      r0,r0
0000c8  900d              STR      r0,[sp,#0x34]
;;;537        keyaddr+=4;
0000ca  1d24              ADDS     r4,r4,#4
;;;538        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
0000cc  6820              LDR      r0,[r4,#0]
0000ce  ba00              REV      r0,r0
0000d0  900e              STR      r0,[sp,#0x38]
;;;539        keyaddr+=4;
0000d2  1d24              ADDS     r4,r4,#4
;;;540        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
0000d4  6820              LDR      r0,[r4,#0]
0000d6  ba00              REV      r0,r0
0000d8  900f              STR      r0,[sp,#0x3c]
;;;541        keyaddr+=4;
0000da  1d24              ADDS     r4,r4,#4
;;;542        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0000dc  6820              LDR      r0,[r4,#0]
0000de  ba00              REV      r0,r0
0000e0  9010              STR      r0,[sp,#0x40]
;;;543        break;
0000e2  e000              B        |L2.230|
                  |L2.228|
;;;544        default:
;;;545        break;
0000e4  bf00              NOP      
                  |L2.230|
0000e6  bf00              NOP                            ;511
;;;546      }
;;;547      /* CRYP Initialization Vectors */
;;;548      AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
0000e8  6838              LDR      r0,[r7,#0]
0000ea  ba00              REV      r0,r0
0000ec  9005              STR      r0,[sp,#0x14]
;;;549      ivaddr+=4;
0000ee  1d3f              ADDS     r7,r7,#4
;;;550      AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
0000f0  6838              LDR      r0,[r7,#0]
0000f2  ba00              REV      r0,r0
0000f4  9006              STR      r0,[sp,#0x18]
;;;551      ivaddr+=4;
0000f6  1d3f              ADDS     r7,r7,#4
;;;552      AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
0000f8  6838              LDR      r0,[r7,#0]
0000fa  ba00              REV      r0,r0
0000fc  9007              STR      r0,[sp,#0x1c]
;;;553      ivaddr+=4;
0000fe  1d3f              ADDS     r7,r7,#4
;;;554      AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
000100  6838              LDR      r0,[r7,#0]
000102  ba00              REV      r0,r0
000104  9008              STR      r0,[sp,#0x20]
;;;555    
;;;556      /* Key Initialisation */
;;;557      CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
000106  a809              ADD      r0,sp,#0x24
000108  f7fffffe          BL       CRYP_KeyInit
;;;558    
;;;559      /*------------------ AES Decryption ------------------*/
;;;560      if(Mode == MODE_DECRYPT) /* AES decryption */
00010c  f1b80f00          CMP      r8,#0
000110  d103              BNE      |L2.282|
;;;561      {
;;;562        /* Crypto Init for decryption process */
;;;563        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000112  2004              MOVS     r0,#4
000114  f8ad0044          STRH     r0,[sp,#0x44]
000118  e002              B        |L2.288|
                  |L2.282|
;;;564      }
;;;565      /*------------------ AES Encryption ------------------*/
;;;566      else /* AES encryption */
;;;567      {
;;;568        /* Crypto Init for Encryption process */
;;;569        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
00011a  2000              MOVS     r0,#0
00011c  f8ad0044          STRH     r0,[sp,#0x44]
                  |L2.288|
;;;570      }
;;;571      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
000120  2030              MOVS     r0,#0x30
000122  f8ad0046          STRH     r0,[sp,#0x46]
;;;572      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000126  2080              MOVS     r0,#0x80
000128  f8ad0048          STRH     r0,[sp,#0x48]
;;;573      CRYP_Init(&AES_CRYP_InitStructure);
00012c  a811              ADD      r0,sp,#0x44
00012e  f7fffffe          BL       CRYP_Init
;;;574    
;;;575      /* CRYP Initialization Vectors */
;;;576      CRYP_IVInit(&AES_CRYP_IVInitStructure);
000132  a805              ADD      r0,sp,#0x14
000134  f7fffffe          BL       CRYP_IVInit
;;;577    
;;;578      /* Flush IN/OUT FIFOs */
;;;579      CRYP_FIFOFlush();
000138  f7fffffe          BL       CRYP_FIFOFlush
;;;580    
;;;581      /* Enable Crypto processor */
;;;582      CRYP_Cmd(ENABLE);
00013c  2001              MOVS     r0,#1
00013e  f7fffffe          BL       CRYP_Cmd
;;;583    
;;;584      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
000142  2000              MOVS     r0,#0
000144  9001              STR      r0,[sp,#4]
000146  e038              B        |L2.442|
                  |L2.328|
;;;585      {
;;;586    
;;;587        /* Write the Input block in the IN FIFO */
;;;588        CRYP_DataIn(*(uint32_t*)(inputaddr));
000148  6828              LDR      r0,[r5,#0]
00014a  f7fffffe          BL       CRYP_DataIn
;;;589        inputaddr+=4;
00014e  1d2d              ADDS     r5,r5,#4
;;;590        CRYP_DataIn(*(uint32_t*)(inputaddr));
000150  6828              LDR      r0,[r5,#0]
000152  f7fffffe          BL       CRYP_DataIn
;;;591        inputaddr+=4;
000156  1d2d              ADDS     r5,r5,#4
;;;592        CRYP_DataIn(*(uint32_t*)(inputaddr));
000158  6828              LDR      r0,[r5,#0]
00015a  f7fffffe          BL       CRYP_DataIn
;;;593        inputaddr+=4;
00015e  1d2d              ADDS     r5,r5,#4
;;;594        CRYP_DataIn(*(uint32_t*)(inputaddr));
000160  6828              LDR      r0,[r5,#0]
000162  f7fffffe          BL       CRYP_DataIn
;;;595        inputaddr+=4;
000166  1d2d              ADDS     r5,r5,#4
;;;596        /* Wait until the complete message has been processed */
;;;597        counter = 0;
000168  2000              MOVS     r0,#0
00016a  9004              STR      r0,[sp,#0x10]
;;;598        do
00016c  bf00              NOP      
                  |L2.366|
;;;599        {
;;;600          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
00016e  2010              MOVS     r0,#0x10
000170  f7fffffe          BL       CRYP_GetFlagStatus
000174  9003              STR      r0,[sp,#0xc]
;;;601          counter++;
000176  9804              LDR      r0,[sp,#0x10]
000178  1c40              ADDS     r0,r0,#1
00017a  9004              STR      r0,[sp,#0x10]
;;;602        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
00017c  9804              LDR      r0,[sp,#0x10]
00017e  f5b03f80          CMP      r0,#0x10000
000182  d002              BEQ      |L2.394|
000184  9803              LDR      r0,[sp,#0xc]
000186  2800              CMP      r0,#0
000188  d1f1              BNE      |L2.366|
                  |L2.394|
;;;603    
;;;604        if (busystatus != RESET)
00018a  9803              LDR      r0,[sp,#0xc]
00018c  b110              CBZ      r0,|L2.404|
;;;605       {
;;;606           status = ERROR;
00018e  2000              MOVS     r0,#0
000190  9002              STR      r0,[sp,#8]
000192  e00f              B        |L2.436|
                  |L2.404|
;;;607        }
;;;608        else
;;;609        {
;;;610    
;;;611          /* Read the Output block from the Output FIFO */
;;;612          *(uint32_t*)(outputaddr) = CRYP_DataOut();
000194  f7fffffe          BL       CRYP_DataOut
000198  6030              STR      r0,[r6,#0]
;;;613          outputaddr+=4;
00019a  1d36              ADDS     r6,r6,#4
;;;614          *(uint32_t*)(outputaddr) = CRYP_DataOut();
00019c  f7fffffe          BL       CRYP_DataOut
0001a0  6030              STR      r0,[r6,#0]
;;;615          outputaddr+=4;
0001a2  1d36              ADDS     r6,r6,#4
;;;616          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0001a4  f7fffffe          BL       CRYP_DataOut
0001a8  6030              STR      r0,[r6,#0]
;;;617          outputaddr+=4;
0001aa  1d36              ADDS     r6,r6,#4
;;;618          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0001ac  f7fffffe          BL       CRYP_DataOut
0001b0  6030              STR      r0,[r6,#0]
;;;619          outputaddr+=4;
0001b2  1d36              ADDS     r6,r6,#4
                  |L2.436|
0001b4  9801              LDR      r0,[sp,#4]            ;584
0001b6  3010              ADDS     r0,r0,#0x10           ;584
0001b8  9001              STR      r0,[sp,#4]            ;584
                  |L2.442|
0001ba  991d              LDR      r1,[sp,#0x74]         ;584
0001bc  9801              LDR      r0,[sp,#4]            ;584
0001be  4288              CMP      r0,r1                 ;584
0001c0  d202              BCS      |L2.456|
0001c2  9802              LDR      r0,[sp,#8]            ;584
0001c4  2800              CMP      r0,#0                 ;584
0001c6  d1bf              BNE      |L2.328|
                  |L2.456|
;;;620        }
;;;621      }
;;;622      /* Disable Crypto */
;;;623      CRYP_Cmd(DISABLE);
0001c8  2000              MOVS     r0,#0
0001ca  f7fffffe          BL       CRYP_Cmd
;;;624    
;;;625      return status;
0001ce  9802              LDR      r0,[sp,#8]
;;;626    }
0001d0  b013              ADD      sp,sp,#0x4c
0001d2  e8bd8ff0          POP      {r4-r11,pc}
;;;627    /**
                          ENDP


                          AREA ||i.CRYP_AES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_AES_ECB PROC
;;;103      */
;;;104    ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;105                             uint8_t* Input, uint32_t Ilength, uint8_t* Output)
;;;106    {
000004  b08d              SUB      sp,sp,#0x34
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  469b              MOV      r11,r3
;;;107      CRYP_InitTypeDef AES_CRYP_InitStructure;
;;;108      CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
;;;109      __IO uint32_t counter = 0;
00000e  2000              MOVS     r0,#0
000010  9002              STR      r0,[sp,#8]
;;;110      uint32_t busystatus = 0;
000012  2700              MOVS     r7,#0
;;;111      ErrorStatus status = SUCCESS;
000014  2001              MOVS     r0,#1
000016  9001              STR      r0,[sp,#4]
;;;112      uint32_t keyaddr    = (uint32_t)Key;
000018  464c              MOV      r4,r9
;;;113      uint32_t inputaddr  = (uint32_t)Input;
00001a  465d              MOV      r5,r11
;;;114      uint32_t outputaddr = (uint32_t)Output;
00001c  9e17              LDR      r6,[sp,#0x5c]
;;;115      uint32_t i = 0;
00001e  2000              MOVS     r0,#0
000020  9000              STR      r0,[sp,#0]
;;;116    
;;;117      /* Crypto structures initialisation*/
;;;118      CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
000022  a803              ADD      r0,sp,#0xc
000024  f7fffffe          BL       CRYP_KeyStructInit
;;;119    
;;;120      switch(Keysize)
000028  f1ba0f80          CMP      r10,#0x80
00002c  d006              BEQ      |L3.60|
00002e  f1ba0fc0          CMP      r10,#0xc0
000032  d016              BEQ      |L3.98|
000034  f5ba7f80          CMP      r10,#0x100
000038  d153              BNE      |L3.226|
00003a  e02e              B        |L3.154|
                  |L3.60|
;;;121      {
;;;122        case 128:
;;;123        AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
00003c  2000              MOVS     r0,#0
00003e  f8ad0032          STRH     r0,[sp,#0x32]
;;;124        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000042  6820              LDR      r0,[r4,#0]
000044  ba00              REV      r0,r0
000046  9007              STR      r0,[sp,#0x1c]
;;;125        keyaddr+=4;
000048  1d24              ADDS     r4,r4,#4
;;;126        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00004a  6820              LDR      r0,[r4,#0]
00004c  ba00              REV      r0,r0
00004e  9008              STR      r0,[sp,#0x20]
;;;127        keyaddr+=4;
000050  1d24              ADDS     r4,r4,#4
;;;128        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000052  6820              LDR      r0,[r4,#0]
000054  ba00              REV      r0,r0
000056  9009              STR      r0,[sp,#0x24]
;;;129        keyaddr+=4;
000058  1d24              ADDS     r4,r4,#4
;;;130        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00005a  6820              LDR      r0,[r4,#0]
00005c  ba00              REV      r0,r0
00005e  900a              STR      r0,[sp,#0x28]
;;;131        break;
000060  e040              B        |L3.228|
                  |L3.98|
;;;132        case 192:
;;;133        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
000062  f44f7080          MOV      r0,#0x100
000066  f8ad0032          STRH     r0,[sp,#0x32]
;;;134        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00006a  6820              LDR      r0,[r4,#0]
00006c  ba00              REV      r0,r0
00006e  9005              STR      r0,[sp,#0x14]
;;;135        keyaddr+=4;
000070  1d24              ADDS     r4,r4,#4
;;;136        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000072  6820              LDR      r0,[r4,#0]
000074  ba00              REV      r0,r0
000076  9006              STR      r0,[sp,#0x18]
;;;137        keyaddr+=4;
000078  1d24              ADDS     r4,r4,#4
;;;138        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00007a  6820              LDR      r0,[r4,#0]
00007c  ba00              REV      r0,r0
00007e  9007              STR      r0,[sp,#0x1c]
;;;139        keyaddr+=4;
000080  1d24              ADDS     r4,r4,#4
;;;140        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000082  6820              LDR      r0,[r4,#0]
000084  ba00              REV      r0,r0
000086  9008              STR      r0,[sp,#0x20]
;;;141        keyaddr+=4;
000088  1d24              ADDS     r4,r4,#4
;;;142        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00008a  6820              LDR      r0,[r4,#0]
00008c  ba00              REV      r0,r0
00008e  9009              STR      r0,[sp,#0x24]
;;;143        keyaddr+=4;
000090  1d24              ADDS     r4,r4,#4
;;;144        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000092  6820              LDR      r0,[r4,#0]
000094  ba00              REV      r0,r0
000096  900a              STR      r0,[sp,#0x28]
;;;145        break;
000098  e024              B        |L3.228|
                  |L3.154|
;;;146        case 256:
;;;147        AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
00009a  f44f7000          MOV      r0,#0x200
00009e  f8ad0032          STRH     r0,[sp,#0x32]
;;;148        AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
0000a2  6820              LDR      r0,[r4,#0]
0000a4  ba00              REV      r0,r0
0000a6  9003              STR      r0,[sp,#0xc]
;;;149        keyaddr+=4;
0000a8  1d24              ADDS     r4,r4,#4
;;;150        AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
0000aa  6820              LDR      r0,[r4,#0]
0000ac  ba00              REV      r0,r0
0000ae  9004              STR      r0,[sp,#0x10]
;;;151        keyaddr+=4;
0000b0  1d24              ADDS     r4,r4,#4
;;;152        AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
0000b2  6820              LDR      r0,[r4,#0]
0000b4  ba00              REV      r0,r0
0000b6  9005              STR      r0,[sp,#0x14]
;;;153        keyaddr+=4;
0000b8  1d24              ADDS     r4,r4,#4
;;;154        AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
0000ba  6820              LDR      r0,[r4,#0]
0000bc  ba00              REV      r0,r0
0000be  9006              STR      r0,[sp,#0x18]
;;;155        keyaddr+=4;
0000c0  1d24              ADDS     r4,r4,#4
;;;156        AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
0000c2  6820              LDR      r0,[r4,#0]
0000c4  ba00              REV      r0,r0
0000c6  9007              STR      r0,[sp,#0x1c]
;;;157        keyaddr+=4;
0000c8  1d24              ADDS     r4,r4,#4
;;;158        AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
0000ca  6820              LDR      r0,[r4,#0]
0000cc  ba00              REV      r0,r0
0000ce  9008              STR      r0,[sp,#0x20]
;;;159        keyaddr+=4;
0000d0  1d24              ADDS     r4,r4,#4
;;;160        AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
0000d2  6820              LDR      r0,[r4,#0]
0000d4  ba00              REV      r0,r0
0000d6  9009              STR      r0,[sp,#0x24]
;;;161        keyaddr+=4;
0000d8  1d24              ADDS     r4,r4,#4
;;;162        AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
0000da  6820              LDR      r0,[r4,#0]
0000dc  ba00              REV      r0,r0
0000de  900a              STR      r0,[sp,#0x28]
;;;163        break;
0000e0  e000              B        |L3.228|
                  |L3.226|
;;;164        default:
;;;165        break;
0000e2  bf00              NOP      
                  |L3.228|
0000e4  bf00              NOP                            ;131
;;;166      }
;;;167    
;;;168      /*------------------ AES Decryption ------------------*/
;;;169      if(Mode == MODE_DECRYPT) /* AES decryption */
0000e6  f1b80f00          CMP      r8,#0
0000ea  d129              BNE      |L3.320|
;;;170      {
;;;171        /* Flush IN/OUT FIFOs */
;;;172        CRYP_FIFOFlush();
0000ec  f7fffffe          BL       CRYP_FIFOFlush
;;;173    
;;;174        /* Crypto Init for Key preparation for decryption process */
;;;175        AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
0000f0  2004              MOVS     r0,#4
0000f2  f8ad002c          STRH     r0,[sp,#0x2c]
;;;176        AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
0000f6  2038              MOVS     r0,#0x38
0000f8  f8ad002e          STRH     r0,[sp,#0x2e]
;;;177        AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
0000fc  2000              MOVS     r0,#0
0000fe  f8ad0030          STRH     r0,[sp,#0x30]
;;;178        CRYP_Init(&AES_CRYP_InitStructure);
000102  a80b              ADD      r0,sp,#0x2c
000104  f7fffffe          BL       CRYP_Init
;;;179    
;;;180        /* Key Initialisation */
;;;181        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
000108  a803              ADD      r0,sp,#0xc
00010a  f7fffffe          BL       CRYP_KeyInit
;;;182    
;;;183        /* Enable Crypto processor */
;;;184        CRYP_Cmd(ENABLE);
00010e  2001              MOVS     r0,#1
000110  f7fffffe          BL       CRYP_Cmd
;;;185    
;;;186        /* wait until the Busy flag is RESET */
;;;187        do
000114  bf00              NOP      
                  |L3.278|
;;;188        {
;;;189          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
000116  2010              MOVS     r0,#0x10
000118  f7fffffe          BL       CRYP_GetFlagStatus
00011c  4607              MOV      r7,r0
;;;190          counter++;
00011e  9802              LDR      r0,[sp,#8]
000120  1c40              ADDS     r0,r0,#1
000122  9002              STR      r0,[sp,#8]
;;;191        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
000124  9802              LDR      r0,[sp,#8]
000126  f5b03f80          CMP      r0,#0x10000
00012a  d001              BEQ      |L3.304|
00012c  2f00              CMP      r7,#0
00012e  d1f2              BNE      |L3.278|
                  |L3.304|
;;;192    
;;;193        if (busystatus != RESET)
000130  b117              CBZ      r7,|L3.312|
;;;194       {
;;;195           status = ERROR;
000132  2000              MOVS     r0,#0
000134  9001              STR      r0,[sp,#4]
000136  e009              B        |L3.332|
                  |L3.312|
;;;196        }
;;;197        else
;;;198        {
;;;199          /* Crypto Init for decryption process */  
;;;200          AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000138  2004              MOVS     r0,#4
00013a  f8ad002c          STRH     r0,[sp,#0x2c]
00013e  e005              B        |L3.332|
                  |L3.320|
;;;201        }
;;;202      }
;;;203      /*------------------ AES Encryption ------------------*/
;;;204      else /* AES encryption */
;;;205      {
;;;206    
;;;207        CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
000140  a803              ADD      r0,sp,#0xc
000142  f7fffffe          BL       CRYP_KeyInit
;;;208    
;;;209        /* Crypto Init for Encryption process */
;;;210        AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
000146  2000              MOVS     r0,#0
000148  f8ad002c          STRH     r0,[sp,#0x2c]
                  |L3.332|
;;;211      }
;;;212    
;;;213      AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
00014c  2020              MOVS     r0,#0x20
00014e  f8ad002e          STRH     r0,[sp,#0x2e]
;;;214      AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000152  2080              MOVS     r0,#0x80
000154  f8ad0030          STRH     r0,[sp,#0x30]
;;;215      CRYP_Init(&AES_CRYP_InitStructure);
000158  a80b              ADD      r0,sp,#0x2c
00015a  f7fffffe          BL       CRYP_Init
;;;216    
;;;217      /* Flush IN/OUT FIFOs */
;;;218      CRYP_FIFOFlush();
00015e  f7fffffe          BL       CRYP_FIFOFlush
;;;219    
;;;220      /* Enable Crypto processor */
;;;221      CRYP_Cmd(ENABLE);
000162  2001              MOVS     r0,#1
000164  f7fffffe          BL       CRYP_Cmd
;;;222    
;;;223      for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
000168  2000              MOVS     r0,#0
00016a  9000              STR      r0,[sp,#0]
00016c  e036              B        |L3.476|
                  |L3.366|
;;;224      {
;;;225    
;;;226        /* Write the Input block in the IN FIFO */
;;;227        CRYP_DataIn(*(uint32_t*)(inputaddr));
00016e  6828              LDR      r0,[r5,#0]
000170  f7fffffe          BL       CRYP_DataIn
;;;228        inputaddr+=4;
000174  1d2d              ADDS     r5,r5,#4
;;;229        CRYP_DataIn(*(uint32_t*)(inputaddr));
000176  6828              LDR      r0,[r5,#0]
000178  f7fffffe          BL       CRYP_DataIn
;;;230        inputaddr+=4;
00017c  1d2d              ADDS     r5,r5,#4
;;;231        CRYP_DataIn(*(uint32_t*)(inputaddr));
00017e  6828              LDR      r0,[r5,#0]
000180  f7fffffe          BL       CRYP_DataIn
;;;232        inputaddr+=4;
000184  1d2d              ADDS     r5,r5,#4
;;;233        CRYP_DataIn(*(uint32_t*)(inputaddr));
000186  6828              LDR      r0,[r5,#0]
000188  f7fffffe          BL       CRYP_DataIn
;;;234        inputaddr+=4;
00018c  1d2d              ADDS     r5,r5,#4
;;;235    
;;;236        /* Wait until the complete message has been processed */
;;;237        counter = 0;
00018e  2000              MOVS     r0,#0
000190  9002              STR      r0,[sp,#8]
;;;238        do
000192  bf00              NOP      
                  |L3.404|
;;;239        {
;;;240          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
000194  2010              MOVS     r0,#0x10
000196  f7fffffe          BL       CRYP_GetFlagStatus
00019a  4607              MOV      r7,r0
;;;241          counter++;
00019c  9802              LDR      r0,[sp,#8]
00019e  1c40              ADDS     r0,r0,#1
0001a0  9002              STR      r0,[sp,#8]
;;;242        }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
0001a2  9802              LDR      r0,[sp,#8]
0001a4  f5b03f80          CMP      r0,#0x10000
0001a8  d001              BEQ      |L3.430|
0001aa  2f00              CMP      r7,#0
0001ac  d1f2              BNE      |L3.404|
                  |L3.430|
;;;243    
;;;244        if (busystatus != RESET)
0001ae  b117              CBZ      r7,|L3.438|
;;;245       {
;;;246           status = ERROR;
0001b0  2000              MOVS     r0,#0
0001b2  9001              STR      r0,[sp,#4]
0001b4  e00f              B        |L3.470|
                  |L3.438|
;;;247        }
;;;248        else
;;;249        {
;;;250    
;;;251          /* Read the Output block from the Output FIFO */
;;;252          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0001b6  f7fffffe          BL       CRYP_DataOut
0001ba  6030              STR      r0,[r6,#0]
;;;253          outputaddr+=4;
0001bc  1d36              ADDS     r6,r6,#4
;;;254          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0001be  f7fffffe          BL       CRYP_DataOut
0001c2  6030              STR      r0,[r6,#0]
;;;255          outputaddr+=4;
0001c4  1d36              ADDS     r6,r6,#4
;;;256          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0001c6  f7fffffe          BL       CRYP_DataOut
0001ca  6030              STR      r0,[r6,#0]
;;;257          outputaddr+=4;
0001cc  1d36              ADDS     r6,r6,#4
;;;258          *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
0001ce  f7fffffe          BL       CRYP_DataOut
0001d2  6030              STR      r0,[r6,#0]
;;;259          outputaddr+=4;
0001d4  1d36              ADDS     r6,r6,#4
                  |L3.470|
0001d6  9800              LDR      r0,[sp,#0]            ;223
0001d8  3010              ADDS     r0,r0,#0x10           ;223
0001da  9000              STR      r0,[sp,#0]            ;223
                  |L3.476|
0001dc  9916              LDR      r1,[sp,#0x58]         ;223
0001de  9800              LDR      r0,[sp,#0]            ;223
0001e0  4288              CMP      r0,r1                 ;223
0001e2  d202              BCS      |L3.490|
0001e4  9801              LDR      r0,[sp,#4]            ;223
0001e6  2800              CMP      r0,#0                 ;223
0001e8  d1c1              BNE      |L3.366|
                  |L3.490|
;;;260        }
;;;261      }
;;;262    
;;;263      /* Disable Crypto */
;;;264      CRYP_Cmd(DISABLE);
0001ea  2000              MOVS     r0,#0
0001ec  f7fffffe          BL       CRYP_Cmd
;;;265    
;;;266      return status; 
0001f0  9801              LDR      r0,[sp,#4]
;;;267    }
0001f2  b00d              ADD      sp,sp,#0x34
0001f4  e8bd8ff0          POP      {r4-r11,pc}
;;;268    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\STM32F2xx_StdPeriph_Driver\\src\\stm32f2xx_cryp_aes.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f2xx_cryp_aes_c_c34cf6b8____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f2xx_cryp_aes_c_c34cf6b8____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f2xx_cryp_aes_c_c34cf6b8____REVSH|
#line 402
|__asm___20_stm32f2xx_cryp_aes_c_c34cf6b8____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f2xx_cryp_aes_c_c34cf6b8____RRX|
#line 587
|__asm___20_stm32f2xx_cryp_aes_c_c34cf6b8____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
