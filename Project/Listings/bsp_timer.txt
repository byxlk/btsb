; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\bsp_timer.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\bsp_timer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FatFS\src -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\User -I..\User\bsp -I..\User\emWinTask -I..\STemWin\Config -I..\STemWin\DisplayDriver -I..\STemWin\inc -I..\STemWin\OS -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\bsp_timer.crf ..\User\bsp\bsp_timer.c]
                          THUMB

                          AREA ||i.SysTick_ISR||, CODE, READONLY, ALIGN=2

                  SysTick_ISR PROC
;;;85     extern void bsp_RunPer10ms(void);
;;;86     void SysTick_ISR(void)
000000  b510              PUSH     {r4,lr}
;;;87     {
;;;88     	static uint8_t s_count = 0;
;;;89     	uint8_t i;
;;;90     
;;;91     	/* 每隔1ms进来1次 （仅用于 bsp_DelayMS） */
;;;92     	if (s_uiDelayCount > 0)
000002  481b              LDR      r0,|L1.112|
000004  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
000006  b140              CBZ      r0,|L1.26|
;;;93     	{
;;;94     		if (--s_uiDelayCount == 0)
000008  4819              LDR      r0,|L1.112|
00000a  6800              LDR      r0,[r0,#0]  ; s_uiDelayCount
00000c  1e40              SUBS     r0,r0,#1
00000e  4918              LDR      r1,|L1.112|
000010  6008              STR      r0,[r1,#0]  ; s_uiDelayCount
000012  b910              CBNZ     r0,|L1.26|
;;;95     		{
;;;96     			s_ucTimeOutFlag = 1;
000014  2001              MOVS     r0,#1
000016  4917              LDR      r1,|L1.116|
000018  7008              STRB     r0,[r1,#0]
                  |L1.26|
;;;97     		}
;;;98     	}
;;;99     
;;;100    	/* 每隔1ms，对软件定时器的计数器进行减一操作 */
;;;101    	for (i = 0; i < TMR_COUNT; i++)
00001a  2400              MOVS     r4,#0
00001c  e008              B        |L1.48|
                  |L1.30|
;;;102    	{
;;;103    		bsp_SoftTimerDec(&s_tTmr[i]);
00001e  eb040144          ADD      r1,r4,r4,LSL #1
000022  4a15              LDR      r2,|L1.120|
000024  eb020081          ADD      r0,r2,r1,LSL #2
000028  f7fffffe          BL       bsp_SoftTimerDec
00002c  1c60              ADDS     r0,r4,#1              ;101
00002e  b2c4              UXTB     r4,r0                 ;101
                  |L1.48|
000030  2c04              CMP      r4,#4                 ;101
000032  dbf4              BLT      |L1.30|
;;;104    	}
;;;105    
;;;106    	/* 全局运行时间每1ms增1 */
;;;107    	g_iRunTime++;
000034  4811              LDR      r0,|L1.124|
000036  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000038  1c40              ADDS     r0,r0,#1
00003a  4910              LDR      r1,|L1.124|
00003c  6008              STR      r0,[r1,#0]  ; g_iRunTime
;;;108    	if (g_iRunTime == 0x7FFFFFFF)	/* 这个变量是 int32_t 类型，最大数为 0x7FFFFFFF */
00003e  4608              MOV      r0,r1
000040  6800              LDR      r0,[r0,#0]  ; g_iRunTime
000042  f06f4100          MVN      r1,#0x80000000
000046  4288              CMP      r0,r1
000048  d102              BNE      |L1.80|
;;;109    	{
;;;110    		g_iRunTime = 0;
00004a  2000              MOVS     r0,#0
00004c  490b              LDR      r1,|L1.124|
00004e  6008              STR      r0,[r1,#0]  ; g_iRunTime
                  |L1.80|
;;;111    	}
;;;112    
;;;113    	bsp_RunPer1ms();		/* 每隔1ms调用一次此函数，此函数在 bsp.c */
000050  f7fffffe          BL       bsp_RunPer1ms
;;;114    
;;;115    	if (++s_count >= 10)
000054  480a              LDR      r0,|L1.128|
000056  7800              LDRB     r0,[r0,#0]  ; s_count
000058  1c40              ADDS     r0,r0,#1
00005a  b2c0              UXTB     r0,r0
00005c  4908              LDR      r1,|L1.128|
00005e  7008              STRB     r0,[r1,#0]
000060  280a              CMP      r0,#0xa
000062  db03              BLT      |L1.108|
;;;116    	{
;;;117    		s_count = 0;
000064  2000              MOVS     r0,#0
000066  7008              STRB     r0,[r1,#0]
;;;118    
;;;119    		bsp_RunPer10ms();	/* 每隔10ms调用一次此函数，此函数在 bsp.c */
000068  f7fffffe          BL       bsp_RunPer10ms
                  |L1.108|
;;;120    	}
;;;121    }
00006c  bd10              POP      {r4,pc}
;;;122    
                          ENDP

00006e  0000              DCW      0x0000
                  |L1.112|
                          DCD      s_uiDelayCount
                  |L1.116|
                          DCD      s_ucTimeOutFlag
                  |L1.120|
                          DCD      s_tTmr
                  |L1.124|
                          DCD      g_iRunTime
                  |L1.128|
                          DCD      s_count

                          AREA ||i.bsp_CheckTimer||, CODE, READONLY, ALIGN=2

                  bsp_CheckTimer PROC
;;;330    */
;;;331    uint8_t bsp_CheckTimer(uint8_t _id)
000000  4601              MOV      r1,r0
;;;332    {
;;;333    	if (_id >= TMR_COUNT)
000002  2904              CMP      r1,#4
000004  db01              BLT      |L2.10|
;;;334    	{
;;;335    		return 0;
000006  2000              MOVS     r0,#0
                  |L2.8|
;;;336    	}
;;;337    
;;;338    	if (s_tTmr[_id].Flag == 1)
;;;339    	{
;;;340    		s_tTmr[_id].Flag = 0;
;;;341    		return 1;
;;;342    	}
;;;343    	else
;;;344    	{
;;;345    		return 0;
;;;346    	}
;;;347    }
000008  4770              BX       lr
                  |L2.10|
00000a  eb010041          ADD      r0,r1,r1,LSL #1       ;338
00000e  4a08              LDR      r2,|L2.48|
000010  eb020080          ADD      r0,r2,r0,LSL #2       ;338
000014  7840              LDRB     r0,[r0,#1]            ;338
000016  2801              CMP      r0,#1                 ;338
000018  d108              BNE      |L2.44|
00001a  2000              MOVS     r0,#0                 ;340
00001c  eb010241          ADD      r2,r1,r1,LSL #1       ;340
000020  4b03              LDR      r3,|L2.48|
000022  eb030282          ADD      r2,r3,r2,LSL #2       ;340
000026  7050              STRB     r0,[r2,#1]            ;340
000028  2001              MOVS     r0,#1                 ;341
00002a  e7ed              B        |L2.8|
                  |L2.44|
00002c  2000              MOVS     r0,#0                 ;345
00002e  e7eb              B        |L2.8|
;;;348    
                          ENDP

                  |L2.48|
                          DCD      s_tTmr

                          AREA ||i.bsp_GetRunTime||, CODE, READONLY, ALIGN=2

                  bsp_GetRunTime PROC
;;;356    */
;;;357    int32_t bsp_GetRunTime(void)
000000  b510              PUSH     {r4,lr}
;;;358    {
;;;359    	int32_t runtime;
;;;360    
;;;361    	DISABLE_INT();  	/* 关中断 */
000002  f7fffffe          BL       vPortEnterCritical
;;;362    
;;;363    	runtime = g_iRunTime;	/* 这个变量在Systick中断中被改写，因此需要关中断进行保护 */
000006  4803              LDR      r0,|L3.20|
000008  6804              LDR      r4,[r0,#0]  ; g_iRunTime
;;;364    
;;;365    	ENABLE_INT();  		/* 开中断 */
00000a  f7fffffe          BL       vPortExitCritical
;;;366    
;;;367    	return runtime;
00000e  4620              MOV      r0,r4
;;;368    }
000010  bd10              POP      {r4,pc}
;;;369    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      g_iRunTime

                          AREA ||i.bsp_InitTimer||, CODE, READONLY, ALIGN=2

                  bsp_InitTimer PROC
;;;47     */
;;;48     void bsp_InitTimer(void)
000000  b570              PUSH     {r4-r6,lr}
;;;49     {
;;;50     	uint8_t i;
;;;51     
;;;52     	/* 清零所有的软件定时器 */
;;;53     	for (i = 0; i < TMR_COUNT; i++)
000002  2000              MOVS     r0,#0
000004  e016              B        |L4.52|
                  |L4.6|
;;;54     	{
;;;55     		s_tTmr[i].Count = 0;
000006  2100              MOVS     r1,#0
000008  eb000240          ADD      r2,r0,r0,LSL #1
00000c  4b1e              LDR      r3,|L4.136|
00000e  eb030282          ADD      r2,r3,r2,LSL #2
000012  6051              STR      r1,[r2,#4]
;;;56     		s_tTmr[i].PreLoad = 0;
000014  eb000240          ADD      r2,r0,r0,LSL #1
000018  eb030282          ADD      r2,r3,r2,LSL #2
00001c  6091              STR      r1,[r2,#8]
;;;57     		s_tTmr[i].Flag = 0;
00001e  eb000240          ADD      r2,r0,r0,LSL #1
000022  eb030282          ADD      r2,r3,r2,LSL #2
000026  7051              STRB     r1,[r2,#1]
;;;58     		s_tTmr[i].Mode = TMR_ONCE_MODE;	/* 缺省是1次性工作模式 */
000028  eb000240          ADD      r2,r0,r0,LSL #1
00002c  f8031022          STRB     r1,[r3,r2,LSL #2]
000030  1c41              ADDS     r1,r0,#1              ;53
000032  b2c8              UXTB     r0,r1                 ;53
                  |L4.52|
000034  2804              CMP      r0,#4                 ;53
000036  dbe6              BLT      |L4.6|
;;;59     	}
;;;60     
;;;61     	/*
;;;62     		配置systic中断周期为1ms，并启动systick中断。
;;;63     
;;;64         	SystemCoreClock 是固件中定义的系统内核时钟，对于STM32F4XX,一般为 168MHz
;;;65     
;;;66         	SysTick_Config() 函数的形参表示内核时钟多少个周期后触发一次Systick定时中断.
;;;67     	    	-- SystemCoreClock / 1000  表示定时频率为 1000Hz， 也就是定时周期为  1ms
;;;68     	    	-- SystemCoreClock / 500   表示定时频率为 500Hz，  也就是定时周期为  2ms
;;;69     	    	-- SystemCoreClock / 2000  表示定时频率为 2000Hz， 也就是定时周期为  500us
;;;70     
;;;71         	对于常规的应用，我们一般取定时周期1ms。对于低速CPU或者低功耗应用，可以设置定时周期为 10ms
;;;72         */
;;;73     	SysTick_Config(SystemCoreClock / 1000);
000038  4914              LDR      r1,|L4.140|
00003a  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
00003c  f44f737a          MOV      r3,#0x3e8
000040  fbb1f2f3          UDIV     r2,r1,r3
000044  1e51              SUBS     r1,r2,#1
000046  f1b17f80          CMP      r1,#0x1000000
00004a  d300              BCC      |L4.78|
00004c  e01b              B        |L4.134|
                  |L4.78|
00004e  1e51              SUBS     r1,r2,#1
000050  f04f23e0          MOV      r3,#0xe000e000
000054  6159              STR      r1,[r3,#0x14]
000056  1759              ASRS     r1,r3,#29
000058  230f              MOVS     r3,#0xf
00005a  2900              CMP      r1,#0
00005c  da07              BGE      |L4.110|
00005e  071c              LSLS     r4,r3,#28
000060  0e26              LSRS     r6,r4,#24
000062  4c0b              LDR      r4,|L4.144|
000064  f001050f          AND      r5,r1,#0xf
000068  1f2d              SUBS     r5,r5,#4
00006a  5566              STRB     r6,[r4,r5]
00006c  e003              B        |L4.118|
                  |L4.110|
00006e  071c              LSLS     r4,r3,#28
000070  0e25              LSRS     r5,r4,#24
000072  4c08              LDR      r4,|L4.148|
000074  5465              STRB     r5,[r4,r1]
                  |L4.118|
000076  bf00              NOP      
000078  2100              MOVS     r1,#0
00007a  f04f23e0          MOV      r3,#0xe000e000
00007e  6199              STR      r1,[r3,#0x18]
000080  2107              MOVS     r1,#7
000082  6119              STR      r1,[r3,#0x10]
000084  bf00              NOP      
                  |L4.134|
;;;74     }
000086  bd70              POP      {r4-r6,pc}
;;;75     
                          ENDP

                  |L4.136|
                          DCD      s_tTmr
                  |L4.140|
                          DCD      SystemCoreClock
                  |L4.144|
                          DCD      0xe000ed18
                  |L4.148|
                          DCD      0xe000e400

                          AREA ||i.bsp_SoftTimerDec||, CODE, READONLY, ALIGN=1

                  bsp_SoftTimerDec PROC
;;;130    */
;;;131    static void bsp_SoftTimerDec(SOFT_TMR *_tmr)
000000  6841              LDR      r1,[r0,#4]
;;;132    {
;;;133    	if (_tmr->Count > 0)
000002  b151              CBZ      r1,|L5.26|
;;;134    	{
;;;135    		/* 如果定时器变量减到1则设置定时器到达标志 */
;;;136    		if (--_tmr->Count == 0)
000004  6841              LDR      r1,[r0,#4]
000006  1e49              SUBS     r1,r1,#1
000008  6041              STR      r1,[r0,#4]
00000a  b931              CBNZ     r1,|L5.26|
;;;137    		{
;;;138    			_tmr->Flag = 1;
00000c  2101              MOVS     r1,#1
00000e  7041              STRB     r1,[r0,#1]
;;;139    
;;;140    			/* 如果是自动模式，则自动重装计数器 */
;;;141    			if(_tmr->Mode == TMR_AUTO_MODE)
000010  7801              LDRB     r1,[r0,#0]
000012  2901              CMP      r1,#1
000014  d101              BNE      |L5.26|
;;;142    			{
;;;143    				_tmr->Count = _tmr->PreLoad;
000016  6881              LDR      r1,[r0,#8]
000018  6041              STR      r1,[r0,#4]
                  |L5.26|
;;;144    			}
;;;145    		}
;;;146    	}
;;;147    }
00001a  4770              BX       lr
;;;148    
                          ENDP


                          AREA ||i.bsp_StartAutoTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StartAutoTimer PROC
;;;276    */
;;;277    void bsp_StartAutoTimer(uint8_t _id, uint32_t _period)
000000  b570              PUSH     {r4-r6,lr}
;;;278    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;279    	if (_id >= TMR_COUNT)
000006  2c04              CMP      r4,#4
000008  db06              BLT      |L6.24|
;;;280    	{
;;;281    		/* 打印出错的源代码文件名、函数名称 */
;;;282    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
00000a  4a11              LDR      r2,|L6.80|
00000c  a111              ADR      r1,|L6.84|
00000e  a017              ADR      r0,|L6.108|
000010  f7fffffe          BL       __2printf
;;;283    		while(1); /* 参数异常，死机等待看门狗复位 */
000014  bf00              NOP      
                  |L6.22|
000016  e7fe              B        |L6.22|
                  |L6.24|
;;;284    	}
;;;285    
;;;286    	DISABLE_INT();  		/* 关中断 */
000018  f7fffffe          BL       vPortEnterCritical
;;;287    
;;;288    	s_tTmr[_id].Count = _period;			/* 实时计数器初值 */
00001c  eb040044          ADD      r0,r4,r4,LSL #1
000020  491a              LDR      r1,|L6.140|
000022  eb010080          ADD      r0,r1,r0,LSL #2
000026  6045              STR      r5,[r0,#4]
;;;289    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
000028  eb040044          ADD      r0,r4,r4,LSL #1
00002c  eb010080          ADD      r0,r1,r0,LSL #2
000030  6085              STR      r5,[r0,#8]
;;;290    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000032  2000              MOVS     r0,#0
000034  eb040144          ADD      r1,r4,r4,LSL #1
000038  4a14              LDR      r2,|L6.140|
00003a  eb020181          ADD      r1,r2,r1,LSL #2
00003e  7048              STRB     r0,[r1,#1]
;;;291    	s_tTmr[_id].Mode = TMR_AUTO_MODE;	/* 自动工作模式 */
000040  2001              MOVS     r0,#1
000042  eb040144          ADD      r1,r4,r4,LSL #1
000046  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;292    
;;;293    	ENABLE_INT();  			/* 开中断 */
00004a  f7fffffe          BL       vPortExitCritical
;;;294    }
00004e  bd70              POP      {r4-r6,pc}
;;;295    
                          ENDP

                  |L6.80|
                          DCD      |symbol_number.31|
                  |L6.84|
000054  2e2e5c55          DCB      "..\\User\\bsp\\bsp_timer.c",0
000058  7365725c
00005c  6273705c
000060  6273705f
000064  74696d65
000068  722e6300
                  |L6.108|
00006c  4572726f          DCB      "Error: file %s, function %s()\r\n",0
000070  723a2066
000074  696c6520
000078  25732c20
00007c  66756e63
000080  74696f6e
000084  20257328
000088  290d0a00
                  |L6.140|
                          DCD      s_tTmr

                          AREA ||i.bsp_StartTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StartTimer PROC
;;;248    */
;;;249    void bsp_StartTimer(uint8_t _id, uint32_t _period)
000000  b570              PUSH     {r4-r6,lr}
;;;250    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;251    	if (_id >= TMR_COUNT)
000006  2c04              CMP      r4,#4
000008  db06              BLT      |L7.24|
;;;252    	{
;;;253    		/* 打印出错的源代码文件名、函数名称 */
;;;254    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
00000a  4a11              LDR      r2,|L7.80|
00000c  a111              ADR      r1,|L7.84|
00000e  a017              ADR      r0,|L7.108|
000010  f7fffffe          BL       __2printf
;;;255    		while(1); /* 参数异常，死机等待看门狗复位 */
000014  bf00              NOP      
                  |L7.22|
000016  e7fe              B        |L7.22|
                  |L7.24|
;;;256    	}
;;;257    
;;;258    	DISABLE_INT();  			/* 关中断 */
000018  f7fffffe          BL       vPortEnterCritical
;;;259    
;;;260    	s_tTmr[_id].Count = _period;		/* 实时计数器初值 */
00001c  eb040044          ADD      r0,r4,r4,LSL #1
000020  491a              LDR      r1,|L7.140|
000022  eb010080          ADD      r0,r1,r0,LSL #2
000026  6045              STR      r5,[r0,#4]
;;;261    	s_tTmr[_id].PreLoad = _period;		/* 计数器自动重装值，仅自动模式起作用 */
000028  eb040044          ADD      r0,r4,r4,LSL #1
00002c  eb010080          ADD      r0,r1,r0,LSL #2
000030  6085              STR      r5,[r0,#8]
;;;262    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000032  2000              MOVS     r0,#0
000034  eb040144          ADD      r1,r4,r4,LSL #1
000038  4a14              LDR      r2,|L7.140|
00003a  eb020181          ADD      r1,r2,r1,LSL #2
00003e  7048              STRB     r0,[r1,#1]
;;;263    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 1次性工作模式 */
000040  eb040144          ADD      r1,r4,r4,LSL #1
000044  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;264    
;;;265    	ENABLE_INT();  				/* 开中断 */
000048  f7fffffe          BL       vPortExitCritical
;;;266    }
00004c  bd70              POP      {r4-r6,pc}
;;;267    
                          ENDP

00004e  0000              DCW      0x0000
                  |L7.80|
                          DCD      __FUNCTION__
                  |L7.84|
000054  2e2e5c55          DCB      "..\\User\\bsp\\bsp_timer.c",0
000058  7365725c
00005c  6273705c
000060  6273705f
000064  74696d65
000068  722e6300
                  |L7.108|
00006c  4572726f          DCB      "Error: file %s, function %s()\r\n",0
000070  723a2066
000074  696c6520
000078  25732c20
00007c  66756e63
000080  74696f6e
000084  20257328
000088  290d0a00
                  |L7.140|
                          DCD      s_tTmr

                          AREA ||i.bsp_StopTimer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  bsp_StopTimer PROC
;;;303    */
;;;304    void bsp_StopTimer(uint8_t _id)
000000  b510              PUSH     {r4,lr}
;;;305    {
000002  4604              MOV      r4,r0
;;;306    	if (_id >= TMR_COUNT)
000004  2c04              CMP      r4,#4
000006  db06              BLT      |L8.22|
;;;307    	{
;;;308    		/* 打印出错的源代码文件名、函数名称 */
;;;309    		BSP_Printf("Error: file %s, function %s()\r\n", __FILE__, __FUNCTION__);
000008  4a0d              LDR      r2,|L8.64|
00000a  a10e              ADR      r1,|L8.68|
00000c  a013              ADR      r0,|L8.92|
00000e  f7fffffe          BL       __2printf
;;;310    		while(1); /* 参数异常，死机等待看门狗复位 */
000012  bf00              NOP      
                  |L8.20|
000014  e7fe              B        |L8.20|
                  |L8.22|
;;;311    	}
;;;312    
;;;313    	DISABLE_INT();  	/* 关中断 */
000016  f7fffffe          BL       vPortEnterCritical
;;;314    
;;;315    	s_tTmr[_id].Count = 0;				/* 实时计数器初值 */
00001a  2000              MOVS     r0,#0
00001c  eb040144          ADD      r1,r4,r4,LSL #1
000020  4a16              LDR      r2,|L8.124|
000022  eb020181          ADD      r1,r2,r1,LSL #2
000026  6048              STR      r0,[r1,#4]
;;;316    	s_tTmr[_id].Flag = 0;				/* 定时时间到标志 */
000028  eb040144          ADD      r1,r4,r4,LSL #1
00002c  eb020181          ADD      r1,r2,r1,LSL #2
000030  7048              STRB     r0,[r1,#1]
;;;317    	s_tTmr[_id].Mode = TMR_ONCE_MODE;	/* 自动工作模式 */
000032  eb040144          ADD      r1,r4,r4,LSL #1
000036  f8020021          STRB     r0,[r2,r1,LSL #2]
;;;318    
;;;319    	ENABLE_INT();  		/* 开中断 */
00003a  f7fffffe          BL       vPortExitCritical
;;;320    }
00003e  bd10              POP      {r4,pc}
;;;321    
                          ENDP

                  |L8.64|
                          DCD      |symbol_number.32|
                  |L8.68|
000044  2e2e5c55          DCB      "..\\User\\bsp\\bsp_timer.c",0
000048  7365725c
00004c  6273705c
000050  6273705f
000054  74696d65
000058  722e6300
                  |L8.92|
00005c  4572726f          DCB      "Error: file %s, function %s()\r\n",0
000060  723a2066
000064  696c6520
000068  25732c20
00006c  66756e63
000070  74696f6e
000074  20257328
000078  290d0a00
                  |L8.124|
                          DCD      s_tTmr

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_tTmr
                          %        48

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  6273705f          DCB      0x62,0x73,0x70,0x5f
000004  53746172          DCB      0x53,0x74,0x61,0x72
000008  7454696d          DCB      0x74,0x54,0x69,0x6d
00000c  657200            DCB      0x65,0x72,0x00
                  |symbol_number.31|
00000f  62                DCB      0x62
000010  73705f53          DCB      0x73,0x70,0x5f,0x53
000014  74617274          DCB      0x74,0x61,0x72,0x74
000018  4175746f          DCB      0x41,0x75,0x74,0x6f
00001c  54696d65          DCB      0x54,0x69,0x6d,0x65
000020  7200              DCB      0x72,0x00
                  |symbol_number.32|
000022  6273              DCB      0x62,0x73
000024  705f5374          DCB      0x70,0x5f,0x53,0x74
000028  6f705469          DCB      0x6f,0x70,0x54,0x69
00002c  6d657200          DCB      0x6d,0x65,0x72,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  s_uiDelayCount
                          DCD      0x00000000
                  s_ucTimeOutFlag
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  g_iRunTime
                          DCD      0x00000000
                  s_count
00000c  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\User\\bsp\\bsp_timer.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_bsp_timer_c_95bb07ef____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____REVSH|
#line 402
|__asm___11_bsp_timer_c_95bb07ef____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_timer_c_95bb07ef____RRX|
#line 587
|__asm___11_bsp_timer_c_95bb07ef____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
