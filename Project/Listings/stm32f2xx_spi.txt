; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f2xx_spi.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f2xx_spi.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FatFS\src -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\User -I..\User\bsp -I..\User\emWinTask -I..\STemWin\Config -I..\STemWin\DisplayDriver -I..\STemWin\inc -I..\STemWin\OS -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\stm32f2xx_spi.crf ..\Libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_spi.c]
                          THUMB

                          AREA ||i.I2S_Cmd||, CODE, READONLY, ALIGN=1

                  I2S_Cmd PROC
;;;492      */
;;;493    void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L1.12|
;;;494    {
;;;495      /* Check the parameters */
;;;496      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;497      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;498      
;;;499      if (NewState != DISABLE)
;;;500      {
;;;501        /* Enable the selected SPI peripheral (in I2S mode) */
;;;502        SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
000002  8b82              LDRH     r2,[r0,#0x1c]
000004  f4426280          ORR      r2,r2,#0x400
000008  8382              STRH     r2,[r0,#0x1c]
00000a  e004              B        |L1.22|
                  |L1.12|
;;;503      }
;;;504      else
;;;505      {
;;;506        /* Disable the selected SPI peripheral in I2S mode */
;;;507        SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
00000c  8b82              LDRH     r2,[r0,#0x1c]
00000e  f64f33ff          MOV      r3,#0xfbff
000012  401a              ANDS     r2,r2,r3
000014  8382              STRH     r2,[r0,#0x1c]
                  |L1.22|
;;;508      }
;;;509    }
000016  4770              BX       lr
;;;510    
                          ENDP


                          AREA ||i.I2S_Init||, CODE, READONLY, ALIGN=2

                  I2S_Init PROC
;;;279      */
;;;280    void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;281    {
;;;282      uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
000004  2500              MOVS     r5,#0
000006  2302              MOVS     r3,#2
000008  2400              MOVS     r4,#0
00000a  2701              MOVS     r7,#1
;;;283      uint32_t tmp = 0, i2sclk = 0;
00000c  2200              MOVS     r2,#0
00000e  2600              MOVS     r6,#0
;;;284    #ifndef I2S_EXTERNAL_CLOCK_VAL
;;;285      uint32_t pllm = 0, plln = 0, pllr = 0;
000010  4694              MOV      r12,r2
000012  4690              MOV      r8,r2
000014  4691              MOV      r9,r2
;;;286    #endif /* I2S_EXTERNAL_CLOCK_VAL */
;;;287      
;;;288      /* Check the I2S parameters */
;;;289      assert_param(IS_SPI_23_PERIPH(SPIx));
;;;290      assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
;;;291      assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
;;;292      assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
;;;293      assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
;;;294      assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
;;;295      assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
;;;296    
;;;297    /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
;;;298      /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
;;;299      SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
000016  f8b0a01c          LDRH     r10,[r0,#0x1c]
00001a  f24f0b40          MOV      r11,#0xf040
00001e  ea0a0a0b          AND      r10,r10,r11
000022  f8a0a01c          STRH     r10,[r0,#0x1c]
;;;300      SPIx->I2SPR = 0x0002;
000026  f04f0a02          MOV      r10,#2
00002a  f8a0a020          STRH     r10,[r0,#0x20]
;;;301      
;;;302      /* Get the I2SCFGR register value */
;;;303      tmpreg = SPIx->I2SCFGR;
00002e  8b85              LDRH     r5,[r0,#0x1c]
;;;304      
;;;305      /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
;;;306      if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
000030  f8d1a008          LDR      r10,[r1,#8]
000034  f1ba0f02          CMP      r10,#2
000038  d101              BNE      |L2.62|
;;;307      {
;;;308        i2sodd = (uint16_t)0;
00003a  bf00              NOP      
;;;309        i2sdiv = (uint16_t)2;   
00003c  e06c              B        |L2.280|
                  |L2.62|
;;;310      }
;;;311      /* If the requested audio frequency is not the default, compute the prescaler */
;;;312      else
;;;313      {
;;;314        /* Check the frame length (For the Prescaler computing) *******************/
;;;315        if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
00003e  f8b1a004          LDRH     r10,[r1,#4]
000042  f1ba0f00          CMP      r10,#0
000046  d101              BNE      |L2.76|
;;;316        {
;;;317          /* Packet length is 16 bits */
;;;318          packetlength = 1;
000048  2701              MOVS     r7,#1
00004a  e000              B        |L2.78|
                  |L2.76|
;;;319        }
;;;320        else
;;;321        {
;;;322          /* Packet length is 32 bits */
;;;323          packetlength = 2;
00004c  2702              MOVS     r7,#2
                  |L2.78|
;;;324        }
;;;325    
;;;326        /* Get I2S source Clock frequency (only in Silicon RevisionB and RevisionY) */
;;;327          
;;;328        /* If an external I2S clock has to be used, this define should be set  
;;;329           in the project configuration or in the stm32f2xx_conf.h file */
;;;330      #ifdef I2S_EXTERNAL_CLOCK_VAL     
;;;331        /* Set external clock as I2S clock source */
;;;332        if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
;;;333        {
;;;334          RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
;;;335        }
;;;336        
;;;337        /* Set the I2S clock to the external clock  value */
;;;338        i2sclk = I2S_EXTERNAL_CLOCK_VAL;
;;;339    
;;;340      #else /* There is no define for External I2S clock source */
;;;341        /* Set PLLI2S as I2S clock source */
;;;342        if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
00004e  f8dfa110          LDR      r10,|L2.352|
000052  f8daa000          LDR      r10,[r10,#0]
000056  f40a0a00          AND      r10,r10,#0x800000
00005a  f1ba0f00          CMP      r10,#0
00005e  d009              BEQ      |L2.116|
;;;343        {
;;;344          RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
000060  f8dfa0fc          LDR      r10,|L2.352|
000064  f8daa000          LDR      r10,[r10,#0]
000068  f42a0a00          BIC      r10,r10,#0x800000
00006c  f8dfb0f0          LDR      r11,|L2.352|
000070  f8cba000          STR      r10,[r11,#0]
                  |L2.116|
;;;345        }    
;;;346        
;;;347        /* Get the PLLI2SN value */
;;;348        plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
000074  f8dfa0e8          LDR      r10,|L2.352|
000078  f10a0a7c          ADD      r10,r10,#0x7c
00007c  f8daa000          LDR      r10,[r10,#0]
000080  f3ca1888          UBFX     r8,r10,#6,#9
;;;349                          (RCC_PLLI2SCFGR_PLLI2SN >> 6));
;;;350        
;;;351        /* Get the PLLI2SR value */
;;;352        pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
000084  f8dfa0d8          LDR      r10,|L2.352|
000088  f10a0a7c          ADD      r10,r10,#0x7c
00008c  f8daa000          LDR      r10,[r10,#0]
000090  f3ca7902          UBFX     r9,r10,#28,#3
;;;353                          (RCC_PLLI2SCFGR_PLLI2SR >> 28));
;;;354        
;;;355        /* Get the PLLM value */
;;;356        pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
000094  f8dfa0c8          LDR      r10,|L2.352|
000098  f1aa0a04          SUB      r10,r10,#4
00009c  f8daa000          LDR      r10,[r10,#0]
0000a0  f00a0c3f          AND      r12,r10,#0x3f
;;;357        
;;;358        /* Get the I2S source clock value */
;;;359        i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
0000a4  f8dfa0bc          LDR      r10,|L2.356|
0000a8  fbbafafc          UDIV     r10,r10,r12
0000ac  fb0afa08          MUL      r10,r10,r8
0000b0  fbbaf6f9          UDIV     r6,r10,r9
;;;360      #endif /* I2S_EXTERNAL_CLOCK_VAL */
;;;361        
;;;362        /* Compute the Real divider depending on the MCLK output state, with a floating point */
;;;363        if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
0000b4  f8b1a006          LDRH     r10,[r1,#6]
0000b8  f5ba7f00          CMP      r10,#0x200
0000bc  d10e              BNE      |L2.220|
;;;364        {
;;;365          /* MCLK output is enabled */
;;;366          tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
0000be  ea4f2a16          LSR      r10,r6,#8
0000c2  eb0a0a8a          ADD      r10,r10,r10,LSL #2
0000c6  ea4f0a4a          LSL      r10,r10,#1
0000ca  f8d1b008          LDR      r11,[r1,#8]
0000ce  fbbafafb          UDIV     r10,r10,r11
0000d2  f10a0a05          ADD      r10,r10,#5
0000d6  fa1ff28a          UXTH     r2,r10
0000da  e00f              B        |L2.252|
                  |L2.220|
;;;367        }
;;;368        else
;;;369        {
;;;370          /* MCLK output is disabled */
;;;371          tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
0000dc  ea4f1a47          LSL      r10,r7,#5
0000e0  fbb6fafa          UDIV     r10,r6,r10
0000e4  eb0a0a8a          ADD      r10,r10,r10,LSL #2
0000e8  ea4f0a4a          LSL      r10,r10,#1
0000ec  f8d1b008          LDR      r11,[r1,#8]
0000f0  fbbafafb          UDIV     r10,r10,r11
0000f4  f10a0a05          ADD      r10,r10,#5
0000f8  fa1ff28a          UXTH     r2,r10
                  |L2.252|
;;;372        }
;;;373        
;;;374        /* Remove the flatting point */
;;;375        tmp = tmp / 10;  
0000fc  f04f0a0a          MOV      r10,#0xa
000100  fbb2f2fa          UDIV     r2,r2,r10
;;;376          
;;;377        /* Check the parity of the divider */
;;;378        i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
000104  f0020401          AND      r4,r2,#1
;;;379       
;;;380        /* Compute the i2sdiv prescaler */
;;;381        i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
000108  eba20a04          SUB      r10,r2,r4
00010c  f3ca034f          UBFX     r3,r10,#1,#16
;;;382       
;;;383        /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
;;;384        i2sodd = (uint16_t) (i2sodd << 8);
000110  f64f7aff          MOV      r10,#0xffff
000114  ea0a2404          AND      r4,r10,r4,LSL #8
                  |L2.280|
;;;385      }
;;;386    
;;;387      /* Test if the divider is 1 or 0 or greater than 0xFF */
;;;388      if ((i2sdiv < 2) || (i2sdiv > 0xFF))
000118  2b02              CMP      r3,#2
00011a  db01              BLT      |L2.288|
00011c  2bff              CMP      r3,#0xff
00011e  dd01              BLE      |L2.292|
                  |L2.288|
;;;389      {
;;;390        /* Set the default values */
;;;391        i2sdiv = 2;
000120  2302              MOVS     r3,#2
;;;392        i2sodd = 0;
000122  2400              MOVS     r4,#0
                  |L2.292|
;;;393      }
;;;394    
;;;395      /* Write to SPIx I2SPR register the computed value */
;;;396      SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
000124  f8b1a006          LDRH     r10,[r1,#6]
000128  ea4a0a04          ORR      r10,r10,r4
00012c  ea4a0a03          ORR      r10,r10,r3
000130  f8a0a020          STRH     r10,[r0,#0x20]
;;;397     
;;;398      /* Configure the I2S with the SPI_InitStruct values */
;;;399      tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
000134  f8b1a004          LDRH     r10,[r1,#4]
000138  f8b1b00c          LDRH     r11,[r1,#0xc]
00013c  ea4a0a0b          ORR      r10,r10,r11
000140  f8b1b002          LDRH     r11,[r1,#2]
000144  ea4a0a0b          ORR      r10,r10,r11
000148  f8b1b000          LDRH     r11,[r1,#0]
00014c  ea4a0a0b          ORR      r10,r10,r11
000150  f44a6a00          ORR      r10,r10,#0x800
000154  ea4a0505          ORR      r5,r10,r5
;;;400                      (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
;;;401                      (uint16_t)I2S_InitStruct->I2S_CPOL))));
;;;402     
;;;403      /* Write to SPIx I2SCFGR */  
;;;404      SPIx->I2SCFGR = tmpreg;
000158  8385              STRH     r5,[r0,#0x1c]
;;;405    }
00015a  e8bd8ff0          POP      {r4-r11,pc}
;;;406    
                          ENDP

00015e  0000              DCW      0x0000
                  |L2.352|
                          DCD      0x40023808
                  |L2.356|
                          DCD      0x017d7840

                          AREA ||i.I2S_StructInit||, CODE, READONLY, ALIGN=1

                  I2S_StructInit PROC
;;;439      */
;;;440    void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
000000  2100              MOVS     r1,#0
;;;441    {
;;;442    /*--------------- Reset I2S init structure parameters values -----------------*/
;;;443      /* Initialize the I2S_Mode member */
;;;444      I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
000002  8001              STRH     r1,[r0,#0]
;;;445      
;;;446      /* Initialize the I2S_Standard member */
;;;447      I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
000004  8041              STRH     r1,[r0,#2]
;;;448      
;;;449      /* Initialize the I2S_DataFormat member */
;;;450      I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
000006  8081              STRH     r1,[r0,#4]
;;;451      
;;;452      /* Initialize the I2S_MCLKOutput member */
;;;453      I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
000008  80c1              STRH     r1,[r0,#6]
;;;454      
;;;455      /* Initialize the I2S_AudioFreq member */
;;;456      I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
00000a  2102              MOVS     r1,#2
00000c  6081              STR      r1,[r0,#8]
;;;457      
;;;458      /* Initialize the I2S_CPOL member */
;;;459      I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
00000e  2100              MOVS     r1,#0
000010  8181              STRH     r1,[r0,#0xc]
;;;460    }
000012  4770              BX       lr
;;;461    
                          ENDP


                          AREA ||i.SPI_BiDirectionalLineConfig||, CODE, READONLY, ALIGN=1

                  SPI_BiDirectionalLineConfig PROC
;;;539      */
;;;540    void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
000000  f5b14f80          CMP      r1,#0x4000
;;;541    {
;;;542      /* Check the parameters */
;;;543      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;544      assert_param(IS_SPI_DIRECTION(SPI_Direction));
;;;545      if (SPI_Direction == SPI_Direction_Tx)
000004  d104              BNE      |L4.16|
;;;546      {
;;;547        /* Set the Tx only mode */
;;;548        SPIx->CR1 |= SPI_Direction_Tx;
000006  8802              LDRH     r2,[r0,#0]
000008  f4424280          ORR      r2,r2,#0x4000
00000c  8002              STRH     r2,[r0,#0]
00000e  e004              B        |L4.26|
                  |L4.16|
;;;549      }
;;;550      else
;;;551      {
;;;552        /* Set the Rx only mode */
;;;553        SPIx->CR1 &= SPI_Direction_Rx;
000010  8802              LDRH     r2,[r0,#0]
000012  f64b73ff          MOV      r3,#0xbfff
000016  401a              ANDS     r2,r2,r3
000018  8002              STRH     r2,[r0,#0]
                  |L4.26|
;;;554      }
;;;555    }
00001a  4770              BX       lr
;;;556    
                          ENDP


                          AREA ||i.SPI_CalculateCRC||, CODE, READONLY, ALIGN=1

                  SPI_CalculateCRC PROC
;;;776      */
;;;777    void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L5.12|
;;;778    {
;;;779      /* Check the parameters */
;;;780      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;781      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;782      if (NewState != DISABLE)
;;;783      {
;;;784        /* Enable the selected SPI CRC calculation */
;;;785        SPIx->CR1 |= SPI_CR1_CRCEN;
000002  8802              LDRH     r2,[r0,#0]
000004  f4425200          ORR      r2,r2,#0x2000
000008  8002              STRH     r2,[r0,#0]
00000a  e004              B        |L5.22|
                  |L5.12|
;;;786      }
;;;787      else
;;;788      {
;;;789        /* Disable the selected SPI CRC calculation */
;;;790        SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
00000c  8802              LDRH     r2,[r0,#0]
00000e  f64d73ff          MOV      r3,#0xdfff
000012  401a              ANDS     r2,r2,r3
000014  8002              STRH     r2,[r0,#0]
                  |L5.22|
;;;791      }
;;;792    }
000016  4770              BX       lr
;;;793    
                          ENDP


                          AREA ||i.SPI_Cmd||, CODE, READONLY, ALIGN=1

                  SPI_Cmd PROC
;;;468      */
;;;469    void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L6.12|
;;;470    {
;;;471      /* Check the parameters */
;;;472      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;473      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;474      if (NewState != DISABLE)
;;;475      {
;;;476        /* Enable the selected SPI peripheral */
;;;477        SPIx->CR1 |= SPI_CR1_SPE;
000002  8802              LDRH     r2,[r0,#0]
000004  f0420240          ORR      r2,r2,#0x40
000008  8002              STRH     r2,[r0,#0]
00000a  e004              B        |L6.22|
                  |L6.12|
;;;478      }
;;;479      else
;;;480      {
;;;481        /* Disable the selected SPI peripheral */
;;;482        SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
00000c  8802              LDRH     r2,[r0,#0]
00000e  f64f73bf          MOV      r3,#0xffbf
000012  401a              ANDS     r2,r2,r3
000014  8002              STRH     r2,[r0,#0]
                  |L6.22|
;;;483      }
;;;484    }
000016  4770              BX       lr
;;;485    
                          ENDP


                          AREA ||i.SPI_DataSizeConfig||, CODE, READONLY, ALIGN=1

                  SPI_DataSizeConfig PROC
;;;519      */
;;;520    void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
000000  8802              LDRH     r2,[r0,#0]
;;;521    {
;;;522      /* Check the parameters */
;;;523      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;524      assert_param(IS_SPI_DATASIZE(SPI_DataSize));
;;;525      /* Clear DFF bit */
;;;526      SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
000002  f24f73ff          MOV      r3,#0xf7ff
000006  401a              ANDS     r2,r2,r3
000008  8002              STRH     r2,[r0,#0]
;;;527      /* Set new DFF bit value */
;;;528      SPIx->CR1 |= SPI_DataSize;
00000a  8802              LDRH     r2,[r0,#0]
00000c  430a              ORRS     r2,r2,r1
00000e  8002              STRH     r2,[r0,#0]
;;;529    }
000010  4770              BX       lr
;;;530    
                          ENDP


                          AREA ||i.SPI_GetCRC||, CODE, READONLY, ALIGN=1

                  SPI_GetCRC PROC
;;;816      */
;;;817    uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
000000  4602              MOV      r2,r0
;;;818    {
;;;819      uint16_t crcreg = 0;
000002  2000              MOVS     r0,#0
;;;820      /* Check the parameters */
;;;821      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;822      assert_param(IS_SPI_CRC(SPI_CRC));
;;;823      if (SPI_CRC != SPI_CRC_Rx)
000004  2901              CMP      r1,#1
000006  d001              BEQ      |L8.12|
;;;824      {
;;;825        /* Get the Tx CRC register */
;;;826        crcreg = SPIx->TXCRCR;
000008  8b10              LDRH     r0,[r2,#0x18]
00000a  e000              B        |L8.14|
                  |L8.12|
;;;827      }
;;;828      else
;;;829      {
;;;830        /* Get the Rx CRC register */
;;;831        crcreg = SPIx->RXCRCR;
00000c  8a90              LDRH     r0,[r2,#0x14]
                  |L8.14|
;;;832      }
;;;833      /* Return the selected CRC register */
;;;834      return crcreg;
;;;835    }
00000e  4770              BX       lr
;;;836    
                          ENDP


                          AREA ||i.SPI_GetCRCPolynomial||, CODE, READONLY, ALIGN=1

                  SPI_GetCRCPolynomial PROC
;;;841      */
;;;842    uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
000000  4601              MOV      r1,r0
;;;843    {
;;;844      /* Check the parameters */
;;;845      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;846      
;;;847      /* Return the CRC polynomial register */
;;;848      return SPIx->CRCPR;
000002  8a08              LDRH     r0,[r1,#0x10]
;;;849    }
000004  4770              BX       lr
;;;850    
                          ENDP


                          AREA ||i.SPI_I2S_ClearFlag||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearFlag PROC
;;;1072     */
;;;1073   void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  43ca              MVNS     r2,r1
;;;1074   {
;;;1075     /* Check the parameters */
;;;1076     assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;1077     assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
;;;1078       
;;;1079     /* Clear the selected SPI CRC Error (CRCERR) flag */
;;;1080     SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
000002  8102              STRH     r2,[r0,#8]
;;;1081   }
000004  4770              BX       lr
;;;1082   
                          ENDP


                          AREA ||i.SPI_I2S_ClearITPendingBit||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ClearITPendingBit PROC
;;;1152     */
;;;1153   void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b510              PUSH     {r4,lr}
;;;1154   {
;;;1155     uint16_t itpos = 0;
000002  2200              MOVS     r2,#0
;;;1156     /* Check the parameters */
;;;1157     assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;1158     assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
;;;1159   
;;;1160     /* Get the SPI_I2S IT index */
;;;1161     itpos = 0x01 << (SPI_I2S_IT & 0x0F);
000004  f001040f          AND      r4,r1,#0xf
000008  2301              MOVS     r3,#1
00000a  40a3              LSLS     r3,r3,r4
00000c  b29a              UXTH     r2,r3
;;;1162   
;;;1163     /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
;;;1164     SPIx->SR = (uint16_t)~itpos;
00000e  43d3              MVNS     r3,r2
000010  8103              STRH     r3,[r0,#8]
;;;1165   }
000012  bd10              POP      {r4,pc}
;;;1166   
                          ENDP


                          AREA ||i.SPI_I2S_DMACmd||, CODE, READONLY, ALIGN=1

                  SPI_I2S_DMACmd PROC
;;;878      */
;;;879    void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
000000  b11a              CBZ      r2,|L12.10|
;;;880    {
;;;881      /* Check the parameters */
;;;882      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;883      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;884      assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
;;;885    
;;;886      if (NewState != DISABLE)
;;;887      {
;;;888        /* Enable the selected SPI DMA requests */
;;;889        SPIx->CR2 |= SPI_I2S_DMAReq;
000002  8883              LDRH     r3,[r0,#4]
000004  430b              ORRS     r3,r3,r1
000006  8083              STRH     r3,[r0,#4]
000008  e002              B        |L12.16|
                  |L12.10|
;;;890      }
;;;891      else
;;;892      {
;;;893        /* Disable the selected SPI DMA requests */
;;;894        SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
00000a  8883              LDRH     r3,[r0,#4]
00000c  438b              BICS     r3,r3,r1
00000e  8083              STRH     r3,[r0,#4]
                  |L12.16|
;;;895      }
;;;896    }
000010  4770              BX       lr
;;;897    
                          ENDP


                          AREA ||i.SPI_I2S_DeInit||, CODE, READONLY, ALIGN=2

                  SPI_I2S_DeInit PROC
;;;176      */
;;;177    void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
000000  b510              PUSH     {r4,lr}
;;;178    {
000002  4604              MOV      r4,r0
;;;179      /* Check the parameters */
;;;180      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;181    
;;;182      if (SPIx == SPI1)
000004  4811              LDR      r0,|L13.76|
000006  4284              CMP      r4,r0
000008  d108              BNE      |L13.28|
;;;183      {
;;;184        /* Enable SPI1 reset state */
;;;185        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  1480              ASRS     r0,r0,#18
00000e  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;186        /* Release SPI1 from reset state */
;;;187        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
000012  2100              MOVS     r1,#0
000014  14a0              ASRS     r0,r4,#18
000016  f7fffffe          BL       RCC_APB2PeriphResetCmd
00001a  e016              B        |L13.74|
                  |L13.28|
;;;188      }
;;;189      else if (SPIx == SPI2)
00001c  480c              LDR      r0,|L13.80|
00001e  4284              CMP      r4,r0
000020  d108              BNE      |L13.52|
;;;190      {
;;;191        /* Enable SPI2 reset state */
;;;192        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
000022  2101              MOVS     r1,#1
000024  1400              ASRS     r0,r0,#16
000026  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;193        /* Release SPI2 from reset state */
;;;194        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
00002a  2100              MOVS     r1,#0
00002c  1420              ASRS     r0,r4,#16
00002e  f7fffffe          BL       RCC_APB1PeriphResetCmd
000032  e00a              B        |L13.74|
                  |L13.52|
;;;195        }
;;;196      else
;;;197      {
;;;198        if (SPIx == SPI3)
000034  4807              LDR      r0,|L13.84|
000036  4284              CMP      r4,r0
000038  d107              BNE      |L13.74|
;;;199        {
;;;200          /* Enable SPI3 reset state */
;;;201          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  13c0              ASRS     r0,r0,#15
00003e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;202          /* Release SPI3 from reset state */
;;;203          RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
000042  2100              MOVS     r1,#0
000044  13e0              ASRS     r0,r4,#15
000046  f7fffffe          BL       RCC_APB1PeriphResetCmd
                  |L13.74|
;;;204        }
;;;205      }
;;;206    }
00004a  bd10              POP      {r4,pc}
;;;207    
                          ENDP

                  |L13.76|
                          DCD      0x40013000
                  |L13.80|
                          DCD      0x40003800
                  |L13.84|
                          DCD      0x40003c00

                          AREA ||i.SPI_I2S_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetFlagStatus PROC
;;;1031     */
;;;1032   FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
000000  4602              MOV      r2,r0
;;;1033   {
;;;1034     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1035     /* Check the parameters */
;;;1036     assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;1037     assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
;;;1038     
;;;1039     /* Check the status of the specified SPI flag */
;;;1040     if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
000004  8913              LDRH     r3,[r2,#8]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L14.14|
;;;1041     {
;;;1042       /* SPI_I2S_FLAG is set */
;;;1043       bitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L14.16|
                  |L14.14|
;;;1044     }
;;;1045     else
;;;1046     {
;;;1047       /* SPI_I2S_FLAG is reset */
;;;1048       bitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L14.16|
;;;1049     }
;;;1050     /* Return the SPI_I2S_FLAG status */
;;;1051     return  bitstatus;
;;;1052   }
000010  4770              BX       lr
;;;1053   
                          ENDP


                          AREA ||i.SPI_I2S_GetITStatus||, CODE, READONLY, ALIGN=1

                  SPI_I2S_GetITStatus PROC
;;;1097     */
;;;1098   ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1099   {
000002  4602              MOV      r2,r0
;;;1100     ITStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;1101     uint16_t itpos = 0, itmask = 0, enablestatus = 0;
000006  2400              MOVS     r4,#0
000008  2300              MOVS     r3,#0
00000a  2500              MOVS     r5,#0
;;;1102   
;;;1103     /* Check the parameters */
;;;1104     assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;1105     assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
;;;1106   
;;;1107     /* Get the SPI_I2S_IT index */
;;;1108     itpos = 0x01 << (SPI_I2S_IT & 0x0F);
00000c  f001070f          AND      r7,r1,#0xf
000010  2601              MOVS     r6,#1
000012  40be              LSLS     r6,r6,r7
000014  b2b4              UXTH     r4,r6
;;;1109   
;;;1110     /* Get the SPI_I2S_IT IT mask */
;;;1111     itmask = SPI_I2S_IT >> 4;
000016  110b              ASRS     r3,r1,#4
;;;1112   
;;;1113     /* Set the IT mask */
;;;1114     itmask = 0x01 << itmask;
000018  2601              MOVS     r6,#1
00001a  409e              LSLS     r6,r6,r3
00001c  b2b3              UXTH     r3,r6
;;;1115   
;;;1116     /* Get the SPI_I2S_IT enable bit status */
;;;1117     enablestatus = (SPIx->CR2 & itmask) ;
00001e  8896              LDRH     r6,[r2,#4]
000020  ea060503          AND      r5,r6,r3
;;;1118   
;;;1119     /* Check the status of the specified SPI interrupt */
;;;1120     if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
000024  8916              LDRH     r6,[r2,#8]
000026  4026              ANDS     r6,r6,r4
000028  b116              CBZ      r6,|L15.48|
00002a  b10d              CBZ      r5,|L15.48|
;;;1121     {
;;;1122       /* SPI_I2S_IT is set */
;;;1123       bitstatus = SET;
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L15.50|
                  |L15.48|
;;;1124     }
;;;1125     else
;;;1126     {
;;;1127       /* SPI_I2S_IT is reset */
;;;1128       bitstatus = RESET;
000030  2000              MOVS     r0,#0
                  |L15.50|
;;;1129     }
;;;1130     /* Return the SPI_I2S_IT status */
;;;1131     return bitstatus;
;;;1132   }
000032  bdf0              POP      {r4-r7,pc}
;;;1133   
                          ENDP


                          AREA ||i.SPI_I2S_ITConfig||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ITConfig PROC
;;;987      */
;;;988    void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
000000  b530              PUSH     {r4,r5,lr}
;;;989    {
;;;990      uint16_t itpos = 0, itmask = 0 ;
000002  2400              MOVS     r4,#0
000004  2300              MOVS     r3,#0
;;;991      
;;;992      /* Check the parameters */
;;;993      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;994      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;995      assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
;;;996    
;;;997      /* Get the SPI IT index */
;;;998      itpos = SPI_I2S_IT >> 4;
000006  110c              ASRS     r4,r1,#4
;;;999    
;;;1000     /* Set the IT mask */
;;;1001     itmask = (uint16_t)1 << (uint16_t)itpos;
000008  2501              MOVS     r5,#1
00000a  40a5              LSLS     r5,r5,r4
00000c  b2ab              UXTH     r3,r5
;;;1002   
;;;1003     if (NewState != DISABLE)
00000e  b11a              CBZ      r2,|L16.24|
;;;1004     {
;;;1005       /* Enable the selected SPI interrupt */
;;;1006       SPIx->CR2 |= itmask;
000010  8885              LDRH     r5,[r0,#4]
000012  431d              ORRS     r5,r5,r3
000014  8085              STRH     r5,[r0,#4]
000016  e002              B        |L16.30|
                  |L16.24|
;;;1007     }
;;;1008     else
;;;1009     {
;;;1010       /* Disable the selected SPI interrupt */
;;;1011       SPIx->CR2 &= (uint16_t)~itmask;
000018  8885              LDRH     r5,[r0,#4]
00001a  439d              BICS     r5,r5,r3
00001c  8085              STRH     r5,[r0,#4]
                  |L16.30|
;;;1012     }
;;;1013   }
00001e  bd30              POP      {r4,r5,pc}
;;;1014   
                          ENDP


                          AREA ||i.SPI_I2S_ReceiveData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_ReceiveData PROC
;;;671      */
;;;672    uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
000000  4601              MOV      r1,r0
;;;673    {
;;;674      /* Check the parameters */
;;;675      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;676      
;;;677      /* Return the data in the DR register */
;;;678      return SPIx->DR;
000002  8988              LDRH     r0,[r1,#0xc]
;;;679    }
000004  4770              BX       lr
;;;680    
                          ENDP


                          AREA ||i.SPI_I2S_SendData||, CODE, READONLY, ALIGN=1

                  SPI_I2S_SendData PROC
;;;687      */
;;;688    void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
000000  8181              STRH     r1,[r0,#0xc]
;;;689    {
;;;690      /* Check the parameters */
;;;691      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;692      
;;;693      /* Write in the DR register the data to be sent */
;;;694      SPIx->DR = Data;
;;;695    }
000002  4770              BX       lr
;;;696    
                          ENDP


                          AREA ||i.SPI_Init||, CODE, READONLY, ALIGN=1

                  SPI_Init PROC
;;;215      */
;;;216    void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
000000  b510              PUSH     {r4,lr}
;;;217    {
;;;218      uint16_t tmpreg = 0;
000002  2200              MOVS     r2,#0
;;;219      
;;;220      /* check the parameters */
;;;221      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;222      
;;;223      /* Check the SPI parameters */
;;;224      assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
;;;225      assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
;;;226      assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
;;;227      assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
;;;228      assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
;;;229      assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
;;;230      assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
;;;231      assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
;;;232      assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
;;;233    
;;;234    /*---------------------------- SPIx CR1 Configuration ------------------------*/
;;;235      /* Get the SPIx CR1 value */
;;;236      tmpreg = SPIx->CR1;
000004  8802              LDRH     r2,[r0,#0]
;;;237      /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
;;;238      tmpreg &= CR1_CLEAR_MASK;
000006  f4025241          AND      r2,r2,#0x3040
;;;239      /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
;;;240         master/salve mode, CPOL and CPHA */
;;;241      /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
;;;242      /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
;;;243      /* Set LSBFirst bit according to SPI_FirstBit value */
;;;244      /* Set BR bits according to SPI_BaudRatePrescaler value */
;;;245      /* Set CPOL bit according to SPI_CPOL value */
;;;246      /* Set CPHA bit according to SPI_CPHA value */
;;;247      tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
00000a  880b              LDRH     r3,[r1,#0]
00000c  884c              LDRH     r4,[r1,#2]
00000e  4323              ORRS     r3,r3,r4
000010  888c              LDRH     r4,[r1,#4]
000012  4323              ORRS     r3,r3,r4
000014  88cc              LDRH     r4,[r1,#6]
000016  4323              ORRS     r3,r3,r4
000018  890c              LDRH     r4,[r1,#8]
00001a  4323              ORRS     r3,r3,r4
00001c  894c              LDRH     r4,[r1,#0xa]
00001e  4323              ORRS     r3,r3,r4
000020  898c              LDRH     r4,[r1,#0xc]
000022  4323              ORRS     r3,r3,r4
000024  89cc              LDRH     r4,[r1,#0xe]
000026  4323              ORRS     r3,r3,r4
000028  431a              ORRS     r2,r2,r3
;;;248                      SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
;;;249                      SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
;;;250                      SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
;;;251      /* Write to SPIx CR1 */
;;;252      SPIx->CR1 = tmpreg;
00002a  8002              STRH     r2,[r0,#0]
;;;253    
;;;254      /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;255      SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
00002c  8b83              LDRH     r3,[r0,#0x1c]
00002e  f24f74ff          MOV      r4,#0xf7ff
000032  4023              ANDS     r3,r3,r4
000034  8383              STRH     r3,[r0,#0x1c]
;;;256    /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;257      /* Write to SPIx CRCPOLY */
;;;258      SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
000036  8a0b              LDRH     r3,[r1,#0x10]
000038  8203              STRH     r3,[r0,#0x10]
;;;259    }
00003a  bd10              POP      {r4,pc}
;;;260    
                          ENDP


                          AREA ||i.SPI_NSSInternalSoftwareConfig||, CODE, READONLY, ALIGN=1

                  SPI_NSSInternalSoftwareConfig PROC
;;;565      */
;;;566    void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
000000  f64f62ff          MOV      r2,#0xfeff
;;;567    {
;;;568      /* Check the parameters */
;;;569      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;570      assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
;;;571      if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
000004  4291              CMP      r1,r2
000006  d004              BEQ      |L20.18|
;;;572      {
;;;573        /* Set NSS pin internally by software */
;;;574        SPIx->CR1 |= SPI_NSSInternalSoft_Set;
000008  8802              LDRH     r2,[r0,#0]
00000a  f4427280          ORR      r2,r2,#0x100
00000e  8002              STRH     r2,[r0,#0]
000010  e004              B        |L20.28|
                  |L20.18|
;;;575      }
;;;576      else
;;;577      {
;;;578        /* Reset NSS pin internally by software */
;;;579        SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
000012  8802              LDRH     r2,[r0,#0]
000014  f64f63ff          MOV      r3,#0xfeff
000018  401a              ANDS     r2,r2,r3
00001a  8002              STRH     r2,[r0,#0]
                  |L20.28|
;;;580      }
;;;581    }
00001c  4770              BX       lr
;;;582    
                          ENDP


                          AREA ||i.SPI_SSOutputCmd||, CODE, READONLY, ALIGN=1

                  SPI_SSOutputCmd PROC
;;;589      */
;;;590    void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L21.12|
;;;591    {
;;;592      /* Check the parameters */
;;;593      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;594      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;595      if (NewState != DISABLE)
;;;596      {
;;;597        /* Enable the selected SPI SS output */
;;;598        SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
000002  8882              LDRH     r2,[r0,#4]
000004  f0420204          ORR      r2,r2,#4
000008  8082              STRH     r2,[r0,#4]
00000a  e004              B        |L21.22|
                  |L21.12|
;;;599      }
;;;600      else
;;;601      {
;;;602        /* Disable the selected SPI SS output */
;;;603        SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
00000c  8882              LDRH     r2,[r0,#4]
00000e  f64f73fb          MOV      r3,#0xfffb
000012  401a              ANDS     r2,r2,r3
000014  8082              STRH     r2,[r0,#4]
                  |L21.22|
;;;604      }
;;;605    }
000016  4770              BX       lr
;;;606    
                          ENDP


                          AREA ||i.SPI_StructInit||, CODE, READONLY, ALIGN=1

                  SPI_StructInit PROC
;;;411      */
;;;412    void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
000000  2100              MOVS     r1,#0
;;;413    {
;;;414    /*--------------- Reset SPI init structure parameters values -----------------*/
;;;415      /* Initialize the SPI_Direction member */
;;;416      SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
000002  8001              STRH     r1,[r0,#0]
;;;417      /* initialize the SPI_Mode member */
;;;418      SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
000004  8041              STRH     r1,[r0,#2]
;;;419      /* initialize the SPI_DataSize member */
;;;420      SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
000006  8081              STRH     r1,[r0,#4]
;;;421      /* Initialize the SPI_CPOL member */
;;;422      SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
000008  80c1              STRH     r1,[r0,#6]
;;;423      /* Initialize the SPI_CPHA member */
;;;424      SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
00000a  8101              STRH     r1,[r0,#8]
;;;425      /* Initialize the SPI_NSS member */
;;;426      SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
00000c  8141              STRH     r1,[r0,#0xa]
;;;427      /* Initialize the SPI_BaudRatePrescaler member */
;;;428      SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
00000e  8181              STRH     r1,[r0,#0xc]
;;;429      /* Initialize the SPI_FirstBit member */
;;;430      SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
000010  81c1              STRH     r1,[r0,#0xe]
;;;431      /* Initialize the SPI_CRCPolynomial member */
;;;432      SPI_InitStruct->SPI_CRCPolynomial = 7;
000012  2107              MOVS     r1,#7
000014  8201              STRH     r1,[r0,#0x10]
;;;433    }
000016  4770              BX       lr
;;;434    
                          ENDP


                          AREA ||i.SPI_TIModeCmd||, CODE, READONLY, ALIGN=1

                  SPI_TIModeCmd PROC
;;;620      */
;;;621    void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
000000  b121              CBZ      r1,|L23.12|
;;;622    {
;;;623      /* Check the parameters */
;;;624      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;625      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;626    
;;;627      if (NewState != DISABLE)
;;;628      {
;;;629        /* Enable the TI mode for the selected SPI peripheral */
;;;630        SPIx->CR2 |= SPI_CR2_FRF;
000002  8882              LDRH     r2,[r0,#4]
000004  f0420210          ORR      r2,r2,#0x10
000008  8082              STRH     r2,[r0,#4]
00000a  e004              B        |L23.22|
                  |L23.12|
;;;631      }
;;;632      else
;;;633      {
;;;634        /* Disable the TI mode for the selected SPI peripheral */
;;;635        SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
00000c  8882              LDRH     r2,[r0,#4]
00000e  f64f73ef          MOV      r3,#0xffef
000012  401a              ANDS     r2,r2,r3
000014  8082              STRH     r2,[r0,#4]
                  |L23.22|
;;;636      }
;;;637    }
000016  4770              BX       lr
;;;638    
                          ENDP


                          AREA ||i.SPI_TransmitCRC||, CODE, READONLY, ALIGN=1

                  SPI_TransmitCRC PROC
;;;798      */
;;;799    void SPI_TransmitCRC(SPI_TypeDef* SPIx)
000000  8801              LDRH     r1,[r0,#0]
;;;800    {
;;;801      /* Check the parameters */
;;;802      assert_param(IS_SPI_ALL_PERIPH(SPIx));
;;;803      
;;;804      /* Enable the selected SPI CRC transmission */
;;;805      SPIx->CR1 |= SPI_CR1_CRCNEXT;
000002  f4415180          ORR      r1,r1,#0x1000
000006  8001              STRH     r1,[r0,#0]
;;;806    }
000008  4770              BX       lr
;;;807    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\STM32F2xx_StdPeriph_Driver\\src\\stm32f2xx_spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f2xx_spi_c_2b928927____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_stm32f2xx_spi_c_2b928927____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f2xx_spi_c_2b928927____REVSH|
#line 402
|__asm___15_stm32f2xx_spi_c_2b928927____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f2xx_spi_c_2b928927____RRX|
#line 587
|__asm___15_stm32f2xx_spi_c_2b928927____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
