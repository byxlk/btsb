; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\bsp.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\bsp.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FatFS\src -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\User -I..\User\bsp -I..\User\emWinTask -I..\STemWin\Config -I..\STemWin\DisplayDriver -I..\STemWin\inc -I..\STemWin\OS -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\bsp.crf ..\User\bsp\bsp.c]
                          THUMB

                          AREA ||i.bsp_Idle||, CODE, READONLY, ALIGN=1

                  bsp_Idle PROC
;;;100    */
;;;101    void bsp_Idle(void)
000000  4770              BX       lr
;;;102    {
;;;103    	/* --- 喂狗 */
;;;104    
;;;105    	/* --- 让CPU进入休眠，由Systick定时中断唤醒或者其他中断唤醒 */
;;;106    
;;;107    	/* 对于 emWin 图形库，可以插入图形库需要的轮询函数 */
;;;108    	//GUI_Exec();
;;;109    
;;;110    	/* 对于 uIP 协议实现，可以插入uip轮询函数 */
;;;111    }
;;;112    
                          ENDP


                          AREA ||i.bsp_Init||, CODE, READONLY, ALIGN=2

                  bsp_Init PROC
;;;28     */
;;;29     void bsp_Init(void)
000000  b510              PUSH     {r4,lr}
;;;30     {
;;;31     	/*
;;;32     	 * 由于ST固件库的启动文件已经执行了CPU系统时钟的初始化，所以不必再次重复配置系统时钟。
;;;33     	 * 启动文件配置了CPU主时钟频率、内部Flash访问速度和可选的外部SRAM FSMC初始化。
;;;34           *
;;;35     	 * 系统时钟缺省配置为72MHz，如果需要更改，可以修改 system_stm32f10x.c 文件
;;;36     	*/
;;;37     
;;;38     	/* 使能CRC校验, 用于开启STemWin的使用 */
;;;39     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_CRC, ENABLE);
000002  2101              MOVS     r1,#1
000004  0308              LSLS     r0,r1,#12
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;40     	
;;;41     	/* 优先级分组设置为4，可配置0-15级抢占式优先级，0级子优先级，即不存在子优先级。*/
;;;42     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
00000a  f44f7040          MOV      r0,#0x300
00000e  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;43     
;;;44     	bsp_InitDWT();       /* 初始DWT */
000012  f7fffffe          BL       bsp_InitDWT
;;;45     	bsp_InitUart(); 	 /* 初始化串口 */
000016  f7fffffe          BL       bsp_InitUart
;;;46     	bsp_InitRTC(); /* 初始化RTC模块，配置默认时间:2016-01-01 08:00:00 */
00001a  f7fffffe          BL       bsp_InitRTC
;;;47     	bsp_InitADC(); /* 初始化ADC模块，ADC1 - CH0 CH1 CH3 CH_Temp */
00001e  f7fffffe          BL       bsp_InitADC
;;;48     	//bsp_InitLed(); 		 /* 初始LED指示灯端口 */
;;;49     	//bsp_InitKey();		 /* 初始化按键 */
;;;50     	
;;;51     	//bsp_InitI2C();       /* 配置I2C总线 */
;;;52     	
;;;53     	//bsp_InitSPIBus();	 /* 配置SPI总线 */
;;;54     	
;;;55     	//bsp_InitExtSRAM();   /* 初始DWT */
;;;56     	LCD_InitHard();	     /* 初始化显示器硬件(配置GPIO和FSMC,给LCD发送初始化指令) */
000022  f7fffffe          BL       LCD_InitHard
;;;57     	//TOUCH_InitHard();    /* 初始化触摸 */
;;;58     	
;;;59     	/* 挂载文件系统 */
;;;60     	result = f_mount(&fs, "0:/", 0);
000026  2200              MOVS     r2,#0
000028  a103              ADR      r1,|L2.56|
00002a  4804              LDR      r0,|L2.60|
00002c  f7fffffe          BL       f_mount
000030  4903              LDR      r1,|L2.64|
000032  7008              STRB     r0,[r1,#0]
;;;61     	
;;;62     }
000034  bd10              POP      {r4,pc}
;;;63     
                          ENDP

000036  0000              DCW      0x0000
                  |L2.56|
000038  303a2f00          DCB      "0:/",0
                  |L2.60|
                          DCD      ||fs||
                  |L2.64|
                          DCD      result

                          AREA ||i.bsp_LedToggle||, CODE, READONLY, ALIGN=1

                  bsp_LedToggle PROC
;;;14     
;;;15     void bsp_LedToggle(uint8_t led_no)
000000  4770              BX       lr
;;;16     {
;;;17     
;;;18     }
;;;19     
                          ENDP


                          AREA ||i.bsp_RunPer10ms||, CODE, READONLY, ALIGN=1

                  bsp_RunPer10ms PROC
;;;72     */
;;;73     void bsp_RunPer10ms(void)
000000  b510              PUSH     {r4,lr}
;;;74     {
;;;75     	bsp_KeyScan();		/* 按键扫描 */
000002  f7fffffe          BL       bsp_KeyScan
;;;76     }
000006  bd10              POP      {r4,pc}
;;;77     
                          ENDP


                          AREA ||i.bsp_RunPer1ms||, CODE, READONLY, ALIGN=1

                  bsp_RunPer1ms PROC
;;;86     */
;;;87     void bsp_RunPer1ms(void)
000000  4770              BX       lr
;;;88     {
;;;89     	//TOUCH_Scan();	/* 触摸扫描 */
;;;90     }
;;;91     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\User\\bsp\\bsp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_c8e2ca81____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_bsp_c_c8e2ca81____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_c8e2ca81____REVSH|
#line 402
|__asm___5_bsp_c_c8e2ca81____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_c8e2ca81____RRX|
#line 587
|__asm___5_bsp_c_c8e2ca81____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
