; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FatFS\src -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\User -I..\User\bsp -I..\User\emWinTask -I..\STemWin\Config -I..\STemWin\DisplayDriver -I..\STemWin\inc -I..\STemWin\OS -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\main.crf ..\User\main.c]
                          THUMB

                          AREA ||i.AppObjCreate||, CODE, READONLY, ALIGN=2

                  AppObjCreate PROC
;;;225    */
;;;226    static void AppObjCreate (void)
000000  b510              PUSH     {r4,lr}
;;;227    {
;;;228    	/* 创建互斥信号量 */
;;;229        xMutex = xSemaphoreCreateMutex();
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       xQueueCreateMutex
000008  4901              LDR      r1,|L1.16|
00000a  6008              STR      r0,[r1,#0]  ; xMutex
;;;230    	
;;;231    	if(xMutex == NULL)
;;;232        {
;;;233            /* 没有创建成功，用户可以在这里加入创建失败的处理机制 */
;;;234        }
;;;235    }
00000c  bd10              POP      {r4,pc}
;;;236    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      xMutex

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;159    */
;;;160    static void AppTaskCreate (void)
000000  b51c              PUSH     {r2-r4,lr}
;;;161    {
;;;162            /* GUI 界面绘制 */
;;;163    	xTaskCreate(  vTaskGUI,             /* 任务函数  */
000002  2000              MOVS     r0,#0
000004  2101              MOVS     r1,#1
000006  4603              MOV      r3,r0
000008  028a              LSLS     r2,r1,#10
00000a  e9cd1000          STRD     r1,r0,[sp,#0]
00000e  a10d              ADR      r1,|L2.68|
000010  480f              LDR      r0,|L2.80|
000012  f7fffffe          BL       xTaskCreate
;;;164                      "vTaskGUI",           /* 任务名    */
;;;165                      1024,                 /* 任务栈大小，单位word，也就是4字节 */
;;;166                      NULL,                 /* 任务参数  */
;;;167                      1,                    /* 任务优先级*/
;;;168                      NULL );               /* 任务句柄  */
;;;169    
;;;170        /* 按键事件处理 */
;;;171        //xTaskCreate( vTaskTaskUserIF,   	/* 任务函数  */
;;;172        //             "vTaskUserIF",     	/* 任务名    */
;;;173        //             512,               	/* 任务栈大小，单位word，也就是4字节 */
;;;174        //             NULL,              	/* 任务参数  */
;;;175        //             2,                 	/* 任务优先级*/
;;;176        //             &xHandleTaskUserIF );  /* 任务句柄  */
;;;177    	
;;;178    	
;;;179    	//xTaskCreate( vTaskLED,    		/* 任务函数  */
;;;180            //         "vTaskLED",  		/* 任务名    */
;;;181            //         512,         		/* stack大小，单位word，也就是4字节 */
;;;182            //         NULL,        		/* 任务参数  */
;;;183            //         3,           		/* 任务优先级*/
;;;184            //         &xHandleTaskLED ); /* 任务句柄  */
;;;185    
;;;186            /* 截图功能 */
;;;187    	//xTaskCreate( vTaskMsgPro,     		/* 任务函数  */
;;;188            //         "vTaskMsgPro",   		/* 任务名    */
;;;189            //         512,             		/* 任务栈大小，单位word，也就是4字节 */
;;;190            //         NULL,           		/* 任务参数  */
;;;191            //         4,               		/* 任务优先级*/
;;;192            //         &xHandleTaskMsgPro );  /* 任务句柄  */
;;;193    	
;;;194    	/* 触摸和按键检测 */
;;;195    	//xTaskCreate( vTaskStart,     		/* 任务函数  */
;;;196            //         "vTaskStart",   		/* 任务名    */
;;;197            //         512,            		/* 任务栈大小，单位word，也就是4字节 */
;;;198            //         NULL,           		/* 任务参数  */
;;;199            //         5,              		/* 任务优先级*/
;;;200            //         &xHandleTaskStart );   /* 任务句柄  */
;;;201    
;;;202        /* ADC 处理函数 */
;;;203    	xTaskCreate( vTaskAdcProc,     		/* 任务函数  */
000016  480f              LDR      r0,|L2.84|
000018  2105              MOVS     r1,#5
00001a  2300              MOVS     r3,#0
00001c  f44f7200          MOV      r2,#0x200
000020  e9cd1000          STRD     r1,r0,[sp,#0]
000024  a10c              ADR      r1,|L2.88|
000026  4810              LDR      r0,|L2.104|
000028  f7fffffe          BL       xTaskCreate
;;;204                     "vTaskAdcProc",   		/* 任务名    */
;;;205                     512,            		/* 任务栈大小，单位word，也就是4字节 */
;;;206                     NULL,           		/* 任务参数  */
;;;207                     5,              		/* 任务优先级*/
;;;208                     &xHandleTaskAdcProc );   /* 任务句柄  */
;;;209        /* vTaskTest */
;;;210        xTaskCreate( vTaskTest,     		/* 任务函数  */
00002c  2000              MOVS     r0,#0
00002e  2105              MOVS     r1,#5
000030  4603              MOV      r3,r0
000032  f44f7200          MOV      r2,#0x200
000036  e9cd1000          STRD     r1,r0,[sp,#0]
00003a  a10c              ADR      r1,|L2.108|
00003c  480e              LDR      r0,|L2.120|
00003e  f7fffffe          BL       xTaskCreate
;;;211                     "vTaskTest",   		/* 任务名    */
;;;212                     512,            		/* 任务栈大小，单位word，也就是4字节 */
;;;213                     NULL,           		/* 任务参数  */
;;;214                     5,              		/* 任务优先级*/
;;;215                     NULL );   /* 任务句柄  */
;;;216    }
000042  bd1c              POP      {r2-r4,pc}
;;;217    
                          ENDP

                  |L2.68|
000044  76546173          DCB      "vTaskGUI",0
000048  6b475549
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
                  |L2.80|
                          DCD      vTaskGUI
                  |L2.84|
                          DCD      xHandleTaskAdcProc
                  |L2.88|
000058  76546173          DCB      "vTaskAdcProc",0
00005c  6b416463
000060  50726f63
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0
                  |L2.104|
                          DCD      vTaskAdcProc
                  |L2.108|
00006c  76546173          DCB      "vTaskTest",0
000070  6b546573
000074  7400    
000076  00                DCB      0
000077  00                DCB      0
                  |L2.120|
                          DCD      vTaskTest

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;244    */
;;;245    int main(void)
000000  2001              MOVS     r0,#1
000002  f3808810          MSR      PRIMASK,r0
000006  bf00              NOP      
;;;246    {
;;;247    	/* 
;;;248    	  在启动调度前，为了防止初始化STM32外设时有中断服务程序执行，这里禁止全局中断(除了NMI和HardFault)。
;;;249    	  这样做的好处是：
;;;250    	  1. 防止执行的中断服务程序中有FreeRTOS的API函数。
;;;251    	  2. 保证系统正常启动，不受别的中断影响。
;;;252    	  3. 关于是否关闭全局中断，大家根据自己的实际情况设置即可。
;;;253    	  在移植文件port.c中的函数prvStartFirstTask中会重新开启全局中断。通过指令cpsie i开启，__set_PRIMASK(1)
;;;254    	  和cpsie i是等效的。
;;;255         */
;;;256    	__set_PRIMASK(1);  
;;;257    	
;;;258    	/* 硬件初始化 */
;;;259    	bsp_Init(); 
000008  f7fffffe          BL       bsp_Init
;;;260    	
;;;261    	/* 1. 初始化一个定时器中断，精度高于滴答定时器中断，这样才可以获得准确的系统信息 仅供调试目的，实际项
;;;262    		  目中不要使用，因为这个功能比较影响系统实时性。
;;;263    	   2. 为了正确获取FreeRTOS的调试信息，可以考虑将上面的关闭中断指令__set_PRIMASK(1); 注释掉。 
;;;264    	*/
;;;265    	//vSetupSysInfoTest();
;;;266    	
;;;267    	/* 创建任务 */
;;;268    	AppTaskCreate();
00000c  f7fffffe          BL       AppTaskCreate
;;;269    
;;;270    	/* 创建任务通信机制 */
;;;271    	AppObjCreate();
000010  f7fffffe          BL       AppObjCreate
;;;272    	
;;;273        /* 启动调度，开始执行任务 */
;;;274        vTaskStartScheduler();
000014  f7fffffe          BL       vTaskStartScheduler
;;;275    
;;;276    	/* 
;;;277    	  如果系统正常启动是不会运行到这里的，运行到这里极有可能是用于定时器任务或者空闲任务的
;;;278    	  heap空间不足造成创建失败，此要加大FreeRTOSConfig.h文件中定义的heap大小：
;;;279    	  #define configTOTAL_HEAP_SIZE	      ( ( size_t ) ( 17 * 1024 ) )
;;;280    	*/
;;;281    	while(1);
000018  bf00              NOP      
                  |L3.26|
00001a  e7fe              B        |L3.26|
;;;282    }
;;;283    
                          ENDP


                          AREA ||i.vTaskAdcProc||, CODE, READONLY, ALIGN=1

                  vTaskAdcProc PROC
;;;111    */
;;;112    static void vTaskAdcProc(void *pvParameters)
000000  e003              B        |L4.10|
                  |L4.2|
;;;113    {
;;;114    
;;;115        //float uwVBATVoltage;    /* 板载电子电压 */
;;;116        //float ufVoltage_PA0;    /* PA0引脚电压  */
;;;117        //float ufVoltage_PC0;    /* PC0引脚电压  */
;;;118    
;;;119        while(1)
;;;120        {
;;;121            vTaskDelay(1000);
000002  f44f707a          MOV      r0,#0x3e8
000006  f7fffffe          BL       vTaskDelay
                  |L4.10|
00000a  e7fa              B        |L4.2|
;;;122            //uwVBATVoltage = ADC_ConvertedValue[1] * 3.3 / 4095;
;;;123            //ufVoltage_PA0 = ADC_ConvertedValue[2] * 3.3 / 4095;
;;;124            //ufVoltage_PC0 = ADC_ConvertedValue[3] * 3.3 / 4095;
;;;125           // GetTemp(ADC_ConvertedValue[0]);
;;;126        }
;;;127    }
;;;128    
                          ENDP


                          AREA ||i.vTaskGUI||, CODE, READONLY, ALIGN=1

                  vTaskGUI PROC
;;;93     */
;;;94     static void vTaskGUI(void *pvParameters)
000000  e003              B        |L5.10|
                  |L5.2|
;;;95     {
;;;96     	while (1) 
;;;97     	{
;;;98     		//MainTask();
;;;99     		vTaskDelay(1000);
000002  f44f707a          MOV      r0,#0x3e8
000006  f7fffffe          BL       vTaskDelay
                  |L5.10|
00000a  e7fa              B        |L5.2|
;;;100    	}
;;;101    }
;;;102    
                          ENDP


                          AREA ||i.vTaskTest||, CODE, READONLY, ALIGN=1

                  vTaskTest PROC
;;;137    */
;;;138    static void vTaskTest(void *pvParameters)
000000  e004              B        |L6.12|
                  |L6.2|
;;;139    {
;;;140        while(1)
;;;141        {
;;;142            vTaskDelay(100);
000002  2064              MOVS     r0,#0x64
000004  f7fffffe          BL       vTaskDelay
;;;143      #ifdef LCD_DRIVER_TEST
;;;144            LCD_Fill_Rect(0, 0, 320, 240, CL_BLUE);
;;;145            vTaskDelay(1000);
;;;146            LCD_Fill_Rect(0, 0, 320, 240, CL_YELLOW);
;;;147       #endif
;;;148            GuiTaskTest();
000008  f7fffffe          BL       GuiTaskTest
                  |L6.12|
00000c  e7f9              B        |L6.2|
;;;149            //bsp_RTC_Test();
;;;150        }  
;;;151    }
;;;152    /*
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  gSleep_Data
                          %        14

                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTaskAdcProc
                          DCD      0x00000000
                  xMutex
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_main____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 402
|__asm___6_main_c_main____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____RRX|
#line 587
|__asm___6_main_c_main____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
