; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\bsp_uart_fifo.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\bsp_uart_fifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\User\bsp -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\FatFS\src -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\bsp_uart_fifo.crf ..\User\bsp\bsp_uart_fifo.c]
                          THUMB

                          AREA ||i.ComToUart||, CODE, READONLY, ALIGN=2

                  ComToUart PROC
;;;93     */
;;;94     UART_T *ComToUart(COM_PORT_E _ucPort)
000000  4601              MOV      r1,r0
;;;95     {
;;;96     	if (_ucPort == COM1)
000002  b909              CBNZ     r1,|L1.8|
;;;97     	{
;;;98     		#if UART1_FIFO_EN == 1
;;;99     			return &g_tUart1;
000004  4809              LDR      r0,|L1.44|
                  |L1.6|
;;;100    		#else
;;;101    			return 0;
;;;102    		#endif
;;;103    	}
;;;104    	else if (_ucPort == COM2)
;;;105    	{
;;;106    		#if UART2_FIFO_EN == 1
;;;107    			return &g_tUart2;
;;;108    		#else
;;;109    			return 0;
;;;110    		#endif
;;;111    	}
;;;112    	else if (_ucPort == COM3)
;;;113    	{
;;;114    		#if UART3_FIFO_EN == 1
;;;115    			return &g_tUart3;
;;;116    		#else
;;;117    			return 0;
;;;118    		#endif
;;;119    	}
;;;120    	else if (_ucPort == COM4)
;;;121    	{
;;;122    		#if UART4_FIFO_EN == 1
;;;123    			return &g_tUart4;
;;;124    		#else
;;;125    			return 0;
;;;126    		#endif
;;;127    	}
;;;128    	else if (_ucPort == COM5)
;;;129    	{
;;;130    		#if UART5_FIFO_EN == 1
;;;131    			return &g_tUart5;
;;;132    		#else
;;;133    			return 0;
;;;134    		#endif
;;;135    	}
;;;136    	else
;;;137    	{
;;;138    		/* 不做任何处理 */
;;;139    		return 0;
;;;140    	}
;;;141    }
000006  4770              BX       lr
                  |L1.8|
000008  2901              CMP      r1,#1                 ;104
00000a  d101              BNE      |L1.16|
00000c  2000              MOVS     r0,#0                 ;109
00000e  e7fa              B        |L1.6|
                  |L1.16|
000010  2902              CMP      r1,#2                 ;112
000012  d101              BNE      |L1.24|
000014  2000              MOVS     r0,#0                 ;117
000016  e7f6              B        |L1.6|
                  |L1.24|
000018  2903              CMP      r1,#3                 ;120
00001a  d101              BNE      |L1.32|
00001c  2000              MOVS     r0,#0                 ;125
00001e  e7f2              B        |L1.6|
                  |L1.32|
000020  2904              CMP      r1,#4                 ;128
000022  d101              BNE      |L1.40|
000024  2000              MOVS     r0,#0                 ;133
000026  e7ee              B        |L1.6|
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;139
00002a  e7ec              B        |L1.6|
;;;142    
                          ENDP

                  |L1.44|
                          DCD      g_tUart1

                          AREA ||i.ConfigUartNVIC||, CODE, READONLY, ALIGN=1

                  ConfigUartNVIC PROC
;;;781    */
;;;782    static void ConfigUartNVIC(void)
000000  b508              PUSH     {r3,lr}
;;;783    {
;;;784    	NVIC_InitTypeDef NVIC_InitStructure;
;;;785    
;;;786    	/* Configure the NVIC Preemption Priority Bits */
;;;787    	/*	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);  --- 在 bsp.c 中 bsp_Init() 中配置中断优先级组 */
;;;788    
;;;789    #if UART1_FIFO_EN == 1
;;;790    	/* 使能串口1中断 */
;;;791    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
000002  2025              MOVS     r0,#0x25
000004  f88d0000          STRB     r0,[sp,#0]
;;;792    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000008  2001              MOVS     r0,#1
00000a  f88d0001          STRB     r0,[sp,#1]
;;;793    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00000e  2000              MOVS     r0,#0
000010  f88d0002          STRB     r0,[sp,#2]
;;;794    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000014  2001              MOVS     r0,#1
000016  f88d0003          STRB     r0,[sp,#3]
;;;795    	NVIC_Init(&NVIC_InitStructure);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       NVIC_Init
;;;796    #endif
;;;797    
;;;798    #if UART2_FIFO_EN == 1
;;;799    	/* 使能串口2中断 */
;;;800    	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
;;;801    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;802    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;803    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;804    	NVIC_Init(&NVIC_InitStructure);
;;;805    #endif
;;;806    
;;;807    #if UART3_FIFO_EN == 1
;;;808    	/* 使能串口3中断t */
;;;809    	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
;;;810    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;811    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;812    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;813    	NVIC_Init(&NVIC_InitStructure);
;;;814    #endif
;;;815    
;;;816    #if UART4_FIFO_EN == 1
;;;817    	/* 使能串口4中断t */
;;;818    	NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
;;;819    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;820    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;821    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;822    	NVIC_Init(&NVIC_InitStructure);
;;;823    #endif
;;;824    
;;;825    #if UART5_FIFO_EN == 1
;;;826    	/* 使能串口5中断t */
;;;827    	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
;;;828    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;829    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;830    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;831    	NVIC_Init(&NVIC_InitStructure);
;;;832    #endif
;;;833    
;;;834    #if UART6_FIFO_EN == 1
;;;835    	/* 使能串口6中断t */
;;;836    	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
;;;837    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;838    	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;839    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;840    	NVIC_Init(&NVIC_InitStructure);
;;;841    #endif
;;;842    }
000020  bd08              POP      {r3,pc}
;;;843    
                          ENDP


                          AREA ||i.InitHardUart||, CODE, READONLY, ALIGN=2

                  InitHardUart PROC
;;;535    */
;;;536    static void InitHardUart(void)
000000  b500              PUSH     {lr}
;;;537    {
000002  b087              SUB      sp,sp,#0x1c
;;;538    	GPIO_InitTypeDef GPIO_InitStructure;
;;;539    	USART_InitTypeDef USART_InitStructure;
;;;540    
;;;541    #if UART1_FIFO_EN == 1		/* 串口1 TX = PA9   RX = PA10 或 TX = PB6   RX = PB7*/
;;;542    
;;;543    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;544    	RCC_APB2PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
000004  2101              MOVS     r1,#1
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;545    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2010              MOVS     r0,#0x10
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;546    
;;;547    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;548    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
000014  f44f7000          MOV      r0,#0x200
000018  9005              STR      r0,[sp,#0x14]
;;;549    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
00001a  2001              MOVS     r0,#1
00001c  f88d0018          STRB     r0,[sp,#0x18]
;;;550            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000020  2000              MOVS     r0,#0
000022  f88d001a          STRB     r0,[sp,#0x1a]
;;;551    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000026  2002              MOVS     r0,#2
000028  f88d0019          STRB     r0,[sp,#0x19]
;;;552    	GPIO_Init(GPIOA, &GPIO_InitStructure);
00002c  a905              ADD      r1,sp,#0x14
00002e  4818              LDR      r0,|L3.144|
000030  f7fffffe          BL       GPIO_Init
;;;553    
;;;554    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;555    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;556    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;557    	*/
;;;558    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000034  f44f6080          MOV      r0,#0x400
000038  9005              STR      r0,[sp,#0x14]
;;;559    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00003a  2000              MOVS     r0,#0
00003c  f88d0018          STRB     r0,[sp,#0x18]
;;;560    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000040  a905              ADD      r1,sp,#0x14
000042  4813              LDR      r0,|L3.144|
000044  f7fffffe          BL       GPIO_Init
;;;561    	
;;;562    	/* 第4步： 配置串口硬件参数 */
;;;563    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
000048  f44f30e1          MOV      r0,#0x1c200
00004c  9001              STR      r0,[sp,#4]
;;;564    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
00004e  2000              MOVS     r0,#0
000050  f8ad0008          STRH     r0,[sp,#8]
;;;565    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000054  f8ad000a          STRH     r0,[sp,#0xa]
;;;566    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000058  f8ad000c          STRH     r0,[sp,#0xc]
;;;567    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
00005c  f8ad0010          STRH     r0,[sp,#0x10]
;;;568    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000060  200c              MOVS     r0,#0xc
000062  f8ad000e          STRH     r0,[sp,#0xe]
;;;569    	USART_Init(USART1, &USART_InitStructure);
000066  a901              ADD      r1,sp,#4
000068  480a              LDR      r0,|L3.148|
00006a  f7fffffe          BL       USART_Init
;;;570    
;;;571    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
00006e  2201              MOVS     r2,#1
000070  f2405125          MOV      r1,#0x525
000074  4807              LDR      r0,|L3.148|
000076  f7fffffe          BL       USART_ITConfig
;;;572    	/*
;;;573    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;574    		注意: 不要在此处打开发送中断
;;;575    		发送中断使能在SendUart()函数打开
;;;576    	*/
;;;577    	USART_Cmd(USART1, ENABLE);		/* 使能串口 */
00007a  2101              MOVS     r1,#1
00007c  4805              LDR      r0,|L3.148|
00007e  f7fffffe          BL       USART_Cmd
;;;578    
;;;579    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;580    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;581    	USART_ClearFlag(USART1, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000082  2140              MOVS     r1,#0x40
000084  4803              LDR      r0,|L3.148|
000086  f7fffffe          BL       USART_ClearFlag
;;;582    #endif
;;;583    
;;;584    #if UART2_FIFO_EN == 1		/* 串口2 TX = PA2， RX = PA3  */
;;;585    	/* 第1步：打开GPIO和USART部件的时钟 */
;;;586    	RCC_APB2PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
;;;587    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
;;;588    
;;;589    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;590    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;591    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;592            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;593    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;594    	GPIO_Init(GPIOA, &GPIO_InitStructure);
;;;595    
;;;596    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;597    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;598    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;599    	*/
;;;600    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
;;;601    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
;;;602    	GPIO_Init(GPIOA, &GPIO_InitStructure);
;;;603    	/*  第3步已经做了，因此这步可以不做
;;;604    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;605    	*/
;;;606    	GPIO_Init(GPIOA, &GPIO_InitStructure);
;;;607    
;;;608    	/* 第4步： 配置串口硬件参数 */
;;;609    	USART_InitStructure.USART_BaudRate = UART2_BAUD;	/* 波特率 */
;;;610    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;611    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;612    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;613    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;614    	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;		/* 仅选择接收模式 */
;;;615    	USART_Init(USART2, &USART_InitStructure);
;;;616    
;;;617    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;618    	/*
;;;619    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;620    		注意: 不要在此处打开发送中断
;;;621    		发送中断使能在SendUart()函数打开
;;;622    	*/
;;;623    	USART_Cmd(USART2, ENABLE);		/* 使能串口 */
;;;624    
;;;625    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;626    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;627    	USART_ClearFlag(USART2, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;628    #endif
;;;629    
;;;630    #if UART3_FIFO_EN == 1			/* 串口3 TX = PB10   RX = PB11 */
;;;631    
;;;632    	/* 配置 PB2为推挽输出，用于切换 RS485芯片的收发状态 */
;;;633    	{
;;;634    		RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);
;;;635    
;;;636    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;637                    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;638    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;639    		GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
;;;640    		GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
;;;641    	}
;;;642    
;;;643    	/* 第1步： 开启GPIO和UART时钟 */
;;;644    	RCC_APB2PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
;;;645    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
;;;646    
;;;647    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;648    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
;;;649    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;650            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;651    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;652    	GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;653    
;;;654    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;655    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;656    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;657    	*/
;;;658    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
;;;659    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
;;;660    	GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;661    	/*  第3步已经做了，因此这步可以不做
;;;662    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;663    	*/
;;;664    	GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;665    
;;;666    	/* 第4步： 配置串口硬件参数 */
;;;667    	USART_InitStructure.USART_BaudRate = UART3_BAUD;	/* 波特率 */
;;;668    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;669    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;670    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;671    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;672    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;673    	USART_Init(USART3, &USART_InitStructure);
;;;674    
;;;675    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;676    	/*
;;;677    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;678    		注意: 不要在此处打开发送中断
;;;679    		发送中断使能在SendUart()函数打开
;;;680    	*/
;;;681    	USART_Cmd(USART3, ENABLE);		/* 使能串口 */
;;;682    
;;;683    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;684    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;685    	USART_ClearFlag(USART3, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;686    #endif
;;;687    
;;;688    #if UART4_FIFO_EN == 1			/* 串口4 TX = PC10   RX = PC11 */
;;;689    	/* 第1步： 开启GPIO和UART时钟 */
;;;690    	RCC_APB2PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
;;;691    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
;;;692    
;;;693    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;694    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
;;;695    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;696            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;697    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;698    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;699    
;;;700    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;701    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;702    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;703    	*/
;;;704    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
;;;705    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
;;;706    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;707    
;;;708    	/* 第4步： 配置串口硬件参数 */
;;;709    	USART_InitStructure.USART_BaudRate = UART4_BAUD;	/* 波特率 */
;;;710    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;711    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;712    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;713    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;714    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;715    	USART_Init(UART4, &USART_InitStructure);
;;;716    
;;;717    	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;718    	/*
;;;719    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;720    		注意: 不要在此处打开发送中断
;;;721    		发送中断使能在SendUart()函数打开
;;;722    	*/
;;;723    	USART_Cmd(UART4, ENABLE);		/* 使能串口 */
;;;724    
;;;725    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;726    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;727    	USART_ClearFlag(UART4, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;728    #endif
;;;729    
;;;730    #if UART5_FIFO_EN == 1			/* 串口5 TX = PC12   RX = PD2 */
;;;731    	/* 第1步： 开启GPIO和UART时钟 */
;;;732    	RCC_APB2PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD, ENABLE);
;;;733    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
;;;734    
;;;735    	/* 第2步：将USART Tx的GPIO配置为推挽复用模式 */
;;;736    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
;;;737    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;738            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;739    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;740    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;741    
;;;742    	/* 第3步：将USART Rx的GPIO配置为浮空输入模式
;;;743    		由于CPU复位后，GPIO缺省都是浮空输入模式，因此下面这个步骤不是必须的
;;;744    		但是，我还是建议加上便于阅读，并且防止其它地方修改了这个口线的设置参数
;;;745    	*/
;;;746    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;747    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
;;;748    	GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;749    
;;;750    
;;;751    	/* 第4步： 配置串口硬件参数 */
;;;752    	USART_InitStructure.USART_BaudRate = UART5_BAUD;	/* 波特率 */
;;;753    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;754    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;755    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;756    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;757    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;758    	USART_Init(UART5, &USART_InitStructure);
;;;759    
;;;760    	USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;761    	/*
;;;762    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;763    		注意: 不要在此处打开发送中断
;;;764    		发送中断使能在SendUart()函数打开
;;;765    	*/
;;;766    	USART_Cmd(UART5, ENABLE);		/* 使能串口 */
;;;767    
;;;768    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;769    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;770    	USART_ClearFlag(UART5, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;771    #endif
;;;772    }
00008a  b007              ADD      sp,sp,#0x1c
00008c  bd00              POP      {pc}
;;;773    
                          ENDP

00008e  0000              DCW      0x0000
                  |L3.144|
                          DCD      0x40020000
                  |L3.148|
                          DCD      0x40011000

                          AREA ||i.RS485_InitTXE||, CODE, READONLY, ALIGN=2

                  RS485_InitTXE PROC
;;;307    */
;;;308    void RS485_InitTXE(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;309    {
;;;310    	GPIO_InitTypeDef GPIO_InitStructure;
;;;311    
;;;312    	RCC_APB2PeriphClockCmd(RCC_RS485_TXEN, ENABLE);	/* 打开GPIO时钟 */
000002  2101              MOVS     r1,#1
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;313    
;;;314    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2002              MOVS     r0,#2
00000c  f88d0005          STRB     r0,[sp,#5]
;;;315    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;	
000010  2001              MOVS     r0,#1
000012  f88d0004          STRB     r0,[sp,#4]
;;;316    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;/* 推挽输出模式 */
000016  2000              MOVS     r0,#0
000018  f88d0006          STRB     r0,[sp,#6]
;;;317    	GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
00001c  2004              MOVS     r0,#4
00001e  9000              STR      r0,[sp,#0]
;;;318    	GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
000020  4669              MOV      r1,sp
000022  4802              LDR      r0,|L4.44|
000024  f7fffffe          BL       GPIO_Init
;;;319    }
000028  bd1c              POP      {r2-r4,pc}
;;;320    
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      0x40020400

                          AREA ||i.RS485_ReciveNew||, CODE, READONLY, ALIGN=1

                  RS485_ReciveNew PROC
;;;408    //extern void MODBUS_ReciveNew(uint8_t _byte);
;;;409    void RS485_ReciveNew(uint8_t _byte)
000000  4770              BX       lr
;;;410    {
;;;411    //	MODBUS_ReciveNew(_byte);
;;;412    }
;;;413    
                          ENDP


                          AREA ||i.RS485_SendBefor||, CODE, READONLY, ALIGN=2

                  RS485_SendBefor PROC
;;;351    */
;;;352    void RS485_SendBefor(void)
000000  2004              MOVS     r0,#4
;;;353    {
;;;354    	RS485_TX_EN();	/* 切换RS485收发芯片为发送模式 */
000002  4901              LDR      r1,|L6.8|
000004  8008              STRH     r0,[r1,#0]
;;;355    }
000006  4770              BX       lr
;;;356    
                          ENDP

                  |L6.8|
                          DCD      0x4002041a

                          AREA ||i.RS485_SendBuf||, CODE, READONLY, ALIGN=1

                  RS485_SendBuf PROC
;;;379    */
;;;380    void RS485_SendBuf(uint8_t *_ucaBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;381    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;382    	comSendBuf(COM3, _ucaBuf, _usLen);
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       comSendBuf
;;;383    }
000010  bd70              POP      {r4-r6,pc}
;;;384    
                          ENDP


                          AREA ||i.RS485_SendOver||, CODE, READONLY, ALIGN=2

                  RS485_SendOver PROC
;;;365    */
;;;366    void RS485_SendOver(void)
000000  2004              MOVS     r0,#4
;;;367    {
;;;368    	RS485_RX_EN();	/* 切换RS485收发芯片为接收模式 */
000002  4901              LDR      r1,|L8.8|
000004  8008              STRH     r0,[r1,#0]
;;;369    }
000006  4770              BX       lr
;;;370    
                          ENDP

                  |L8.8|
                          DCD      0x40020418

                          AREA ||i.RS485_SendStr||, CODE, READONLY, ALIGN=1

                  RS485_SendStr PROC
;;;394    */
;;;395    void RS485_SendStr(char *_pBuf)
000000  b570              PUSH     {r4-r6,lr}
;;;396    {
000002  4604              MOV      r4,r0
;;;397    	RS485_SendBuf((uint8_t *)_pBuf, strlen(_pBuf));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       strlen
00000a  b285              UXTH     r5,r0
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       RS485_SendBuf
;;;398    }
000014  bd70              POP      {r4-r6,pc}
;;;399    
                          ENDP


                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;1055   #if UART1_FIFO_EN == 1
;;;1056   void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1057   {
;;;1058   	UartIRQ(&g_tUart1);
000002  4802              LDR      r0,|L10.12|
000004  f7fffffe          BL       UartIRQ
;;;1059   }
000008  bd10              POP      {r4,pc}
;;;1060   #endif
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      g_tUart1

                          AREA ||i.UartGetChar||, CODE, READONLY, ALIGN=1

                  UartGetChar PROC
;;;923    */
;;;924    static uint8_t UartGetChar(UART_T *_pUart, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;925    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;926    	uint16_t usCount;
;;;927    
;;;928    	/* usRxWrite 变量在中断函数中被改写，主程序读取该变量时，必须进行临界区保护 */
;;;929    	DISABLE_INT();
000006  f7fffffe          BL       vPortEnterCritical
;;;930    	usCount = _pUart->usRxCount;
00000a  8b66              LDRH     r6,[r4,#0x1a]
;;;931    	ENABLE_INT();
00000c  f7fffffe          BL       vPortExitCritical
;;;932    
;;;933    	/* 如果读和写索引相同，则返回0 */
;;;934    	//if (_pUart->usRxRead == usRxWrite)
;;;935    	if (usCount == 0)	/* 已经没有数据 */
000010  b90e              CBNZ     r6,|L11.22|
;;;936    	{
;;;937    		return 0;
000012  2000              MOVS     r0,#0
                  |L11.20|
;;;938    	}
;;;939    	else
;;;940    	{
;;;941    		*_pByte = _pUart->pRxBuf[_pUart->usRxRead];		/* 从串口接收FIFO取1个数据 */
;;;942    
;;;943    		/* 改写FIFO读索引 */
;;;944    		DISABLE_INT();
;;;945    		if (++_pUart->usRxRead >= _pUart->usRxBufSize)
;;;946    		{
;;;947    			_pUart->usRxRead = 0;
;;;948    		}
;;;949    		_pUart->usRxCount--;
;;;950    		ENABLE_INT();
;;;951    		return 1;
;;;952    	}
;;;953    }
000014  bd70              POP      {r4-r6,pc}
                  |L11.22|
000016  8b21              LDRH     r1,[r4,#0x18]         ;941
000018  68a0              LDR      r0,[r4,#8]            ;941
00001a  5c40              LDRB     r0,[r0,r1]            ;941
00001c  7028              STRB     r0,[r5,#0]            ;941
00001e  f7fffffe          BL       vPortEnterCritical
000022  8b20              LDRH     r0,[r4,#0x18]         ;945
000024  1c40              ADDS     r0,r0,#1              ;945
000026  b280              UXTH     r0,r0                 ;945
000028  8320              STRH     r0,[r4,#0x18]         ;945
00002a  89e1              LDRH     r1,[r4,#0xe]          ;945
00002c  4288              CMP      r0,r1                 ;945
00002e  db01              BLT      |L11.52|
000030  2000              MOVS     r0,#0                 ;947
000032  8320              STRH     r0,[r4,#0x18]         ;947
                  |L11.52|
000034  8b60              LDRH     r0,[r4,#0x1a]         ;949
000036  1e40              SUBS     r0,r0,#1              ;949
000038  8360              STRH     r0,[r4,#0x1a]         ;949
00003a  f7fffffe          BL       vPortExitCritical
00003e  2001              MOVS     r0,#1                 ;951
000040  e7e8              B        |L11.20|
;;;954    
                          ENDP


                          AREA ||i.UartIRQ||, CODE, READONLY, ALIGN=1

                  UartIRQ PROC
;;;962    */
;;;963    static void UartIRQ(UART_T *_pUart)
000000  b570              PUSH     {r4-r6,lr}
;;;964    {
000002  4604              MOV      r4,r0
;;;965    	/* 处理接收中断  */
;;;966    	if (USART_GetITStatus(_pUart->uart, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b1e0              CBZ      r0,|L12.74|
;;;967    	{
;;;968    		/* 从串口接收数据寄存器读取数据存放到接收FIFO */
;;;969    		uint8_t ch;
;;;970    
;;;971    		ch = USART_ReceiveData(_pUart->uart);
000010  6820              LDR      r0,[r4,#0]
000012  f7fffffe          BL       USART_ReceiveData
000016  b2c5              UXTB     r5,r0
;;;972    		_pUart->pRxBuf[_pUart->usRxWrite] = ch;
000018  8ae1              LDRH     r1,[r4,#0x16]
00001a  68a0              LDR      r0,[r4,#8]
00001c  5445              STRB     r5,[r0,r1]
;;;973    		if (++_pUart->usRxWrite >= _pUart->usRxBufSize)
00001e  8ae0              LDRH     r0,[r4,#0x16]
000020  1c40              ADDS     r0,r0,#1
000022  b280              UXTH     r0,r0
000024  82e0              STRH     r0,[r4,#0x16]
000026  89e1              LDRH     r1,[r4,#0xe]
000028  4288              CMP      r0,r1
00002a  db01              BLT      |L12.48|
;;;974    		{
;;;975    			_pUart->usRxWrite = 0;
00002c  2000              MOVS     r0,#0
00002e  82e0              STRH     r0,[r4,#0x16]
                  |L12.48|
;;;976    		}
;;;977    		if (_pUart->usRxCount < _pUart->usRxBufSize)
000030  8b60              LDRH     r0,[r4,#0x1a]
000032  89e1              LDRH     r1,[r4,#0xe]
000034  4288              CMP      r0,r1
000036  da02              BGE      |L12.62|
;;;978    		{
;;;979    			_pUart->usRxCount++;
000038  8b60              LDRH     r0,[r4,#0x1a]
00003a  1c40              ADDS     r0,r0,#1
00003c  8360              STRH     r0,[r4,#0x1a]
                  |L12.62|
;;;980    		}
;;;981    
;;;982    		/* 回调函数,通知应用程序收到新数据,一般是发送1个消息或者设置一个标记 */
;;;983    		//if (_pUart->usRxWrite == _pUart->usRxRead)
;;;984    		//if (_pUart->usRxCount == 1)
;;;985    		{
;;;986    			if (_pUart->ReciveNew)
00003e  6a60              LDR      r0,[r4,#0x24]
000040  b110              CBZ      r0,|L12.72|
;;;987    			{
;;;988    				_pUart->ReciveNew(ch);
000042  4628              MOV      r0,r5
000044  6a61              LDR      r1,[r4,#0x24]
000046  4788              BLX      r1
                  |L12.72|
;;;989    			}
;;;990    		}
;;;991    	}
000048  bf00              NOP      
                  |L12.74|
;;;992    
;;;993    	/* 处理发送缓冲区空中断 */
;;;994    	if (USART_GetITStatus(_pUart->uart, USART_IT_TXE) != RESET)
00004a  f2407127          MOV      r1,#0x727
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       USART_GetITStatus
000054  b308              CBZ      r0,|L12.154|
;;;995    	{
;;;996    		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;997    		if (_pUart->usTxCount == 0)
000056  8aa0              LDRH     r0,[r4,#0x14]
000058  b960              CBNZ     r0,|L12.116|
;;;998    		{
;;;999    			/* 发送缓冲区的数据已取完时， 禁止发送缓冲区空中断 （注意：此时最后1个数据还未真正发送完毕）*/
;;;1000   			USART_ITConfig(_pUart->uart, USART_IT_TXE, DISABLE);
00005a  2200              MOVS     r2,#0
00005c  f2407127          MOV      r1,#0x727
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       USART_ITConfig
;;;1001   
;;;1002   			/* 使能数据发送完毕中断 */
;;;1003   			USART_ITConfig(_pUart->uart, USART_IT_TC, ENABLE);
000066  2201              MOVS     r2,#1
000068  f2406126          MOV      r1,#0x626
00006c  6820              LDR      r0,[r4,#0]
00006e  f7fffffe          BL       USART_ITConfig
000072  e037              B        |L12.228|
                  |L12.116|
;;;1004   		}
;;;1005   		else
;;;1006   		{
;;;1007   			/* 从发送FIFO取1个字节写入串口发送数据寄存器 */
;;;1008   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
000074  8a63              LDRH     r3,[r4,#0x12]
000076  6862              LDR      r2,[r4,#4]
000078  5cd1              LDRB     r1,[r2,r3]
00007a  6820              LDR      r0,[r4,#0]
00007c  f7fffffe          BL       USART_SendData
;;;1009   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
000080  8a60              LDRH     r0,[r4,#0x12]
000082  1c40              ADDS     r0,r0,#1
000084  b280              UXTH     r0,r0
000086  8260              STRH     r0,[r4,#0x12]
000088  89a1              LDRH     r1,[r4,#0xc]
00008a  4288              CMP      r0,r1
00008c  db01              BLT      |L12.146|
;;;1010   			{
;;;1011   				_pUart->usTxRead = 0;
00008e  2000              MOVS     r0,#0
000090  8260              STRH     r0,[r4,#0x12]
                  |L12.146|
;;;1012   			}
;;;1013   			_pUart->usTxCount--;
000092  8aa0              LDRH     r0,[r4,#0x14]
000094  1e40              SUBS     r0,r0,#1
000096  82a0              STRH     r0,[r4,#0x14]
000098  e024              B        |L12.228|
                  |L12.154|
;;;1014   		}
;;;1015   
;;;1016   	}
;;;1017   	/* 数据bit位全部发送完毕的中断 */
;;;1018   	else if (USART_GetITStatus(_pUart->uart, USART_IT_TC) != RESET)
00009a  f2406126          MOV      r1,#0x626
00009e  6820              LDR      r0,[r4,#0]
0000a0  f7fffffe          BL       USART_GetITStatus
0000a4  b1f0              CBZ      r0,|L12.228|
;;;1019   	{
;;;1020   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1021   		if (_pUart->usTxCount == 0)
0000a6  8aa0              LDRH     r0,[r4,#0x14]
0000a8  b950              CBNZ     r0,|L12.192|
;;;1022   		{
;;;1023   			/* 如果发送FIFO的数据全部发送完毕，禁止数据发送完毕中断 */
;;;1024   			USART_ITConfig(_pUart->uart, USART_IT_TC, DISABLE);
0000aa  2200              MOVS     r2,#0
0000ac  f2406126          MOV      r1,#0x626
0000b0  6820              LDR      r0,[r4,#0]
0000b2  f7fffffe          BL       USART_ITConfig
;;;1025   
;;;1026   			/* 回调函数, 一般用来处理RS485通信，将RS485芯片设置为接收模式，避免抢占总线 */
;;;1027   			if (_pUart->SendOver)
0000b6  6a20              LDR      r0,[r4,#0x20]
0000b8  b1a0              CBZ      r0,|L12.228|
;;;1028   			{
;;;1029   				_pUart->SendOver();
0000ba  6a20              LDR      r0,[r4,#0x20]
0000bc  4780              BLX      r0
0000be  e011              B        |L12.228|
                  |L12.192|
;;;1030   			}
;;;1031   		}
;;;1032   		else
;;;1033   		{
;;;1034   			/* 正常情况下，不会进入此分支 */
;;;1035   
;;;1036   			/* 如果发送FIFO的数据还未完毕，则从发送FIFO取1个数据写入发送数据寄存器 */
;;;1037   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
0000c0  8a63              LDRH     r3,[r4,#0x12]
0000c2  6862              LDR      r2,[r4,#4]
0000c4  5cd1              LDRB     r1,[r2,r3]
0000c6  6820              LDR      r0,[r4,#0]
0000c8  f7fffffe          BL       USART_SendData
;;;1038   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
0000cc  8a60              LDRH     r0,[r4,#0x12]
0000ce  1c40              ADDS     r0,r0,#1
0000d0  b280              UXTH     r0,r0
0000d2  8260              STRH     r0,[r4,#0x12]
0000d4  89a1              LDRH     r1,[r4,#0xc]
0000d6  4288              CMP      r0,r1
0000d8  db01              BLT      |L12.222|
;;;1039   			{
;;;1040   				_pUart->usTxRead = 0;
0000da  2000              MOVS     r0,#0
0000dc  8260              STRH     r0,[r4,#0x12]
                  |L12.222|
;;;1041   			}
;;;1042   			_pUart->usTxCount--;
0000de  8aa0              LDRH     r0,[r4,#0x14]
0000e0  1e40              SUBS     r0,r0,#1
0000e2  82a0              STRH     r0,[r4,#0x14]
                  |L12.228|
;;;1043   		}
;;;1044   	}
;;;1045   }
0000e4  bd70              POP      {r4-r6,pc}
;;;1046   
                          ENDP


                          AREA ||i.UartSend||, CODE, READONLY, ALIGN=1

                  UartSend PROC
;;;851    */
;;;852    static void UartSend(UART_T *_pUart, uint8_t *_ucaBuf, uint16_t _usLen)
000000  b5f8              PUSH     {r3-r7,lr}
;;;853    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;854    	uint16_t i;
;;;855    
;;;856    	for (i = 0; i < _usLen; i++)
000008  2500              MOVS     r5,#0
00000a  e025              B        |L13.88|
                  |L13.12|
;;;857    	{
;;;858    		/* 如果发送缓冲区已经满了，则等待缓冲区空 */
;;;859    	#if 0
;;;860    		/*
;;;861    			在调试GPRS例程时，下面的代码出现死机，while 死循环
;;;862    			原因： 发送第1个字节时 _pUart->usTxWrite = 1；_pUart->usTxRead = 0;
;;;863    			将导致while(1) 无法退出
;;;864    		*/
;;;865    		while (1)
;;;866    		{
;;;867    			uint16_t usRead;
;;;868    
;;;869    			DISABLE_INT();
;;;870    			usRead = _pUart->usTxRead;
;;;871    			ENABLE_INT();
;;;872    
;;;873    			if (++usRead >= _pUart->usTxBufSize)
;;;874    			{
;;;875    				usRead = 0;
;;;876    			}
;;;877    
;;;878    			if (usRead != _pUart->usTxWrite)
;;;879    			{
;;;880    				break;
;;;881    			}
;;;882    		}
;;;883    	#else
;;;884    		/* 当 _pUart->usTxBufSize == 1 时, 下面的函数会死掉(待完善) */
;;;885    		while (1)
00000c  e00c              B        |L13.40|
                  |L13.14|
;;;886    		{
;;;887    			__IO uint16_t usCount;
;;;888    
;;;889    			DISABLE_INT();
00000e  f7fffffe          BL       vPortEnterCritical
;;;890    			usCount = _pUart->usTxCount;
000012  8aa0              LDRH     r0,[r4,#0x14]
000014  9000              STR      r0,[sp,#0]
;;;891    			ENABLE_INT();
000016  f7fffffe          BL       vPortExitCritical
;;;892    
;;;893    			if (usCount < _pUart->usTxBufSize)
00001a  89a0              LDRH     r0,[r4,#0xc]
00001c  f8bd1000          LDRH     r1,[sp,#0]
000020  4288              CMP      r0,r1
000022  dd00              BLE      |L13.38|
;;;894    			{
;;;895    				break;
000024  e001              B        |L13.42|
                  |L13.38|
;;;896    			}
;;;897    		}
000026  bf00              NOP      
                  |L13.40|
000028  e7f1              B        |L13.14|
                  |L13.42|
00002a  bf00              NOP                            ;895
;;;898    	#endif
;;;899    
;;;900    		/* 将新数据填入发送缓冲区 */
;;;901    		_pUart->pTxBuf[_pUart->usTxWrite] = _ucaBuf[i];
00002c  5d70              LDRB     r0,[r6,r5]
00002e  8a22              LDRH     r2,[r4,#0x10]
000030  6861              LDR      r1,[r4,#4]
000032  5488              STRB     r0,[r1,r2]
;;;902    
;;;903    		DISABLE_INT();
000034  f7fffffe          BL       vPortEnterCritical
;;;904    		if (++_pUart->usTxWrite >= _pUart->usTxBufSize)
000038  8a20              LDRH     r0,[r4,#0x10]
00003a  1c40              ADDS     r0,r0,#1
00003c  b280              UXTH     r0,r0
00003e  8220              STRH     r0,[r4,#0x10]
000040  89a1              LDRH     r1,[r4,#0xc]
000042  4288              CMP      r0,r1
000044  db01              BLT      |L13.74|
;;;905    		{
;;;906    			_pUart->usTxWrite = 0;
000046  2000              MOVS     r0,#0
000048  8220              STRH     r0,[r4,#0x10]
                  |L13.74|
;;;907    		}
;;;908    		_pUart->usTxCount++;
00004a  8aa0              LDRH     r0,[r4,#0x14]
00004c  1c40              ADDS     r0,r0,#1
00004e  82a0              STRH     r0,[r4,#0x14]
;;;909    		ENABLE_INT();
000050  f7fffffe          BL       vPortExitCritical
000054  1c68              ADDS     r0,r5,#1              ;856
000056  b285              UXTH     r5,r0                 ;856
                  |L13.88|
000058  42bd              CMP      r5,r7                 ;856
00005a  dbd7              BLT      |L13.12|
;;;910    	}
;;;911    
;;;912    	USART_ITConfig(_pUart->uart, USART_IT_TXE, ENABLE);
00005c  2201              MOVS     r2,#1
00005e  f2407127          MOV      r1,#0x727
000062  6820              LDR      r0,[r4,#0]
000064  f7fffffe          BL       USART_ITConfig
;;;913    }
000068  bdf8              POP      {r3-r7,pc}
;;;914    
                          ENDP


                          AREA ||i.UartVarInit||, CODE, READONLY, ALIGN=2

                  UartVarInit PROC
;;;421    */
;;;422    static void UartVarInit(void)
000000  480a              LDR      r0,|L14.44|
;;;423    {
;;;424    #if UART1_FIFO_EN == 1
;;;425    	g_tUart1.uart = USART1;						/* STM32 串口设备 */
000002  490b              LDR      r1,|L14.48|
000004  6008              STR      r0,[r1,#0]  ; g_tUart1
;;;426    	g_tUart1.pTxBuf = g_TxBuf1;					/* 发送缓冲区指针 */
000006  480b              LDR      r0,|L14.52|
000008  6048              STR      r0,[r1,#4]  ; g_tUart1
;;;427    	g_tUart1.pRxBuf = g_RxBuf1;					/* 接收缓冲区指针 */
00000a  480b              LDR      r0,|L14.56|
00000c  6088              STR      r0,[r1,#8]  ; g_tUart1
;;;428    	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* 发送缓冲区大小 */
00000e  f44f6080          MOV      r0,#0x400
000012  8188              STRH     r0,[r1,#0xc]
;;;429    	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000014  81c8              STRH     r0,[r1,#0xe]
;;;430    	g_tUart1.usTxWrite = 0;						/* 发送FIFO写索引 */
000016  2000              MOVS     r0,#0
000018  8208              STRH     r0,[r1,#0x10]
;;;431    	g_tUart1.usTxRead = 0;						/* 发送FIFO读索引 */
00001a  8248              STRH     r0,[r1,#0x12]
;;;432    	g_tUart1.usRxWrite = 0;						/* 接收FIFO写索引 */
00001c  82c8              STRH     r0,[r1,#0x16]
;;;433    	g_tUart1.usRxRead = 0;						/* 接收FIFO读索引 */
00001e  8308              STRH     r0,[r1,#0x18]
;;;434    	g_tUart1.usRxCount = 0;						/* 接收到的新数据个数 */
000020  8348              STRH     r0,[r1,#0x1a]
;;;435    	g_tUart1.usTxCount = 0;						/* 待发送的数据个数 */
000022  8288              STRH     r0,[r1,#0x14]
;;;436    	g_tUart1.SendBefor = 0;						/* 发送数据前的回调函数 */
000024  61c8              STR      r0,[r1,#0x1c]  ; g_tUart1
;;;437    	g_tUart1.SendOver = 0;						/* 发送完毕后的回调函数 */
000026  6208              STR      r0,[r1,#0x20]  ; g_tUart1
;;;438    	g_tUart1.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000028  6248              STR      r0,[r1,#0x24]  ; g_tUart1
;;;439    #endif
;;;440    
;;;441    #if UART2_FIFO_EN == 1
;;;442    	g_tUart2.uart = USART2;						/* STM32 串口设备 */
;;;443    	g_tUart2.pTxBuf = g_TxBuf2;					/* 发送缓冲区指针 */
;;;444    	g_tUart2.pRxBuf = g_RxBuf2;					/* 接收缓冲区指针 */
;;;445    	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;446    	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;447    	g_tUart2.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;448    	g_tUart2.usTxRead = 0;						/* 发送FIFO读索引 */
;;;449    	g_tUart2.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;450    	g_tUart2.usRxRead = 0;						/* 接收FIFO读索引 */
;;;451    	g_tUart2.usRxCount = 0;						/* 接收到的新数据个数 */
;;;452    	g_tUart2.usTxCount = 0;						/* 待发送的数据个数 */
;;;453    	g_tUart2.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;454    	g_tUart2.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;455    	g_tUart2.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;456    #endif
;;;457    
;;;458    #if UART3_FIFO_EN == 1
;;;459    	g_tUart3.uart = USART3;						/* STM32 串口设备 */
;;;460    	g_tUart3.pTxBuf = g_TxBuf3;					/* 发送缓冲区指针 */
;;;461    	g_tUart3.pRxBuf = g_RxBuf3;					/* 接收缓冲区指针 */
;;;462    	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;463    	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;464    	g_tUart3.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;465    	g_tUart3.usTxRead = 0;						/* 发送FIFO读索引 */
;;;466    	g_tUart3.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;467    	g_tUart3.usRxRead = 0;						/* 接收FIFO读索引 */
;;;468    	g_tUart3.usRxCount = 0;						/* 接收到的新数据个数 */
;;;469    	g_tUart3.usTxCount = 0;						/* 待发送的数据个数 */
;;;470    	g_tUart3.SendBefor = RS485_SendBefor;		/* 发送数据前的回调函数 */
;;;471    	g_tUart3.SendOver = RS485_SendOver;			/* 发送完毕后的回调函数 */
;;;472    	g_tUart3.ReciveNew = RS485_ReciveNew;		/* 接收到新数据后的回调函数 */
;;;473    #endif
;;;474    
;;;475    #if UART4_FIFO_EN == 1
;;;476    	g_tUart4.uart = UART4;						/* STM32 串口设备 */
;;;477    	g_tUart4.pTxBuf = g_TxBuf4;					/* 发送缓冲区指针 */
;;;478    	g_tUart4.pRxBuf = g_RxBuf4;					/* 接收缓冲区指针 */
;;;479    	g_tUart4.usTxBufSize = UART4_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;480    	g_tUart4.usRxBufSize = UART4_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;481    	g_tUart4.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;482    	g_tUart4.usTxRead = 0;						/* 发送FIFO读索引 */
;;;483    	g_tUart4.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;484    	g_tUart4.usRxRead = 0;						/* 接收FIFO读索引 */
;;;485    	g_tUart4.usRxCount = 0;						/* 接收到的新数据个数 */
;;;486    	g_tUart4.usTxCount = 0;						/* 待发送的数据个数 */
;;;487    	g_tUart4.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;488    	g_tUart4.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;489    	g_tUart4.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;490    #endif
;;;491    
;;;492    #if UART5_FIFO_EN == 1
;;;493    	g_tUart5.uart = UART5;						/* STM32 串口设备 */
;;;494    	g_tUart5.pTxBuf = g_TxBuf5;					/* 发送缓冲区指针 */
;;;495    	g_tUart5.pRxBuf = g_RxBuf5;					/* 接收缓冲区指针 */
;;;496    	g_tUart5.usTxBufSize = UART5_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;497    	g_tUart5.usRxBufSize = UART5_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;498    	g_tUart5.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;499    	g_tUart5.usTxRead = 0;						/* 发送FIFO读索引 */
;;;500    	g_tUart5.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;501    	g_tUart5.usRxRead = 0;						/* 接收FIFO读索引 */
;;;502    	g_tUart5.usRxCount = 0;						/* 接收到的新数据个数 */
;;;503    	g_tUart5.usTxCount = 0;						/* 待发送的数据个数 */
;;;504    	g_tUart5.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;505    	g_tUart5.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;506    	g_tUart5.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;507    #endif
;;;508    
;;;509    
;;;510    #if UART6_FIFO_EN == 1
;;;511    	g_tUart6.uart = USART6;						/* STM32 串口设备 */
;;;512    	g_tUart6.pTxBuf = g_TxBuf6;					/* 发送缓冲区指针 */
;;;513    	g_tUart6.pRxBuf = g_RxBuf6;					/* 接收缓冲区指针 */
;;;514    	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;515    	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;516    	g_tUart6.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;517    	g_tUart6.usTxRead = 0;						/* 发送FIFO读索引 */
;;;518    	g_tUart6.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;519    	g_tUart6.usRxRead = 0;						/* 接收FIFO读索引 */
;;;520    	g_tUart6.usRxCount = 0;						/* 接收到的新数据个数 */
;;;521    	g_tUart6.usTxCount = 0;						/* 待发送的数据个数 */
;;;522    	g_tUart6.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;523    	g_tUart6.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;524    	g_tUart6.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;525    #endif
;;;526    }
00002a  4770              BX       lr
;;;527    
                          ENDP

                  |L14.44|
                          DCD      0x40011000
                  |L14.48|
                          DCD      g_tUart1
                  |L14.52|
                          DCD      g_TxBuf1
                  |L14.56|
                          DCD      g_RxBuf1

                          AREA ||i.bsp_InitUart||, CODE, READONLY, ALIGN=1

                  bsp_InitUart PROC
;;;74     */
;;;75     void bsp_InitUart(void)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77     	UartVarInit();		/* 必须先初始化全局变量,再配置硬件 */
000002  f7fffffe          BL       UartVarInit
;;;78     
;;;79     	InitHardUart();		/* 配置串口的硬件参数(波特率等) */
000006  f7fffffe          BL       InitHardUart
;;;80     
;;;81     	//RS485_InitTXE();	/* 配置RS485芯片的发送使能硬件，配置为推挽输出 */
;;;82     
;;;83     	ConfigUartNVIC();	/* 配置串口中断 */
00000a  f7fffffe          BL       ConfigUartNVIC
;;;84     }
00000e  bd10              POP      {r4,pc}
;;;85     
                          ENDP


                          AREA ||i.bsp_Set485Baud||, CODE, READONLY, ALIGN=2

                  bsp_Set485Baud PROC
;;;328    */
;;;329    void bsp_Set485Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;330    {
000002  4604              MOV      r4,r0
;;;331    	USART_InitTypeDef USART_InitStructure;
;;;332    
;;;333    	/* 第2步： 配置串口硬件参数 */
;;;334    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;335    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;336    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;337    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;338    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;339    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;340    	USART_Init(USART3, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L16.40|
000022  f7fffffe          BL       USART_Init
;;;341    }
000026  bd1f              POP      {r0-r4,pc}
;;;342    
                          ENDP

                  |L16.40|
                          DCD      0x40004800

                          AREA ||i.bsp_SetUart1Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart1Baud PROC
;;;260    */
;;;261    void bsp_SetUart1Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;262    {
000002  4604              MOV      r4,r0
;;;263    	USART_InitTypeDef USART_InitStructure;
;;;264    
;;;265    	/* 第2步： 配置串口硬件参数 */
;;;266    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;267    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;268    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;269    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;270    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;271    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;272    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L17.40|
000022  f7fffffe          BL       USART_Init
;;;273    }
000026  bd1f              POP      {r0-r4,pc}
;;;274    
                          ENDP

                  |L17.40|
                          DCD      0x40004400

                          AREA ||i.bsp_SetUart2Baud||, CODE, READONLY, ALIGN=2

                  bsp_SetUart2Baud PROC
;;;282    */
;;;283    void bsp_SetUart2Baud(uint32_t _baud)
000000  b51f              PUSH     {r0-r4,lr}
;;;284    {
000002  4604              MOV      r4,r0
;;;285    	USART_InitTypeDef USART_InitStructure;
;;;286    
;;;287    	/* 第2步： 配置串口硬件参数 */
;;;288    	USART_InitStructure.USART_BaudRate = _baud;	/* 波特率 */
000004  9400              STR      r4,[sp,#0]
;;;289    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000006  2000              MOVS     r0,#0
000008  f8ad0004          STRH     r0,[sp,#4]
;;;290    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00000c  f8ad0006          STRH     r0,[sp,#6]
;;;291    	USART_InitStructure.USART_Parity = USART_Parity_No ;
000010  f8ad0008          STRH     r0,[sp,#8]
;;;292    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000014  f8ad000c          STRH     r0,[sp,#0xc]
;;;293    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000018  200c              MOVS     r0,#0xc
00001a  f8ad000a          STRH     r0,[sp,#0xa]
;;;294    	USART_Init(USART2, &USART_InitStructure);
00001e  4669              MOV      r1,sp
000020  4801              LDR      r0,|L18.40|
000022  f7fffffe          BL       USART_Init
;;;295    }
000026  bd1f              POP      {r0-r4,pc}
;;;296    
                          ENDP

                  |L18.40|
                          DCD      0x40004400

                          AREA ||i.comClearRxFifo||, CODE, READONLY, ALIGN=1

                  comClearRxFifo PROC
;;;237    */
;;;238    void comClearRxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;239    {
000002  4603              MOV      r3,r0
;;;240    	UART_T *pUart;
;;;241    
;;;242    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;243    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L19.16|
                  |L19.14|
;;;244    	{
;;;245    		return;
;;;246    	}
;;;247    
;;;248    	pUart->usRxWrite = 0;
;;;249    	pUart->usRxRead = 0;
;;;250    	pUart->usRxCount = 0;
;;;251    }
00000e  bd00              POP      {pc}
                  |L19.16|
000010  2000              MOVS     r0,#0                 ;248
000012  82d0              STRH     r0,[r2,#0x16]         ;248
000014  8310              STRH     r0,[r2,#0x18]         ;249
000016  8350              STRH     r0,[r2,#0x1a]         ;250
000018  bf00              NOP      
00001a  e7f8              B        |L19.14|
;;;252    
                          ENDP


                          AREA ||i.comClearTxFifo||, CODE, READONLY, ALIGN=1

                  comClearTxFifo PROC
;;;214    */
;;;215    void comClearTxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;216    {
000002  4603              MOV      r3,r0
;;;217    	UART_T *pUart;
;;;218    
;;;219    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;220    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L20.16|
                  |L20.14|
;;;221    	{
;;;222    		return;
;;;223    	}
;;;224    
;;;225    	pUart->usTxWrite = 0;
;;;226    	pUart->usTxRead = 0;
;;;227    	pUart->usTxCount = 0;
;;;228    }
00000e  bd00              POP      {pc}
                  |L20.16|
000010  2000              MOVS     r0,#0                 ;225
000012  8210              STRH     r0,[r2,#0x10]         ;225
000014  8250              STRH     r0,[r2,#0x12]         ;226
000016  8290              STRH     r0,[r2,#0x14]         ;227
000018  bf00              NOP      
00001a  e7f8              B        |L20.14|
;;;229    
                          ENDP


                          AREA ||i.comGetChar||, CODE, READONLY, ALIGN=1

                  comGetChar PROC
;;;193    */
;;;194    uint8_t comGetChar(COM_PORT_E _ucPort, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;195    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;196    	UART_T *pUart;
;;;197    
;;;198    	pUart = ComToUart(_ucPort);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ComToUart
00000c  4604              MOV      r4,r0
;;;199    	if (pUart == 0)
00000e  b90c              CBNZ     r4,|L21.20|
;;;200    	{
;;;201    		return 0;
000010  2000              MOVS     r0,#0
                  |L21.18|
;;;202    	}
;;;203    
;;;204    	return UartGetChar(pUart, _pByte);
;;;205    }
000012  bd70              POP      {r4-r6,pc}
                  |L21.20|
000014  4631              MOV      r1,r6                 ;204
000016  4620              MOV      r0,r4                 ;204
000018  f7fffffe          BL       UartGetChar
00001c  e7f9              B        |L21.18|
;;;206    
                          ENDP


                          AREA ||i.comSendBuf||, CODE, READONLY, ALIGN=1

                  comSendBuf PROC
;;;152    */
;;;153    void comSendBuf(COM_PORT_E _ucPort, uint8_t *_ucaBuf, uint16_t _usLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;154    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;155    	UART_T *pUart;
;;;156    
;;;157    	pUart = ComToUart(_ucPort);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       ComToUart
000010  4604              MOV      r4,r0
;;;158    	if (pUart == 0)
000012  b90c              CBNZ     r4,|L22.24|
                  |L22.20|
;;;159    	{
;;;160    		return;
;;;161    	}
;;;162    
;;;163    	if (pUart->SendBefor != 0)
;;;164    	{
;;;165    		pUart->SendBefor();		/* 如果是RS485通信，可以在这个函数中将RS485设置为发送模式 */
;;;166    	}
;;;167    
;;;168    	UartSend(pUart, _ucaBuf, _usLen);
;;;169    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L22.24|
000018  69e0              LDR      r0,[r4,#0x1c]         ;163
00001a  b108              CBZ      r0,|L22.32|
00001c  69e0              LDR      r0,[r4,#0x1c]         ;165
00001e  4780              BLX      r0                    ;165
                  |L22.32|
000020  463a              MOV      r2,r7                 ;168
000022  4631              MOV      r1,r6                 ;168
000024  4620              MOV      r0,r4                 ;168
000026  f7fffffe          BL       UartSend
00002a  bf00              NOP      
00002c  e7f2              B        |L22.20|
;;;170    
                          ENDP


                          AREA ||i.comSendChar||, CODE, READONLY, ALIGN=1

                  comSendChar PROC
;;;179    */
;;;180    void comSendChar(COM_PORT_E _ucPort, uint8_t _ucByte)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;181    {
000002  4604              MOV      r4,r0
;;;182    	comSendBuf(_ucPort, &_ucByte, 1);
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       comSendBuf
;;;183    }
00000e  bd1c              POP      {r2-r4,pc}
;;;184    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;1130   */
;;;1131   int fgetc(FILE *f)
000000  b538              PUSH     {r3-r5,lr}
;;;1132   {
000002  4604              MOV      r4,r0
;;;1133   
;;;1134   #if 1	/* 从串口接收FIFO中取1个数据, 只有取到数据才返回 */
;;;1135   	uint8_t ucData;
;;;1136   
;;;1137   	while(comGetChar(COM1, &ucData) == 0);
000004  bf00              NOP      
                  |L24.6|
000006  4669              MOV      r1,sp
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comGetChar
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L24.6|
;;;1138   
;;;1139   	return ucData;
000012  f89d0000          LDRB     r0,[sp,#0]
;;;1140   #else
;;;1141   	/* 等待串口1输入数据 */
;;;1142   	while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
;;;1143   
;;;1144   	return (int)USART_ReceiveData(USART1);
;;;1145   #endif
;;;1146   }
000016  bd38              POP      {r3-r5,pc}
;;;1147   
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;1104   */
;;;1105   int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;1106   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1107   #if 0	/* 将需要printf的字符通过串口中断FIFO发送出去，printf函数会立即返回 */
;;;1108   	comSendChar(COM1, ch);
;;;1109   
;;;1110   	return ch;
;;;1111   #else	/* 采用阻塞方式发送每个字符,等待数据发送完毕 */
;;;1112   	/* 写一个字节到USART1 */
;;;1113   	USART_SendData(USART1, (uint8_t) ch);
000006  b2e1              UXTB     r1,r4
000008  4805              LDR      r0,|L25.32|
00000a  f7fffffe          BL       USART_SendData
;;;1114   
;;;1115   	/* 等待发送结束 */
;;;1116   	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
00000e  bf00              NOP      
                  |L25.16|
000010  2140              MOVS     r1,#0x40
000012  4803              LDR      r0,|L25.32|
000014  f7fffffe          BL       USART_GetFlagStatus
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L25.16|
;;;1117   	{}
;;;1118   
;;;1119   	return ch;
00001c  4620              MOV      r0,r4
;;;1120   #endif
;;;1121   }
00001e  bd70              POP      {r4-r6,pc}
;;;1122   
                          ENDP

                  |L25.32|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tUart1
                          %        40
                  g_TxBuf1
                          %        1024
                  g_RxBuf1
                          %        1024

;*** Start embedded assembler ***

#line 1 "..\\User\\bsp\\bsp_uart_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_bsp_uart_fifo_c_b28b0d00____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH|
#line 402
|__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____RRX|
#line 587
|__asm___15_bsp_uart_fifo_c_b28b0d00____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
