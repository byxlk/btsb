; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f2xx_rng.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f2xx_rng.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FatFS\src -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\User -I..\User\bsp -I..\User\emWinTask -I..\STemWin\Config -I..\STemWin\DisplayDriver -I..\STemWin\inc -I..\STemWin\OS -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\stm32f2xx_rng.crf ..\Libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_rng.c]
                          THUMB

                          AREA ||i.RNG_ClearFlag||, CODE, READONLY, ALIGN=2

                  RNG_ClearFlag PROC
;;;332      */
;;;333    void RNG_ClearFlag(uint8_t RNG_FLAG)
000000  ea6f1100          MVN      r1,r0,LSL #4
;;;334    {
;;;335      /* Check the parameters */
;;;336      assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
;;;337      /* Clear the selected RNG flags */
;;;338      RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
000004  4a01              LDR      r2,|L1.12|
000006  6011              STR      r1,[r2,#0]
;;;339    }
000008  4770              BX       lr
;;;340    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x50060804

                          AREA ||i.RNG_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RNG_ClearITPendingBit PROC
;;;378      */
;;;379    void RNG_ClearITPendingBit(uint8_t RNG_IT)
000000  43c1              MVNS     r1,r0
;;;380    {
;;;381      /* Check the parameters */
;;;382      assert_param(IS_RNG_IT(RNG_IT));
;;;383    
;;;384      /* Clear the selected RNG interrupt pending bit */
;;;385      RNG->SR = (uint8_t)~RNG_IT;
000002  b2c9              UXTB     r1,r1
000004  4a01              LDR      r2,|L2.12|
000006  6011              STR      r1,[r2,#0]
;;;386    }
000008  4770              BX       lr
;;;387    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x50060804

                          AREA ||i.RNG_Cmd||, CODE, READONLY, ALIGN=2

                  RNG_Cmd PROC
;;;114      */
;;;115    void RNG_Cmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L3.16|
;;;116    {
;;;117      /* Check the parameters */
;;;118      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;119    
;;;120      if (NewState != DISABLE)
;;;121      {
;;;122        /* Enable the RNG */
;;;123        RNG->CR |= RNG_CR_RNGEN;
000002  4907              LDR      r1,|L3.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0410104          ORR      r1,r1,#4
00000a  4a05              LDR      r2,|L3.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L3.28|
                  |L3.16|
;;;124      }
;;;125      else
;;;126      {
;;;127        /* Disable the RNG */
;;;128        RNG->CR &= ~RNG_CR_RNGEN;
000010  4903              LDR      r1,|L3.32|
000012  6809              LDR      r1,[r1,#0]
000014  f0210104          BIC      r1,r1,#4
000018  4a01              LDR      r2,|L3.32|
00001a  6011              STR      r1,[r2,#0]
                  |L3.28|
;;;129      }
;;;130    }
00001c  4770              BX       lr
;;;131    /**
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      0x50060800

                          AREA ||i.RNG_DeInit||, CODE, READONLY, ALIGN=1

                  RNG_DeInit PROC
;;;99       */
;;;100    void RNG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;101    {
;;;102      /* Enable RNG reset state */
;;;103      RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
000002  2101              MOVS     r1,#1
000004  2040              MOVS     r0,#0x40
000006  f7fffffe          BL       RCC_AHB2PeriphResetCmd
;;;104    
;;;105      /* Release RNG from reset state */
;;;106      RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  2040              MOVS     r0,#0x40
00000e  f7fffffe          BL       RCC_AHB2PeriphResetCmd
;;;107    }
000012  bd10              POP      {r4,pc}
;;;108    
                          ENDP


                          AREA ||i.RNG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RNG_GetFlagStatus PROC
;;;299      */
;;;300    FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
000000  4601              MOV      r1,r0
;;;301    {
;;;302      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;303      /* Check the parameters */
;;;304      assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
;;;305    
;;;306      /* Check the status of the specified RNG flag */
;;;307      if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
000004  4a03              LDR      r2,|L5.20|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L5.16|
;;;308      {
;;;309        /* RNG_FLAG is set */
;;;310        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L5.18|
                  |L5.16|
;;;311      }
;;;312      else
;;;313      {
;;;314        /* RNG_FLAG is reset */
;;;315        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L5.18|
;;;316      }
;;;317      /* Return the RNG_FLAG status */
;;;318      return  bitstatus;
;;;319    }
000012  4770              BX       lr
;;;320    
                          ENDP

                  |L5.20|
                          DCD      0x50060804

                          AREA ||i.RNG_GetITStatus||, CODE, READONLY, ALIGN=2

                  RNG_GetITStatus PROC
;;;348      */
;;;349    ITStatus RNG_GetITStatus(uint8_t RNG_IT)
000000  4601              MOV      r1,r0
;;;350    {
;;;351      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;352      /* Check the parameters */
;;;353      assert_param(IS_RNG_GET_IT(RNG_IT));
;;;354    
;;;355      /* Check the status of the specified RNG interrupt */
;;;356      if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
000004  4a03              LDR      r2,|L6.20|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L6.16|
;;;357      {
;;;358        /* RNG_IT is set */
;;;359        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L6.18|
                  |L6.16|
;;;360      }
;;;361      else
;;;362      {
;;;363        /* RNG_IT is reset */
;;;364        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L6.18|
;;;365      }
;;;366      /* Return the RNG_IT status */
;;;367      return bitstatus;
;;;368    }
000012  4770              BX       lr
;;;369    
                          ENDP

                  |L6.20|
                          DCD      0x50060804

                          AREA ||i.RNG_GetRandomNumber||, CODE, READONLY, ALIGN=2

                  RNG_GetRandomNumber PROC
;;;176      */
;;;177    uint32_t RNG_GetRandomNumber(void)
000000  4801              LDR      r0,|L7.8|
;;;178    {
;;;179      /* Return the 32 bit random number from the DR register */
;;;180      return RNG->DR;
000002  6800              LDR      r0,[r0,#0]
;;;181    }
000004  4770              BX       lr
;;;182    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x50060808

                          AREA ||i.RNG_ITConfig||, CODE, READONLY, ALIGN=2

                  RNG_ITConfig PROC
;;;273      */
;;;274    void RNG_ITConfig(FunctionalState NewState)
000000  b130              CBZ      r0,|L8.16|
;;;275    {
;;;276      /* Check the parameters */
;;;277      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;278    
;;;279      if (NewState != DISABLE)
;;;280      {
;;;281        /* Enable the RNG interrupt */
;;;282        RNG->CR |= RNG_CR_IE;
000002  4907              LDR      r1,|L8.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0410108          ORR      r1,r1,#8
00000a  4a05              LDR      r2,|L8.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L8.28|
                  |L8.16|
;;;283      }
;;;284      else
;;;285      {
;;;286        /* Disable the RNG interrupt */
;;;287        RNG->CR &= ~RNG_CR_IE;
000010  4903              LDR      r1,|L8.32|
000012  6809              LDR      r1,[r1,#0]
000014  f0210108          BIC      r1,r1,#8
000018  4a01              LDR      r2,|L8.32|
00001a  6011              STR      r1,[r2,#0]
                  |L8.28|
;;;288      }
;;;289    }
00001c  4770              BX       lr
;;;290    
                          ENDP

00001e  0000              DCW      0x0000
                  |L8.32|
                          DCD      0x50060800

;*** Start embedded assembler ***

#line 1 "..\\Libraries\\STM32F2xx_StdPeriph_Driver\\src\\stm32f2xx_rng.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f2xx_rng_c_3ce7902d____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_stm32f2xx_rng_c_3ce7902d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f2xx_rng_c_3ce7902d____REVSH|
#line 402
|__asm___15_stm32f2xx_rng_c_3ce7902d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f2xx_rng_c_3ce7902d____RRX|
#line 587
|__asm___15_stm32f2xx_rng_c_3ce7902d____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
