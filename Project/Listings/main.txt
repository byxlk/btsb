; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\User\bsp -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\FatFS\src -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\main.crf ..\User\main.c]
                          THUMB

                          AREA ||i.AppObjCreate||, CODE, READONLY, ALIGN=2

                  AppObjCreate PROC
;;;166    */
;;;167    static void AppObjCreate (void)
000000  b510              PUSH     {r4,lr}
;;;168    {
;;;169    	/* 创建互斥信号量 */
;;;170        xMutex = xSemaphoreCreateMutex();
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       xQueueCreateMutex
000008  4901              LDR      r1,|L1.16|
00000a  6008              STR      r0,[r1,#0]  ; xMutex
;;;171    	
;;;172    	if(xMutex == NULL)
;;;173        {
;;;174            /* 没有创建成功，用户可以在这里加入创建失败的处理机制 */
;;;175        }
;;;176    }
00000c  bd10              POP      {r4,pc}
;;;177    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
                          DCD      xMutex

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;107    */
;;;108    static void AppTaskCreate (void)
000000  b51c              PUSH     {r2-r4,lr}
;;;109    {
;;;110            /* GUI 界面绘制 */
;;;111    	//xTaskCreate(  vTaskGUI,             /* 任务函数  */
;;;112        //              "vTaskGUI",           /* 任务名    */
;;;113        //              1024,                 /* 任务栈大小，单位word，也就是4字节 */
;;;114        //              NULL,                 /* 任务参数  */
;;;115        //              1,                    /* 任务优先级*/
;;;116        //              NULL );               /* 任务句柄  */
;;;117    
;;;118        /* 按键事件处理 */
;;;119        //xTaskCreate( vTaskTaskUserIF,   	/* 任务函数  */
;;;120        //             "vTaskUserIF",     	/* 任务名    */
;;;121        //             512,               	/* 任务栈大小，单位word，也就是4字节 */
;;;122        //             NULL,              	/* 任务参数  */
;;;123        //             2,                 	/* 任务优先级*/
;;;124        //             &xHandleTaskUserIF );  /* 任务句柄  */
;;;125    	
;;;126    	
;;;127    	//xTaskCreate( vTaskLED,    		/* 任务函数  */
;;;128            //         "vTaskLED",  		/* 任务名    */
;;;129            //         512,         		/* stack大小，单位word，也就是4字节 */
;;;130            //         NULL,        		/* 任务参数  */
;;;131            //         3,           		/* 任务优先级*/
;;;132            //         &xHandleTaskLED ); /* 任务句柄  */
;;;133    
;;;134            /* 截图功能 */
;;;135    	//xTaskCreate( vTaskMsgPro,     		/* 任务函数  */
;;;136            //         "vTaskMsgPro",   		/* 任务名    */
;;;137            //         512,             		/* 任务栈大小，单位word，也就是4字节 */
;;;138            //         NULL,           		/* 任务参数  */
;;;139            //         4,               		/* 任务优先级*/
;;;140            //         &xHandleTaskMsgPro );  /* 任务句柄  */
;;;141    	
;;;142    	/* 触摸和按键检测 */
;;;143    	//xTaskCreate( vTaskStart,     		/* 任务函数  */
;;;144            //         "vTaskStart",   		/* 任务名    */
;;;145            //         512,            		/* 任务栈大小，单位word，也就是4字节 */
;;;146            //         NULL,           		/* 任务参数  */
;;;147            //         5,              		/* 任务优先级*/
;;;148            //         &xHandleTaskStart );   /* 任务句柄  */
;;;149    
;;;150        /* ADC 处理函数 */
;;;151    	xTaskCreate( vTaskAdcProc,     		/* 任务函数  */
000002  4806              LDR      r0,|L2.28|
000004  2105              MOVS     r1,#5
000006  2300              MOVS     r3,#0
000008  f44f7200          MOV      r2,#0x200
00000c  e9cd1000          STRD     r1,r0,[sp,#0]
000010  a103              ADR      r1,|L2.32|
000012  4807              LDR      r0,|L2.48|
000014  f7fffffe          BL       xTaskCreate
;;;152                     "vTaskAdcProc",   		/* 任务名    */
;;;153                     512,            		/* 任务栈大小，单位word，也就是4字节 */
;;;154                     NULL,           		/* 任务参数  */
;;;155                     5,              		/* 任务优先级*/
;;;156                     &xHandleTaskAdcProc );   /* 任务句柄  */
;;;157    }
000018  bd1c              POP      {r2-r4,pc}
;;;158    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      xHandleTaskAdcProc
                  |L2.32|
000020  76546173          DCB      "vTaskAdcProc",0
000024  6b416463
000028  50726f63
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
                  |L2.48|
                          DCD      vTaskAdcProc

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;185    */
;;;186    int main(void)
000000  2001              MOVS     r0,#1
000002  f3808810          MSR      PRIMASK,r0
000006  bf00              NOP      
;;;187    {
;;;188    	/* 
;;;189    	  在启动调度前，为了防止初始化STM32外设时有中断服务程序执行，这里禁止全局中断(除了NMI和HardFault)。
;;;190    	  这样做的好处是：
;;;191    	  1. 防止执行的中断服务程序中有FreeRTOS的API函数。
;;;192    	  2. 保证系统正常启动，不受别的中断影响。
;;;193    	  3. 关于是否关闭全局中断，大家根据自己的实际情况设置即可。
;;;194    	  在移植文件port.c中的函数prvStartFirstTask中会重新开启全局中断。通过指令cpsie i开启，__set_PRIMASK(1)
;;;195    	  和cpsie i是等效的。
;;;196         */
;;;197    	__set_PRIMASK(1);  
;;;198    	
;;;199    	/* 硬件初始化 */
;;;200    	//STM32_Bsp_Init(); 
;;;201    	
;;;202    	/* 1. 初始化一个定时器中断，精度高于滴答定时器中断，这样才可以获得准确的系统信息 仅供调试目的，实际项
;;;203    		  目中不要使用，因为这个功能比较影响系统实时性。
;;;204    	   2. 为了正确获取FreeRTOS的调试信息，可以考虑将上面的关闭中断指令__set_PRIMASK(1); 注释掉。 
;;;205    	*/
;;;206    	vSetupSysInfoTest();
000008  f7fffffe          BL       vSetupSysInfoTest
;;;207    	
;;;208    	/* 创建任务 */
;;;209    	AppTaskCreate();
00000c  f7fffffe          BL       AppTaskCreate
;;;210    
;;;211    	/* 创建任务通信机制 */
;;;212    	AppObjCreate();
000010  f7fffffe          BL       AppObjCreate
;;;213    	
;;;214        /* 启动调度，开始执行任务 */
;;;215        vTaskStartScheduler();
000014  f7fffffe          BL       vTaskStartScheduler
;;;216    
;;;217    	/* 
;;;218    	  如果系统正常启动是不会运行到这里的，运行到这里极有可能是用于定时器任务或者空闲任务的
;;;219    	  heap空间不足造成创建失败，此要加大FreeRTOSConfig.h文件中定义的heap大小：
;;;220    	  #define configTOTAL_HEAP_SIZE	      ( ( size_t ) ( 17 * 1024 ) )
;;;221    	*/
;;;222    	while(1);
000018  bf00              NOP      
                  |L3.26|
00001a  e7fe              B        |L3.26|
;;;223    }
;;;224    
                          ENDP


                          AREA ||i.vTaskAdcProc||, CODE, READONLY, ALIGN=1

                  vTaskAdcProc PROC
;;;91     */
;;;92     static void vTaskAdcProc(void *pvParameters)
000000  e003              B        |L4.10|
                  |L4.2|
;;;93     {
;;;94         while(1)
;;;95         {
;;;96             vTaskDelay(1000);
000002  f44f707a          MOV      r0,#0x3e8
000006  f7fffffe          BL       vTaskDelay
                  |L4.10|
00000a  e7fa              B        |L4.2|
;;;97         }
;;;98     }
;;;99     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTaskAdcProc
                          DCD      0x00000000
                  xMutex
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_main____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 402
|__asm___6_main_c_main____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____RRX|
#line 587
|__asm___6_main_c_main____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
