; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f2xx_wwdg.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f2xx_wwdg.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\User\bsp -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\FatFS\src -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\stm32f2xx_wwdg.crf ..\Libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_wwdg.c]
                          THUMB

                          AREA ||i.WWDG_ClearFlag||, CODE, READONLY, ALIGN=2

                  WWDG_ClearFlag PROC
;;;287      */
;;;288    void WWDG_ClearFlag(void)
000000  2000              MOVS     r0,#0
;;;289    {
;;;290      WWDG->SR = (uint32_t)RESET;
000002  4901              LDR      r1,|L1.8|
000004  6008              STR      r0,[r1,#0]
;;;291    }
000006  4770              BX       lr
;;;292    
                          ENDP

                  |L1.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_DeInit||, CODE, READONLY, ALIGN=1

                  WWDG_DeInit PROC
;;;139      */
;;;140    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;141    {
;;;142      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;143      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f44f6000          MOV      r0,#0x800
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;144    }
000014  bd10              POP      {r4,pc}
;;;145    
                          ENDP


                          AREA ||i.WWDG_Enable||, CODE, READONLY, ALIGN=2

                  WWDG_Enable PROC
;;;240      */
;;;241    void WWDG_Enable(uint8_t Counter)
000000  f0400180          ORR      r1,r0,#0x80
;;;242    {
;;;243      /* Check the parameters */
;;;244      assert_param(IS_WWDG_COUNTER(Counter));
;;;245      WWDG->CR = WWDG_CR_WDGA | Counter;
000004  4a01              LDR      r2,|L3.12|
000006  6011              STR      r1,[r2,#0]
;;;246    }
000008  4770              BX       lr
;;;247    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_EnableIT||, CODE, READONLY, ALIGN=2

                  WWDG_EnableIT PROC
;;;197      */
;;;198    void WWDG_EnableIT(void)
000000  2001              MOVS     r0,#1
;;;199    {
;;;200      *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L4.8|
000004  6008              STR      r0,[r1,#0]
;;;201    }
000006  4770              BX       lr
;;;202    
                          ENDP

                  |L4.8|
                          DCD      0x420580a4

                          AREA ||i.WWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDG_GetFlagStatus PROC
;;;267      */
;;;268    FlagStatus WWDG_GetFlagStatus(void)
000000  2000              MOVS     r0,#0
;;;269    {
;;;270      FlagStatus bitstatus = RESET;
;;;271        
;;;272      if ((WWDG->SR) != (uint32_t)RESET)
000002  4903              LDR      r1,|L5.16|
000004  6809              LDR      r1,[r1,#0]
000006  b109              CBZ      r1,|L5.12|
;;;273      {
;;;274        bitstatus = SET;
000008  2001              MOVS     r0,#1
00000a  e000              B        |L5.14|
                  |L5.12|
;;;275      }
;;;276      else
;;;277      {
;;;278        bitstatus = RESET;
00000c  2000              MOVS     r0,#0
                  |L5.14|
;;;279      }
;;;280      return bitstatus;
;;;281    }
00000e  4770              BX       lr
;;;282    
                          ENDP

                  |L5.16|
                          DCD      0x40002c08

                          AREA ||i.WWDG_SetCounter||, CODE, READONLY, ALIGN=2

                  WWDG_SetCounter PROC
;;;209      */
;;;210    void WWDG_SetCounter(uint8_t Counter)
000000  f000017f          AND      r1,r0,#0x7f
;;;211    {
;;;212      /* Check the parameters */
;;;213      assert_param(IS_WWDG_COUNTER(Counter));
;;;214      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;215         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;216      WWDG->CR = Counter & BIT_MASK;
000004  4a01              LDR      r2,|L6.12|
000006  6011              STR      r1,[r2,#0]
;;;217    }
000008  4770              BX       lr
;;;218    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  WWDG_SetPrescaler PROC
;;;155      */
;;;156    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000000  2100              MOVS     r1,#0
;;;157    {
;;;158      uint32_t tmpreg = 0;
;;;159      /* Check the parameters */
;;;160      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;161      /* Clear WDGTB[1:0] bits */
;;;162      tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
000002  4a04              LDR      r2,|L7.20|
000004  6812              LDR      r2,[r2,#0]
000006  f42271c0          BIC      r1,r2,#0x180
;;;163      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;164      tmpreg |= WWDG_Prescaler;
00000a  4301              ORRS     r1,r1,r0
;;;165      /* Store the new value */
;;;166      WWDG->CFR = tmpreg;
00000c  4a01              LDR      r2,|L7.20|
00000e  6011              STR      r1,[r2,#0]
;;;167    }
000010  4770              BX       lr
;;;168    
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40002c04

                          AREA ||i.WWDG_SetWindowValue||, CODE, READONLY, ALIGN=2

                  WWDG_SetWindowValue PROC
;;;174      */
;;;175    void WWDG_SetWindowValue(uint8_t WindowValue)
000000  b508              PUSH     {r3,lr}
;;;176    {
;;;177      __IO uint32_t tmpreg = 0;
000002  2100              MOVS     r1,#0
000004  9100              STR      r1,[sp,#0]
;;;178    
;;;179      /* Check the parameters */
;;;180      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;181      /* Clear W[6:0] bits */
;;;182    
;;;183      tmpreg = WWDG->CFR & CFR_W_MASK;
000006  4907              LDR      r1,|L8.36|
000008  6809              LDR      r1,[r1,#0]
00000a  f021017f          BIC      r1,r1,#0x7f
00000e  9100              STR      r1,[sp,#0]
;;;184    
;;;185      /* Set W[6:0] bits according to WindowValue value */
;;;186      tmpreg |= WindowValue & (uint32_t) BIT_MASK;
000010  f000017f          AND      r1,r0,#0x7f
000014  9a00              LDR      r2,[sp,#0]
000016  4311              ORRS     r1,r1,r2
000018  9100              STR      r1,[sp,#0]
;;;187    
;;;188      /* Store the new value */
;;;189      WWDG->CFR = tmpreg;
00001a  4a02              LDR      r2,|L8.36|
00001c  9900              LDR      r1,[sp,#0]
00001e  6011              STR      r1,[r2,#0]
;;;190    }
000020  bd08              POP      {r3,pc}
;;;191    
                          ENDP

000022  0000              DCW      0x0000
                  |L8.36|
                          DCD      0x40002c04

;*** Start embedded assembler ***

#line 1 "..\\Libraries\\STM32F2xx_StdPeriph_Driver\\src\\stm32f2xx_wwdg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f2xx_wwdg_c_9668c0ca____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___16_stm32f2xx_wwdg_c_9668c0ca____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f2xx_wwdg_c_9668c0ca____REVSH|
#line 402
|__asm___16_stm32f2xx_wwdg_c_9668c0ca____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f2xx_wwdg_c_9668c0ca____RRX|
#line 587
|__asm___16_stm32f2xx_wwdg_c_9668c0ca____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
