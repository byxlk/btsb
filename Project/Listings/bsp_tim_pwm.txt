; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\bsp_tim_pwm.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\bsp_tim_pwm.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\User\bsp -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\FatFS\src -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\bsp_tim_pwm.crf ..\User\bsp\bsp_tim_pwm.c]
                          THUMB

                          AREA ||i.bsp_ConfigGpioOut||, CODE, READONLY, ALIGN=1

                  bsp_ConfigGpioOut PROC
;;;235    */
;;;236    void bsp_ConfigGpioOut(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinX)
000000  b57c              PUSH     {r2-r6,lr}
;;;237    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;238    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;239    
;;;240    	/* 使能GPIO时钟 */
;;;241    	RCC_APB2PeriphClockCmd(bsp_GetRCCofGPIO(GPIOx), ENABLE);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       bsp_GetRCCofGPIO
00000c  4606              MOV      r6,r0
00000e  2101              MOVS     r1,#1
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;242    
;;;243    	/* 配置GPIO */
;;;244    	GPIO_InitStructure.GPIO_Pin = GPIO_PinX;		/* 带入的形参 */
000014  9400              STR      r4,[sp,#0]
;;;245    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;	/* 输出 */
000016  2001              MOVS     r0,#1
000018  f88d0004          STRB     r0,[sp,#4]
;;;246            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00001c  2000              MOVS     r0,#0
00001e  f88d0006          STRB     r0,[sp,#6]
;;;247    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000022  2002              MOVS     r0,#2
000024  f88d0005          STRB     r0,[sp,#5]
;;;248    	GPIO_Init(GPIOx, &GPIO_InitStructure);
000028  4669              MOV      r1,sp
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       GPIO_Init
;;;249    }
000030  bd7c              POP      {r2-r6,pc}
;;;250    
                          ENDP


                          AREA ||i.bsp_ConfigTimGpio||, CODE, READONLY, ALIGN=2

                  bsp_ConfigTimGpio PROC
;;;201    */
;;;202    void bsp_ConfigTimGpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinX, TIM_TypeDef* TIMx, uint8_t _ucChannel)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;203    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  4698              MOV      r8,r3
;;;204    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;205    
;;;206    	/* 使能GPIO时钟 */
;;;207    	RCC_APB2PeriphClockCmd(bsp_GetRCCofGPIO(GPIOx), ENABLE);
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       bsp_GetRCCofGPIO
000012  4607              MOV      r7,r0
000014  2101              MOVS     r1,#1
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;208    
;;;209      	/* 使能TIM时钟 */
;;;210    	if ((TIMx == TIM1) || (TIMx == TIM8))
00001a  4812              LDR      r0,|L2.100|
00001c  4284              CMP      r4,r0
00001e  d002              BEQ      |L2.38|
000020  4811              LDR      r0,|L2.104|
000022  4284              CMP      r4,r0
000024  d107              BNE      |L2.54|
                  |L2.38|
;;;211    	{
;;;212    		RCC_APB2PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       bsp_GetRCCofTIM
00002c  4607              MOV      r7,r0
00002e  2101              MOVS     r1,#1
000030  f7fffffe          BL       RCC_APB2PeriphClockCmd
000034  e006              B        |L2.68|
                  |L2.54|
;;;213    	}
;;;214    	else
;;;215    	{
;;;216    		RCC_APB1PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       bsp_GetRCCofTIM
00003c  4607              MOV      r7,r0
00003e  2101              MOVS     r1,#1
000040  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L2.68|
;;;217    	}
;;;218    
;;;219    	/* 配置GPIO */
;;;220    	GPIO_InitStructure.GPIO_Pin = GPIO_PinX;
000044  9500              STR      r5,[sp,#0]
;;;221    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;		/* 复用功能 */
000046  2002              MOVS     r0,#2
000048  f88d0004          STRB     r0,[sp,#4]
;;;222            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00004c  2000              MOVS     r0,#0
00004e  f88d0006          STRB     r0,[sp,#6]
;;;223    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000052  2002              MOVS     r0,#2
000054  f88d0005          STRB     r0,[sp,#5]
;;;224    	GPIO_Init(GPIOx, &GPIO_InitStructure); 
000058  4669              MOV      r1,sp
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       GPIO_Init
;;;225    }
000060  e8bd81fc          POP      {r2-r8,pc}
;;;226    
                          ENDP

                  |L2.100|
                          DCD      0x40010000
                  |L2.104|
                          DCD      0x40010400

                          AREA ||i.bsp_GetRCCofGPIO||, CODE, READONLY, ALIGN=2

                  bsp_GetRCCofGPIO PROC
;;;77     */
;;;78     uint32_t bsp_GetRCCofGPIO(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;79     {
;;;80     	uint32_t rcc = 0;
000002  2000              MOVS     r0,#0
;;;81     
;;;82     	if (GPIOx == GPIOA)
000004  4a11              LDR      r2,|L3.76|
000006  4291              CMP      r1,r2
000008  d101              BNE      |L3.14|
;;;83     	{
;;;84     		rcc = RCC_AHB1Periph_GPIOA;
00000a  2001              MOVS     r0,#1
00000c  e01c              B        |L3.72|
                  |L3.14|
;;;85     	}
;;;86     	else if (GPIOx == GPIOB)
00000e  4a10              LDR      r2,|L3.80|
000010  4291              CMP      r1,r2
000012  d101              BNE      |L3.24|
;;;87     	{
;;;88     		rcc = RCC_AHB1Periph_GPIOB;
000014  2002              MOVS     r0,#2
000016  e017              B        |L3.72|
                  |L3.24|
;;;89     	}
;;;90     	else if (GPIOx == GPIOC)
000018  4a0e              LDR      r2,|L3.84|
00001a  4291              CMP      r1,r2
00001c  d101              BNE      |L3.34|
;;;91     	{
;;;92     		rcc = RCC_AHB1Periph_GPIOC;
00001e  2004              MOVS     r0,#4
000020  e012              B        |L3.72|
                  |L3.34|
;;;93     	}
;;;94     	else if (GPIOx == GPIOD)
000022  4a0d              LDR      r2,|L3.88|
000024  4291              CMP      r1,r2
000026  d101              BNE      |L3.44|
;;;95     	{
;;;96     		rcc = RCC_AHB1Periph_GPIOD;
000028  2008              MOVS     r0,#8
00002a  e00d              B        |L3.72|
                  |L3.44|
;;;97     	}
;;;98     	else if (GPIOx == GPIOE)
00002c  4a0b              LDR      r2,|L3.92|
00002e  4291              CMP      r1,r2
000030  d101              BNE      |L3.54|
;;;99     	{
;;;100    		rcc = RCC_AHB1Periph_GPIOE;
000032  2010              MOVS     r0,#0x10
000034  e008              B        |L3.72|
                  |L3.54|
;;;101    	}
;;;102    	else if (GPIOx == GPIOF)
000036  4a0a              LDR      r2,|L3.96|
000038  4291              CMP      r1,r2
00003a  d101              BNE      |L3.64|
;;;103    	{
;;;104    		rcc = RCC_AHB1Periph_GPIOF;
00003c  2020              MOVS     r0,#0x20
00003e  e003              B        |L3.72|
                  |L3.64|
;;;105    	}
;;;106    	else if (GPIOx == GPIOG)
000040  4a08              LDR      r2,|L3.100|
000042  4291              CMP      r1,r2
000044  d100              BNE      |L3.72|
;;;107    	{
;;;108    		rcc = RCC_AHB1Periph_GPIOG;
000046  2040              MOVS     r0,#0x40
                  |L3.72|
;;;109    	}
;;;110    
;;;111    	return rcc;
;;;112    }
000048  4770              BX       lr
;;;113    
                          ENDP

00004a  0000              DCW      0x0000
                  |L3.76|
                          DCD      0x40020000
                  |L3.80|
                          DCD      0x40020400
                  |L3.84|
                          DCD      0x40020800
                  |L3.88|
                          DCD      0x40020c00
                  |L3.92|
                          DCD      0x40021000
                  |L3.96|
                          DCD      0x40021400
                  |L3.100|
                          DCD      0x40021800

                          AREA ||i.bsp_GetRCCofTIM||, CODE, READONLY, ALIGN=2

                  bsp_GetRCCofTIM PROC
;;;121    */
;;;122    uint32_t bsp_GetRCCofTIM(TIM_TypeDef* TIMx)
000000  4601              MOV      r1,r0
;;;123    {
;;;124    	uint32_t rcc = 0;
000002  2000              MOVS     r0,#0
;;;125    
;;;126    	/*
;;;127    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13, TIM14
;;;128    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;129    	*/
;;;130    	if (TIMx == TIM1)
000004  4a24              LDR      r2,|L4.152|
000006  4291              CMP      r1,r2
000008  d101              BNE      |L4.14|
;;;131    	{
;;;132    		rcc = RCC_APB2Periph_TIM1;
00000a  2001              MOVS     r0,#1
00000c  e042              B        |L4.148|
                  |L4.14|
;;;133    	}
;;;134    	else if (TIMx == TIM8)
00000e  4a23              LDR      r2,|L4.156|
000010  4291              CMP      r1,r2
000012  d101              BNE      |L4.24|
;;;135    	{
;;;136    		rcc = RCC_APB2Periph_TIM8;
000014  2002              MOVS     r0,#2
000016  e03d              B        |L4.148|
                  |L4.24|
;;;137    	}
;;;138    	else if (TIMx == TIM9)
000018  4a21              LDR      r2,|L4.160|
00001a  4291              CMP      r1,r2
00001c  d102              BNE      |L4.36|
;;;139    	{
;;;140    		rcc = RCC_APB2Periph_TIM9;
00001e  f44f3080          MOV      r0,#0x10000
000022  e037              B        |L4.148|
                  |L4.36|
;;;141    	}
;;;142    	else if (TIMx == TIM10)
000024  4a1f              LDR      r2,|L4.164|
000026  4291              CMP      r1,r2
000028  d102              BNE      |L4.48|
;;;143    	{
;;;144    		rcc = RCC_APB2Periph_TIM10;
00002a  f44f3000          MOV      r0,#0x20000
00002e  e031              B        |L4.148|
                  |L4.48|
;;;145    	}
;;;146    	else if (TIMx == TIM11)
000030  4a1d              LDR      r2,|L4.168|
000032  4291              CMP      r1,r2
000034  d102              BNE      |L4.60|
;;;147    	{
;;;148    		rcc = RCC_APB2Periph_TIM11;
000036  f44f2080          MOV      r0,#0x40000
00003a  e02b              B        |L4.148|
                  |L4.60|
;;;149    	}
;;;150    	/* 下面是 APB1时钟 */
;;;151    	else if (TIMx == TIM2)
00003c  f1b14f80          CMP      r1,#0x40000000
000040  d101              BNE      |L4.70|
;;;152    	{
;;;153    		rcc = RCC_APB1Periph_TIM2;
000042  2001              MOVS     r0,#1
000044  e026              B        |L4.148|
                  |L4.70|
;;;154    	}
;;;155    	else if (TIMx == TIM3)
000046  4a19              LDR      r2,|L4.172|
000048  4291              CMP      r1,r2
00004a  d101              BNE      |L4.80|
;;;156    	{
;;;157    		rcc = RCC_APB1Periph_TIM3;
00004c  2002              MOVS     r0,#2
00004e  e021              B        |L4.148|
                  |L4.80|
;;;158    	}
;;;159    	else if (TIMx == TIM4)
000050  4a17              LDR      r2,|L4.176|
000052  4291              CMP      r1,r2
000054  d101              BNE      |L4.90|
;;;160    	{
;;;161    		rcc = RCC_APB1Periph_TIM4;
000056  2004              MOVS     r0,#4
000058  e01c              B        |L4.148|
                  |L4.90|
;;;162    	}
;;;163    	else if (TIMx == TIM5)
00005a  4a16              LDR      r2,|L4.180|
00005c  4291              CMP      r1,r2
00005e  d101              BNE      |L4.100|
;;;164    	{
;;;165    		rcc = RCC_APB1Periph_TIM5;
000060  2008              MOVS     r0,#8
000062  e017              B        |L4.148|
                  |L4.100|
;;;166    	}
;;;167    	else if (TIMx == TIM6)
000064  4a14              LDR      r2,|L4.184|
000066  4291              CMP      r1,r2
000068  d101              BNE      |L4.110|
;;;168    	{
;;;169    		rcc = RCC_APB1Periph_TIM6;
00006a  2010              MOVS     r0,#0x10
00006c  e012              B        |L4.148|
                  |L4.110|
;;;170    	}
;;;171    	else if (TIMx == TIM7)
00006e  4a13              LDR      r2,|L4.188|
000070  4291              CMP      r1,r2
000072  d101              BNE      |L4.120|
;;;172    	{
;;;173    		rcc = RCC_APB1Periph_TIM7;
000074  2020              MOVS     r0,#0x20
000076  e00d              B        |L4.148|
                  |L4.120|
;;;174    	}
;;;175    	else if (TIMx == TIM12)
000078  4a11              LDR      r2,|L4.192|
00007a  4291              CMP      r1,r2
00007c  d101              BNE      |L4.130|
;;;176    	{
;;;177    		rcc = RCC_APB1Periph_TIM12;
00007e  2040              MOVS     r0,#0x40
000080  e008              B        |L4.148|
                  |L4.130|
;;;178    	}
;;;179    	else if (TIMx == TIM13)
000082  4a10              LDR      r2,|L4.196|
000084  4291              CMP      r1,r2
000086  d101              BNE      |L4.140|
;;;180    	{
;;;181    		rcc = RCC_APB1Periph_TIM13;
000088  2080              MOVS     r0,#0x80
00008a  e003              B        |L4.148|
                  |L4.140|
;;;182    	}
;;;183    	else if (TIMx == TIM14)
00008c  4a0e              LDR      r2,|L4.200|
00008e  4291              CMP      r1,r2
000090  d100              BNE      |L4.148|
;;;184    	{
;;;185    		rcc = RCC_APB1Periph_TIM14;
000092  1588              ASRS     r0,r1,#22
                  |L4.148|
;;;186    	}
;;;187    
;;;188    	return rcc;
;;;189    }
000094  4770              BX       lr
;;;190    
                          ENDP

000096  0000              DCW      0x0000
                  |L4.152|
                          DCD      0x40010000
                  |L4.156|
                          DCD      0x40010400
                  |L4.160|
                          DCD      0x40014000
                  |L4.164|
                          DCD      0x40014400
                  |L4.168|
                          DCD      0x40014800
                  |L4.172|
                          DCD      0x40000400
                  |L4.176|
                          DCD      0x40000800
                  |L4.180|
                          DCD      0x40000c00
                  |L4.184|
                          DCD      0x40001000
                  |L4.188|
                          DCD      0x40001400
                  |L4.192|
                          DCD      0x40001800
                  |L4.196|
                          DCD      0x40001c00
                  |L4.200|
                          DCD      0x40002000

                          AREA ||i.bsp_SetTIMOutPWM||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMOutPWM PROC
;;;260    */
;;;261    void bsp_SetTIMOutPWM(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TIM_TypeDef* TIMx, uint8_t _ucChannel,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;262    	 uint32_t _ulFreq, uint32_t _ulDutyCycle)
;;;263    {
000004  b089              SUB      sp,sp,#0x24
000006  4683              MOV      r11,r0
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  e9dd6a16          LDRD     r6,r10,[sp,#0x58]
;;;264    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;265    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;266    	uint16_t usPeriod;
;;;267    	uint16_t usPrescaler;
;;;268    	uint32_t uiTIMxCLK;
;;;269    
;;;270    	if (_ulDutyCycle == 0)
000010  f1ba0f00          CMP      r10,#0
000014  d10f              BNE      |L5.54|
;;;271    	{		
;;;272    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
000016  2100              MOVS     r1,#0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       TIM_Cmd
;;;273    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
00001e  4658              MOV      r0,r11
000020  990a              LDR      r1,[sp,#0x28]
000022  f7fffffe          BL       bsp_ConfigGpioOut
;;;274    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_RESET);	/* PWM = 0 */		
000026  2200              MOVS     r2,#0
000028  4658              MOV      r0,r11
00002a  990a              LDR      r1,[sp,#0x28]
00002c  f7fffffe          BL       GPIO_WriteBit
                  |L5.48|
;;;275    		return;
;;;276    	}
;;;277    	else if (_ulDutyCycle == 10000)
;;;278    	{
;;;279    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
;;;280    
;;;281    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
;;;282    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_SET);	/* PWM = 1 */	
;;;283    		return;
;;;284    	}
;;;285    	
;;;286    
;;;287    	bsp_ConfigTimGpio(GPIOx, GPIO_Pin, TIMx, _ucChannel);	/* 使能GPIO和TIM时钟，并连接TIM通道到GPIO */
;;;288    	
;;;289        /*-----------------------------------------------------------------------
;;;290    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;291    
;;;292    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;293    		PCLK2 = HCLK / 2      (APB2Periph)
;;;294    		PCLK1 = HCLK / 4      (APB1Periph)
;;;295    
;;;296    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;297    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;298    
;;;299    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM6, TIM12, TIM13,TIM14
;;;300    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;301    
;;;302    	----------------------------------------------------------------------- */
;;;303    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;304    	{
;;;305    		/* APB2 定时器 */
;;;306    		uiTIMxCLK = SystemCoreClock;
;;;307    	}
;;;308    	else	/* APB1 定时器 */
;;;309    	{
;;;310    		uiTIMxCLK = SystemCoreClock;	// SystemCoreClock / 2;
;;;311    	}
;;;312    
;;;313    	if (_ulFreq < 100)
;;;314    	{
;;;315    		usPrescaler = 10000 - 1;					/* 分频比 = 10000 */
;;;316    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;317    	}
;;;318    	else if (_ulFreq < 3000)
;;;319    	{
;;;320    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;321    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;322    	}
;;;323    	else	/* 大于4K的频率，无需分频 */
;;;324    	{
;;;325    		usPrescaler = 0;					/* 分频比 = 1 */
;;;326    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;327    	}
;;;328    
;;;329    	/* Time base configuration */
;;;330    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;331    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;332    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;333    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;334    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;	
;;;335    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;336    
;;;337    	/* PWM1 Mode configuration: Channel1 */
;;;338    	TIM_OCStructInit(&TIM_OCInitStructure);		/* 初始化结构体成员 */
;;;339    	
;;;340    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
;;;341    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
;;;342    	TIM_OCInitStructure.TIM_Pulse = (_ulDutyCycle * usPeriod) / 10000;
;;;343    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;344    	
;;;345    	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Disable;	/* only for TIM1 and TIM8. */	
;;;346    	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;			/* only for TIM1 and TIM8. */		
;;;347    	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;348    	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;349    	
;;;350    	if (_ucChannel == 1)
;;;351    	{
;;;352    		TIM_OC1Init(TIMx, &TIM_OCInitStructure);
;;;353    		TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;354    	}
;;;355    	else if (_ucChannel == 2)
;;;356    	{
;;;357    		TIM_OC2Init(TIMx, &TIM_OCInitStructure);
;;;358    		TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;359    	}
;;;360    	else if (_ucChannel == 3)
;;;361    	{
;;;362    		TIM_OC3Init(TIMx, &TIM_OCInitStructure);
;;;363    		TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;364    	}
;;;365    	else if (_ucChannel == 4)
;;;366    	{
;;;367    		TIM_OC4Init(TIMx, &TIM_OCInitStructure);
;;;368    		TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;369    	}
;;;370    
;;;371    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;372    
;;;373    	/* TIMx enable counter */
;;;374    	TIM_Cmd(TIMx, ENABLE);
;;;375    
;;;376    	/* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;377    	if ((TIMx == TIM1) || (TIMx == TIM8))
;;;378    	{
;;;379    		TIM_CtrlPWMOutputs(TIMx, ENABLE);
;;;380    	}
;;;381    }
000030  b00d              ADD      sp,sp,#0x34
000032  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.54|
000036  f2427010          MOV      r0,#0x2710            ;277
00003a  4582              CMP      r10,r0                ;277
00003c  d10d              BNE      |L5.90|
00003e  2100              MOVS     r1,#0                 ;279
000040  4620              MOV      r0,r4                 ;279
000042  f7fffffe          BL       TIM_Cmd
000046  4658              MOV      r0,r11                ;281
000048  990a              LDR      r1,[sp,#0x28]         ;281
00004a  f7fffffe          BL       bsp_ConfigGpioOut
00004e  2201              MOVS     r2,#1                 ;282
000050  4658              MOV      r0,r11                ;282
000052  990a              LDR      r1,[sp,#0x28]         ;282
000054  f7fffffe          BL       GPIO_WriteBit
000058  e7ea              B        |L5.48|
                  |L5.90|
00005a  462b              MOV      r3,r5                 ;287
00005c  4622              MOV      r2,r4                 ;287
00005e  4658              MOV      r0,r11                ;287
000060  990a              LDR      r1,[sp,#0x28]         ;287
000062  f7fffffe          BL       bsp_ConfigTimGpio
000066  484f              LDR      r0,|L5.420|
000068  4284              CMP      r4,r0                 ;303
00006a  d00b              BEQ      |L5.132|
00006c  484e              LDR      r0,|L5.424|
00006e  4284              CMP      r4,r0                 ;303
000070  d008              BEQ      |L5.132|
000072  484e              LDR      r0,|L5.428|
000074  4284              CMP      r4,r0                 ;303
000076  d005              BEQ      |L5.132|
000078  484d              LDR      r0,|L5.432|
00007a  4284              CMP      r4,r0                 ;303
00007c  d002              BEQ      |L5.132|
00007e  484d              LDR      r0,|L5.436|
000080  4284              CMP      r4,r0                 ;303
000082  d103              BNE      |L5.140|
                  |L5.132|
000084  484c              LDR      r0,|L5.440|
000086  f8d08000          LDR      r8,[r0,#0]            ;306  ; SystemCoreClock
00008a  e002              B        |L5.146|
                  |L5.140|
00008c  484a              LDR      r0,|L5.440|
00008e  f8d08000          LDR      r8,[r0,#0]            ;310  ; SystemCoreClock
                  |L5.146|
000092  2e64              CMP      r6,#0x64              ;313
000094  d20a              BCS      |L5.172|
000096  f242790f          MOV      r9,#0x270f            ;315
00009a  f2427010          MOV      r0,#0x2710            ;316
00009e  fbb8f0f0          UDIV     r0,r8,r0              ;316
0000a2  fbb0f0f6          UDIV     r0,r0,r6              ;316
0000a6  1e40              SUBS     r0,r0,#1              ;316
0000a8  b287              UXTH     r7,r0                 ;316
0000aa  e013              B        |L5.212|
                  |L5.172|
0000ac  f64030b8          MOV      r0,#0xbb8             ;318
0000b0  4286              CMP      r6,r0                 ;318
0000b2  d209              BCS      |L5.200|
0000b4  f04f0963          MOV      r9,#0x63              ;320
0000b8  2064              MOVS     r0,#0x64              ;321
0000ba  fbb8f0f0          UDIV     r0,r8,r0              ;321
0000be  fbb0f0f6          UDIV     r0,r0,r6              ;321
0000c2  1e40              SUBS     r0,r0,#1              ;321
0000c4  b287              UXTH     r7,r0                 ;321
0000c6  e005              B        |L5.212|
                  |L5.200|
0000c8  f04f0900          MOV      r9,#0                 ;325
0000cc  fbb8f0f6          UDIV     r0,r8,r6              ;326
0000d0  1e40              SUBS     r0,r0,#1              ;326
0000d2  b287              UXTH     r7,r0                 ;326
                  |L5.212|
0000d4  9707              STR      r7,[sp,#0x1c]         ;330
0000d6  f8ad9018          STRH     r9,[sp,#0x18]         ;331
0000da  2000              MOVS     r0,#0                 ;332
0000dc  f8ad0020          STRH     r0,[sp,#0x20]         ;332
0000e0  f8ad001a          STRH     r0,[sp,#0x1a]         ;333
0000e4  f88d0022          STRB     r0,[sp,#0x22]         ;334
0000e8  a906              ADD      r1,sp,#0x18           ;335
0000ea  4620              MOV      r0,r4                 ;335
0000ec  f7fffffe          BL       TIM_TimeBaseInit
0000f0  a801              ADD      r0,sp,#4              ;338
0000f2  f7fffffe          BL       TIM_OCStructInit
0000f6  2060              MOVS     r0,#0x60              ;340
0000f8  f8ad0004          STRH     r0,[sp,#4]            ;340
0000fc  2001              MOVS     r0,#1                 ;341
0000fe  f8ad0006          STRH     r0,[sp,#6]            ;341
000102  fb0af007          MUL      r0,r10,r7             ;342
000106  f2427110          MOV      r1,#0x2710            ;342
00010a  fbb0f0f1          UDIV     r0,r0,r1              ;342
00010e  9003              STR      r0,[sp,#0xc]          ;342
000110  2000              MOVS     r0,#0                 ;343
000112  f8ad0010          STRH     r0,[sp,#0x10]         ;343
000116  f8ad0008          STRH     r0,[sp,#8]            ;345
00011a  f8ad0012          STRH     r0,[sp,#0x12]         ;346
00011e  f8ad0014          STRH     r0,[sp,#0x14]         ;347
000122  f8ad0016          STRH     r0,[sp,#0x16]         ;348
000126  2d01              CMP      r5,#1                 ;350
000128  d108              BNE      |L5.316|
00012a  a901              ADD      r1,sp,#4              ;352
00012c  4620              MOV      r0,r4                 ;352
00012e  f7fffffe          BL       TIM_OC1Init
000132  2108              MOVS     r1,#8                 ;353
000134  4620              MOV      r0,r4                 ;353
000136  f7fffffe          BL       TIM_OC1PreloadConfig
00013a  e01f              B        |L5.380|
                  |L5.316|
00013c  2d02              CMP      r5,#2                 ;355
00013e  d108              BNE      |L5.338|
000140  a901              ADD      r1,sp,#4              ;357
000142  4620              MOV      r0,r4                 ;357
000144  f7fffffe          BL       TIM_OC2Init
000148  2108              MOVS     r1,#8                 ;358
00014a  4620              MOV      r0,r4                 ;358
00014c  f7fffffe          BL       TIM_OC2PreloadConfig
000150  e014              B        |L5.380|
                  |L5.338|
000152  2d03              CMP      r5,#3                 ;360
000154  d108              BNE      |L5.360|
000156  a901              ADD      r1,sp,#4              ;362
000158  4620              MOV      r0,r4                 ;362
00015a  f7fffffe          BL       TIM_OC3Init
00015e  2108              MOVS     r1,#8                 ;363
000160  4620              MOV      r0,r4                 ;363
000162  f7fffffe          BL       TIM_OC3PreloadConfig
000166  e009              B        |L5.380|
                  |L5.360|
000168  2d04              CMP      r5,#4                 ;365
00016a  d107              BNE      |L5.380|
00016c  a901              ADD      r1,sp,#4              ;367
00016e  4620              MOV      r0,r4                 ;367
000170  f7fffffe          BL       TIM_OC4Init
000174  2108              MOVS     r1,#8                 ;368
000176  4620              MOV      r0,r4                 ;368
000178  f7fffffe          BL       TIM_OC4PreloadConfig
                  |L5.380|
00017c  2101              MOVS     r1,#1                 ;371
00017e  4620              MOV      r0,r4                 ;371
000180  f7fffffe          BL       TIM_ARRPreloadConfig
000184  2101              MOVS     r1,#1                 ;374
000186  4620              MOV      r0,r4                 ;374
000188  f7fffffe          BL       TIM_Cmd
00018c  4805              LDR      r0,|L5.420|
00018e  4284              CMP      r4,r0                 ;377
000190  d002              BEQ      |L5.408|
000192  4805              LDR      r0,|L5.424|
000194  4284              CMP      r4,r0                 ;377
000196  d103              BNE      |L5.416|
                  |L5.408|
000198  2101              MOVS     r1,#1                 ;379
00019a  4620              MOV      r0,r4                 ;379
00019c  f7fffffe          BL       TIM_CtrlPWMOutputs
                  |L5.416|
0001a0  bf00              NOP      
0001a2  e745              B        |L5.48|
;;;382    
                          ENDP

                  |L5.420|
                          DCD      0x40010000
                  |L5.424|
                          DCD      0x40010400
                  |L5.428|
                          DCD      0x40014000
                  |L5.432|
                          DCD      0x40014400
                  |L5.436|
                          DCD      0x40014800
                  |L5.440|
                          DCD      SystemCoreClock

                          AREA ||i.bsp_SetTIMOutPWM_N||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMOutPWM_N PROC
;;;392    */
;;;393    void bsp_SetTIMOutPWM_N(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TIM_TypeDef* TIMx, uint8_t _ucChannel,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;394    	 uint32_t _ulFreq, uint32_t _ulDutyCycle)
;;;395    {
000004  b089              SUB      sp,sp,#0x24
000006  4683              MOV      r11,r0
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  e9dd6a16          LDRD     r6,r10,[sp,#0x58]
;;;396    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;397    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;398    	uint16_t usPeriod;
;;;399    	uint16_t usPrescaler;
;;;400    	uint32_t uiTIMxCLK;
;;;401    
;;;402    	if (_ulDutyCycle == 0)
000010  f1ba0f00          CMP      r10,#0
000014  d10f              BNE      |L6.54|
;;;403    	{		
;;;404    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
000016  2100              MOVS     r1,#0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       TIM_Cmd
;;;405    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
00001e  4658              MOV      r0,r11
000020  990a              LDR      r1,[sp,#0x28]
000022  f7fffffe          BL       bsp_ConfigGpioOut
;;;406    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_RESET);	/* PWM = 0 */		
000026  2200              MOVS     r2,#0
000028  4658              MOV      r0,r11
00002a  990a              LDR      r1,[sp,#0x28]
00002c  f7fffffe          BL       GPIO_WriteBit
                  |L6.48|
;;;407    		return;
;;;408    	}
;;;409    	else if (_ulDutyCycle == 10000)
;;;410    	{
;;;411    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
;;;412    
;;;413    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
;;;414    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_SET);	/* PWM = 1 */	
;;;415    		return;
;;;416    	}
;;;417    	
;;;418    
;;;419    	bsp_ConfigTimGpio(GPIOx, GPIO_Pin, TIMx, _ucChannel);	/* 使能GPIO和TIM时钟，并连接TIM通道到GPIO */
;;;420    	
;;;421        /*-----------------------------------------------------------------------
;;;422    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;423    
;;;424    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;425    		PCLK2 = HCLK / 2      (APB2Periph)
;;;426    		PCLK1 = HCLK / 4      (APB1Periph)
;;;427    
;;;428    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;429    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;430    
;;;431    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM6, TIM12, TIM13,TIM14
;;;432    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;433    
;;;434    	----------------------------------------------------------------------- */
;;;435    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;436    	{
;;;437    		/* APB2 定时器 */
;;;438    		uiTIMxCLK = SystemCoreClock;
;;;439    	}
;;;440    	else	/* APB1 定时器 */
;;;441    	{
;;;442    		uiTIMxCLK = SystemCoreClock;	// SystemCoreClock / 2;
;;;443    	}
;;;444    
;;;445    	if (_ulFreq < 100)
;;;446    	{
;;;447    		usPrescaler = 10000 - 1;					/* 分频比 = 10000 */
;;;448    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;449    	}
;;;450    	else if (_ulFreq < 3000)
;;;451    	{
;;;452    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;453    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;454    	}
;;;455    	else	/* 大于4K的频率，无需分频 */
;;;456    	{
;;;457    		usPrescaler = 0;					/* 分频比 = 1 */
;;;458    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;459    	}
;;;460    
;;;461    	/* Time base configuration */
;;;462    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;463    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;464    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;465    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;466    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;	
;;;467    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;468    
;;;469    	/* PWM1 Mode configuration: Channel1 */
;;;470    	TIM_OCStructInit(&TIM_OCInitStructure);		/* 初始化结构体成员 */
;;;471    	
;;;472    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
;;;473    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;		/* 和 bsp_SetTIMOutPWM_N() 不同 */
;;;474    	TIM_OCInitStructure.TIM_Pulse = (_ulDutyCycle * usPeriod) / 10000;
;;;475    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;476    	
;;;477    	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;		/* only for TIM1 and TIM8. */	
;;;478    	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;			/* only for TIM1 and TIM8. */		
;;;479    	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;480    	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;481    	
;;;482    	if (_ucChannel == 1)
;;;483    	{
;;;484    		TIM_OC1Init(TIMx, &TIM_OCInitStructure);
;;;485    		TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;486    	}
;;;487    	else if (_ucChannel == 2)
;;;488    	{
;;;489    		TIM_OC2Init(TIMx, &TIM_OCInitStructure);
;;;490    		TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;491    	}
;;;492    	else if (_ucChannel == 3)
;;;493    	{
;;;494    		TIM_OC3Init(TIMx, &TIM_OCInitStructure);
;;;495    		TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;496    	}
;;;497    	else if (_ucChannel == 4)
;;;498    	{
;;;499    		TIM_OC4Init(TIMx, &TIM_OCInitStructure);
;;;500    		TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;501    	}
;;;502    
;;;503    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;504    
;;;505    	/* TIMx enable counter */
;;;506    	TIM_Cmd(TIMx, ENABLE);
;;;507    
;;;508    	/* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;509    	if ((TIMx == TIM1) || (TIMx == TIM8))
;;;510    	{
;;;511    		TIM_CtrlPWMOutputs(TIMx, ENABLE);
;;;512    	}
;;;513    }
000030  b00d              ADD      sp,sp,#0x34
000032  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.54|
000036  f2427010          MOV      r0,#0x2710            ;409
00003a  4582              CMP      r10,r0                ;409
00003c  d10d              BNE      |L6.90|
00003e  2100              MOVS     r1,#0                 ;411
000040  4620              MOV      r0,r4                 ;411
000042  f7fffffe          BL       TIM_Cmd
000046  4658              MOV      r0,r11                ;413
000048  990a              LDR      r1,[sp,#0x28]         ;413
00004a  f7fffffe          BL       bsp_ConfigGpioOut
00004e  2201              MOVS     r2,#1                 ;414
000050  4658              MOV      r0,r11                ;414
000052  990a              LDR      r1,[sp,#0x28]         ;414
000054  f7fffffe          BL       GPIO_WriteBit
000058  e7ea              B        |L6.48|
                  |L6.90|
00005a  462b              MOV      r3,r5                 ;419
00005c  4622              MOV      r2,r4                 ;419
00005e  4658              MOV      r0,r11                ;419
000060  990a              LDR      r1,[sp,#0x28]         ;419
000062  f7fffffe          BL       bsp_ConfigTimGpio
000066  4850              LDR      r0,|L6.424|
000068  4284              CMP      r4,r0                 ;435
00006a  d00b              BEQ      |L6.132|
00006c  484f              LDR      r0,|L6.428|
00006e  4284              CMP      r4,r0                 ;435
000070  d008              BEQ      |L6.132|
000072  484f              LDR      r0,|L6.432|
000074  4284              CMP      r4,r0                 ;435
000076  d005              BEQ      |L6.132|
000078  484e              LDR      r0,|L6.436|
00007a  4284              CMP      r4,r0                 ;435
00007c  d002              BEQ      |L6.132|
00007e  484e              LDR      r0,|L6.440|
000080  4284              CMP      r4,r0                 ;435
000082  d103              BNE      |L6.140|
                  |L6.132|
000084  484d              LDR      r0,|L6.444|
000086  f8d08000          LDR      r8,[r0,#0]            ;438  ; SystemCoreClock
00008a  e002              B        |L6.146|
                  |L6.140|
00008c  484b              LDR      r0,|L6.444|
00008e  f8d08000          LDR      r8,[r0,#0]            ;442  ; SystemCoreClock
                  |L6.146|
000092  2e64              CMP      r6,#0x64              ;445
000094  d20a              BCS      |L6.172|
000096  f242790f          MOV      r9,#0x270f            ;447
00009a  f2427010          MOV      r0,#0x2710            ;448
00009e  fbb8f0f0          UDIV     r0,r8,r0              ;448
0000a2  fbb0f0f6          UDIV     r0,r0,r6              ;448
0000a6  1e40              SUBS     r0,r0,#1              ;448
0000a8  b287              UXTH     r7,r0                 ;448
0000aa  e013              B        |L6.212|
                  |L6.172|
0000ac  f64030b8          MOV      r0,#0xbb8             ;450
0000b0  4286              CMP      r6,r0                 ;450
0000b2  d209              BCS      |L6.200|
0000b4  f04f0963          MOV      r9,#0x63              ;452
0000b8  2064              MOVS     r0,#0x64              ;453
0000ba  fbb8f0f0          UDIV     r0,r8,r0              ;453
0000be  fbb0f0f6          UDIV     r0,r0,r6              ;453
0000c2  1e40              SUBS     r0,r0,#1              ;453
0000c4  b287              UXTH     r7,r0                 ;453
0000c6  e005              B        |L6.212|
                  |L6.200|
0000c8  f04f0900          MOV      r9,#0                 ;457
0000cc  fbb8f0f6          UDIV     r0,r8,r6              ;458
0000d0  1e40              SUBS     r0,r0,#1              ;458
0000d2  b287              UXTH     r7,r0                 ;458
                  |L6.212|
0000d4  9707              STR      r7,[sp,#0x1c]         ;462
0000d6  f8ad9018          STRH     r9,[sp,#0x18]         ;463
0000da  2000              MOVS     r0,#0                 ;464
0000dc  f8ad0020          STRH     r0,[sp,#0x20]         ;464
0000e0  f8ad001a          STRH     r0,[sp,#0x1a]         ;465
0000e4  f88d0022          STRB     r0,[sp,#0x22]         ;466
0000e8  a906              ADD      r1,sp,#0x18           ;467
0000ea  4620              MOV      r0,r4                 ;467
0000ec  f7fffffe          BL       TIM_TimeBaseInit
0000f0  a801              ADD      r0,sp,#4              ;470
0000f2  f7fffffe          BL       TIM_OCStructInit
0000f6  2060              MOVS     r0,#0x60              ;472
0000f8  f8ad0004          STRH     r0,[sp,#4]            ;472
0000fc  2000              MOVS     r0,#0                 ;473
0000fe  f8ad0006          STRH     r0,[sp,#6]            ;473
000102  fb0af007          MUL      r0,r10,r7             ;474
000106  f2427110          MOV      r1,#0x2710            ;474
00010a  fbb0f0f1          UDIV     r0,r0,r1              ;474
00010e  9003              STR      r0,[sp,#0xc]          ;474
000110  2000              MOVS     r0,#0                 ;475
000112  f8ad0010          STRH     r0,[sp,#0x10]         ;475
000116  2004              MOVS     r0,#4                 ;477
000118  f8ad0008          STRH     r0,[sp,#8]            ;477
00011c  2000              MOVS     r0,#0                 ;478
00011e  f8ad0012          STRH     r0,[sp,#0x12]         ;478
000122  f8ad0014          STRH     r0,[sp,#0x14]         ;479
000126  f8ad0016          STRH     r0,[sp,#0x16]         ;480
00012a  2d01              CMP      r5,#1                 ;482
00012c  d108              BNE      |L6.320|
00012e  a901              ADD      r1,sp,#4              ;484
000130  4620              MOV      r0,r4                 ;484
000132  f7fffffe          BL       TIM_OC1Init
000136  2108              MOVS     r1,#8                 ;485
000138  4620              MOV      r0,r4                 ;485
00013a  f7fffffe          BL       TIM_OC1PreloadConfig
00013e  e01f              B        |L6.384|
                  |L6.320|
000140  2d02              CMP      r5,#2                 ;487
000142  d108              BNE      |L6.342|
000144  a901              ADD      r1,sp,#4              ;489
000146  4620              MOV      r0,r4                 ;489
000148  f7fffffe          BL       TIM_OC2Init
00014c  2108              MOVS     r1,#8                 ;490
00014e  4620              MOV      r0,r4                 ;490
000150  f7fffffe          BL       TIM_OC2PreloadConfig
000154  e014              B        |L6.384|
                  |L6.342|
000156  2d03              CMP      r5,#3                 ;492
000158  d108              BNE      |L6.364|
00015a  a901              ADD      r1,sp,#4              ;494
00015c  4620              MOV      r0,r4                 ;494
00015e  f7fffffe          BL       TIM_OC3Init
000162  2108              MOVS     r1,#8                 ;495
000164  4620              MOV      r0,r4                 ;495
000166  f7fffffe          BL       TIM_OC3PreloadConfig
00016a  e009              B        |L6.384|
                  |L6.364|
00016c  2d04              CMP      r5,#4                 ;497
00016e  d107              BNE      |L6.384|
000170  a901              ADD      r1,sp,#4              ;499
000172  4620              MOV      r0,r4                 ;499
000174  f7fffffe          BL       TIM_OC4Init
000178  2108              MOVS     r1,#8                 ;500
00017a  4620              MOV      r0,r4                 ;500
00017c  f7fffffe          BL       TIM_OC4PreloadConfig
                  |L6.384|
000180  2101              MOVS     r1,#1                 ;503
000182  4620              MOV      r0,r4                 ;503
000184  f7fffffe          BL       TIM_ARRPreloadConfig
000188  2101              MOVS     r1,#1                 ;506
00018a  4620              MOV      r0,r4                 ;506
00018c  f7fffffe          BL       TIM_Cmd
000190  4805              LDR      r0,|L6.424|
000192  4284              CMP      r4,r0                 ;509
000194  d002              BEQ      |L6.412|
000196  4805              LDR      r0,|L6.428|
000198  4284              CMP      r4,r0                 ;509
00019a  d103              BNE      |L6.420|
                  |L6.412|
00019c  2101              MOVS     r1,#1                 ;511
00019e  4620              MOV      r0,r4                 ;511
0001a0  f7fffffe          BL       TIM_CtrlPWMOutputs
                  |L6.420|
0001a4  bf00              NOP      
0001a6  e743              B        |L6.48|
;;;514    
                          ENDP

                  |L6.424|
                          DCD      0x40010000
                  |L6.428|
                          DCD      0x40010400
                  |L6.432|
                          DCD      0x40014000
                  |L6.436|
                          DCD      0x40014400
                  |L6.440|
                          DCD      0x40014800
                  |L6.444|
                          DCD      SystemCoreClock

                          AREA ||i.bsp_SetTIMforInt||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMforInt PROC
;;;526    */
;;;527    void bsp_SetTIMforInt(TIM_TypeDef* TIMx, uint32_t _ulFreq, uint8_t _PreemptionPriority, uint8_t _SubPriority)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;528    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;529    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;530    	uint16_t usPeriod;
;;;531    	uint16_t usPrescaler;
;;;532    	uint32_t uiTIMxCLK;
;;;533    
;;;534      	/* 使能TIM时钟 */
;;;535    	if ((TIMx == TIM1) || (TIMx == TIM8))
00000c  4873              LDR      r0,|L7.476|
00000e  4284              CMP      r4,r0
000010  d002              BEQ      |L7.24|
000012  4873              LDR      r0,|L7.480|
000014  4284              CMP      r4,r0
000016  d107              BNE      |L7.40|
                  |L7.24|
;;;536    	{
;;;537    		RCC_APB2PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       bsp_GetRCCofTIM
00001e  4683              MOV      r11,r0
000020  2101              MOVS     r1,#1
000022  f7fffffe          BL       RCC_APB2PeriphClockCmd
000026  e006              B        |L7.54|
                  |L7.40|
;;;538    	}
;;;539    	else
;;;540    	{
;;;541    		RCC_APB1PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       bsp_GetRCCofTIM
00002e  4683              MOV      r11,r0
000030  2101              MOVS     r1,#1
000032  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L7.54|
;;;542    	}
;;;543    
;;;544    	if (_ulFreq == 0)
000036  2d00              CMP      r5,#0
000038  d141              BNE      |L7.190|
;;;545    	{
;;;546    		TIM_Cmd(TIMx, DISABLE);		/* 关闭定时输出 */
00003a  2100              MOVS     r1,#0
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       TIM_Cmd
;;;547    
;;;548    		/* 关闭TIM定时更新中断 (Update) */
;;;549    		{
;;;550    			NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;551    			uint8_t irq = 0;	/* 中断号, 定义在 stm32f4xx.h */
000042  46ab              MOV      r11,r5
;;;552    
;;;553    			if (TIMx == TIM1)
000044  4865              LDR      r0,|L7.476|
000046  4284              CMP      r4,r0
000048  d102              BNE      |L7.80|
;;;554    				irq = TIM1_UP_TIM10_IRQn;
00004a  f04f0b19          MOV      r11,#0x19
00004e  e028              B        |L7.162|
                  |L7.80|
;;;555    			else if (TIMx == TIM2)
000050  f1b44f80          CMP      r4,#0x40000000
000054  d102              BNE      |L7.92|
;;;556    				irq = TIM2_IRQn;
000056  f04f0b1c          MOV      r11,#0x1c
00005a  e022              B        |L7.162|
                  |L7.92|
;;;557    			else if (TIMx == TIM3)
00005c  4861              LDR      r0,|L7.484|
00005e  4284              CMP      r4,r0
000060  d102              BNE      |L7.104|
;;;558    				irq = TIM3_IRQn;
000062  f04f0b1d          MOV      r11,#0x1d
000066  e01c              B        |L7.162|
                  |L7.104|
;;;559    			else if (TIMx == TIM4)
000068  485f              LDR      r0,|L7.488|
00006a  4284              CMP      r4,r0
00006c  d102              BNE      |L7.116|
;;;560    				irq = TIM4_IRQn;
00006e  f04f0b1e          MOV      r11,#0x1e
000072  e016              B        |L7.162|
                  |L7.116|
;;;561    			else if (TIMx == TIM5)
000074  485d              LDR      r0,|L7.492|
000076  4284              CMP      r4,r0
000078  d102              BNE      |L7.128|
;;;562    				irq = TIM5_IRQn;
00007a  f04f0b32          MOV      r11,#0x32
00007e  e010              B        |L7.162|
                  |L7.128|
;;;563    			else if (TIMx == TIM6)
000080  485b              LDR      r0,|L7.496|
000082  4284              CMP      r4,r0
000084  d102              BNE      |L7.140|
;;;564    				irq = TIM6_DAC_IRQn;
000086  f04f0b36          MOV      r11,#0x36
00008a  e00a              B        |L7.162|
                  |L7.140|
;;;565    			else if (TIMx == TIM7)
00008c  4859              LDR      r0,|L7.500|
00008e  4284              CMP      r4,r0
000090  d102              BNE      |L7.152|
;;;566    				irq = TIM7_IRQn;
000092  f04f0b37          MOV      r11,#0x37
000096  e004              B        |L7.162|
                  |L7.152|
;;;567    			else if (TIMx == TIM8)
000098  4851              LDR      r0,|L7.480|
00009a  4284              CMP      r4,r0
00009c  d101              BNE      |L7.162|
;;;568    				irq = TIM8_UP_TIM13_IRQn;
00009e  f04f0b2c          MOV      r11,#0x2c
                  |L7.162|
;;;569    
;;;570    			NVIC_InitStructure.NVIC_IRQChannel = irq;
0000a2  f88db000          STRB     r11,[sp,#0]
;;;571    			NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = _PreemptionPriority;
0000a6  f88d9001          STRB     r9,[sp,#1]
;;;572    			NVIC_InitStructure.NVIC_IRQChannelSubPriority = _SubPriority;
0000aa  f88da002          STRB     r10,[sp,#2]
;;;573    			NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
0000ae  2000              MOVS     r0,#0
0000b0  f88d0003          STRB     r0,[sp,#3]
;;;574    			NVIC_Init(&NVIC_InitStructure);
0000b4  4668              MOV      r0,sp
0000b6  f7fffffe          BL       NVIC_Init
                  |L7.186|
;;;575    		}		
;;;576    		return;
;;;577    	}
;;;578    
;;;579        /*-----------------------------------------------------------------------
;;;580    		system_stm32f4xx.c 文件中 static void SetSysClockToHSE(void) 函数对时钟的配置如下：
;;;581    
;;;582    			//HCLK = SYSCLK 
;;;583    			RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
;;;584    			  
;;;585    			//PCLK2 = HCLK
;;;586    			RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
;;;587    			
;;;588    			//PCLK1 = HCLK
;;;589    			RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
;;;590    
;;;591    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13,TIM14
;;;592    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;593    
;;;594    	----------------------------------------------------------------------- */
;;;595    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;596    	{
;;;597    		/* APB2 定时器 */
;;;598    		uiTIMxCLK = SystemCoreClock;
;;;599    	}
;;;600    	else	/* APB1 定时器 .  */
;;;601    	{
;;;602    		uiTIMxCLK = SystemCoreClock;	// SystemCoreClock / 2;
;;;603    	}
;;;604    
;;;605    	if (_ulFreq < 100)
;;;606    	{
;;;607    		usPrescaler = 10000 - 1;					/* 分频比 = 1000 */
;;;608    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;609    	}
;;;610    	else if (_ulFreq < 3000)
;;;611    	{
;;;612    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;613    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;614    	}
;;;615    	else	/* 大于4K的频率，无需分频 */
;;;616    	{
;;;617    		usPrescaler = 0;					/* 分频比 = 1 */
;;;618    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;619    	}
;;;620    
;;;621    	/* Time base configuration */
;;;622    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;623    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;624    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;625    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;626    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
;;;627    
;;;628    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;629    
;;;630    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;631    
;;;632    	/* TIM Interrupts enable */
;;;633    	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
;;;634    
;;;635    	/* TIMx enable counter */
;;;636    	TIM_Cmd(TIMx, ENABLE);
;;;637    
;;;638    	/* 配置TIM定时更新中断 (Update) */
;;;639    	{
;;;640    		NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;641    		uint8_t irq = 0;	/* 中断号, 定义在 stm32f4xx.h */
;;;642    
;;;643    		if (TIMx == TIM1)
;;;644    			irq = TIM1_UP_TIM10_IRQn;
;;;645    		else if (TIMx == TIM2)
;;;646    			irq = TIM2_IRQn;
;;;647    		else if (TIMx == TIM3)
;;;648    			irq = TIM3_IRQn;
;;;649    		else if (TIMx == TIM4)
;;;650    			irq = TIM4_IRQn;
;;;651    		else if (TIMx == TIM5)
;;;652    			irq = TIM5_IRQn;
;;;653    		else if (TIMx == TIM6)
;;;654    			irq = TIM6_DAC_IRQn;
;;;655    		else if (TIMx == TIM7)
;;;656    			irq = TIM7_IRQn;
;;;657    		else if (TIMx == TIM8)
;;;658    			irq = TIM8_UP_TIM13_IRQn;
;;;659    
;;;660    		NVIC_InitStructure.NVIC_IRQChannel = irq;
;;;661    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = _PreemptionPriority;
;;;662    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = _SubPriority;
;;;663    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;664    		NVIC_Init(&NVIC_InitStructure);
;;;665    	}
;;;666    }
0000ba  e8bd9fff          POP      {r0-r12,pc}
                  |L7.190|
0000be  4847              LDR      r0,|L7.476|
0000c0  4284              CMP      r4,r0                 ;595
0000c2  d00b              BEQ      |L7.220|
0000c4  4846              LDR      r0,|L7.480|
0000c6  4284              CMP      r4,r0                 ;595
0000c8  d008              BEQ      |L7.220|
0000ca  484b              LDR      r0,|L7.504|
0000cc  4284              CMP      r4,r0                 ;595
0000ce  d005              BEQ      |L7.220|
0000d0  484a              LDR      r0,|L7.508|
0000d2  4284              CMP      r4,r0                 ;595
0000d4  d002              BEQ      |L7.220|
0000d6  484a              LDR      r0,|L7.512|
0000d8  4284              CMP      r4,r0                 ;595
0000da  d102              BNE      |L7.226|
                  |L7.220|
0000dc  4849              LDR      r0,|L7.516|
0000de  6806              LDR      r6,[r0,#0]            ;598  ; SystemCoreClock
0000e0  e001              B        |L7.230|
                  |L7.226|
0000e2  4848              LDR      r0,|L7.516|
0000e4  6806              LDR      r6,[r0,#0]            ;602  ; SystemCoreClock
                  |L7.230|
0000e6  2d64              CMP      r5,#0x64              ;605
0000e8  d20a              BCS      |L7.256|
0000ea  f242780f          MOV      r8,#0x270f            ;607
0000ee  f2427010          MOV      r0,#0x2710            ;608
0000f2  fbb6f0f0          UDIV     r0,r6,r0              ;608
0000f6  fbb0f0f5          UDIV     r0,r0,r5              ;608
0000fa  1e40              SUBS     r0,r0,#1              ;608
0000fc  b287              UXTH     r7,r0                 ;608
0000fe  e013              B        |L7.296|
                  |L7.256|
000100  f64030b8          MOV      r0,#0xbb8             ;610
000104  4285              CMP      r5,r0                 ;610
000106  d209              BCS      |L7.284|
000108  f04f0863          MOV      r8,#0x63              ;612
00010c  2064              MOVS     r0,#0x64              ;613
00010e  fbb6f0f0          UDIV     r0,r6,r0              ;613
000112  fbb0f0f5          UDIV     r0,r0,r5              ;613
000116  1e40              SUBS     r0,r0,#1              ;613
000118  b287              UXTH     r7,r0                 ;613
00011a  e005              B        |L7.296|
                  |L7.284|
00011c  f04f0800          MOV      r8,#0                 ;617
000120  fbb6f0f5          UDIV     r0,r6,r5              ;618
000124  1e40              SUBS     r0,r0,#1              ;618
000126  b287              UXTH     r7,r0                 ;618
                  |L7.296|
000128  9702              STR      r7,[sp,#8]            ;622
00012a  f8ad8004          STRH     r8,[sp,#4]            ;623
00012e  2000              MOVS     r0,#0                 ;624
000130  f8ad000c          STRH     r0,[sp,#0xc]          ;624
000134  f8ad0006          STRH     r0,[sp,#6]            ;625
000138  f88d000e          STRB     r0,[sp,#0xe]          ;626
00013c  a901              ADD      r1,sp,#4              ;628
00013e  4620              MOV      r0,r4                 ;628
000140  f7fffffe          BL       TIM_TimeBaseInit
000144  2101              MOVS     r1,#1                 ;630
000146  4620              MOV      r0,r4                 ;630
000148  f7fffffe          BL       TIM_ARRPreloadConfig
00014c  2201              MOVS     r2,#1                 ;633
00014e  4611              MOV      r1,r2                 ;633
000150  4620              MOV      r0,r4                 ;633
000152  f7fffffe          BL       TIM_ITConfig
000156  2101              MOVS     r1,#1                 ;636
000158  4620              MOV      r0,r4                 ;636
00015a  f7fffffe          BL       TIM_Cmd
00015e  f04f0b00          MOV      r11,#0                ;641
000162  481e              LDR      r0,|L7.476|
000164  4284              CMP      r4,r0                 ;643
000166  d102              BNE      |L7.366|
000168  f04f0b19          MOV      r11,#0x19             ;644
00016c  e028              B        |L7.448|
                  |L7.366|
00016e  f1b44f80          CMP      r4,#0x40000000        ;645
000172  d102              BNE      |L7.378|
000174  f04f0b1c          MOV      r11,#0x1c             ;646
000178  e022              B        |L7.448|
                  |L7.378|
00017a  481a              LDR      r0,|L7.484|
00017c  4284              CMP      r4,r0                 ;647
00017e  d102              BNE      |L7.390|
000180  f04f0b1d          MOV      r11,#0x1d             ;648
000184  e01c              B        |L7.448|
                  |L7.390|
000186  4818              LDR      r0,|L7.488|
000188  4284              CMP      r4,r0                 ;649
00018a  d102              BNE      |L7.402|
00018c  f04f0b1e          MOV      r11,#0x1e             ;650
000190  e016              B        |L7.448|
                  |L7.402|
000192  4816              LDR      r0,|L7.492|
000194  4284              CMP      r4,r0                 ;651
000196  d102              BNE      |L7.414|
000198  f04f0b32          MOV      r11,#0x32             ;652
00019c  e010              B        |L7.448|
                  |L7.414|
00019e  4814              LDR      r0,|L7.496|
0001a0  4284              CMP      r4,r0                 ;653
0001a2  d102              BNE      |L7.426|
0001a4  f04f0b36          MOV      r11,#0x36             ;654
0001a8  e00a              B        |L7.448|
                  |L7.426|
0001aa  4812              LDR      r0,|L7.500|
0001ac  4284              CMP      r4,r0                 ;655
0001ae  d102              BNE      |L7.438|
0001b0  f04f0b37          MOV      r11,#0x37             ;656
0001b4  e004              B        |L7.448|
                  |L7.438|
0001b6  480a              LDR      r0,|L7.480|
0001b8  4284              CMP      r4,r0                 ;657
0001ba  d101              BNE      |L7.448|
0001bc  f04f0b2c          MOV      r11,#0x2c             ;658
                  |L7.448|
0001c0  f88db000          STRB     r11,[sp,#0]           ;660
0001c4  f88d9001          STRB     r9,[sp,#1]            ;661
0001c8  f88da002          STRB     r10,[sp,#2]           ;662
0001cc  2001              MOVS     r0,#1                 ;663
0001ce  f88d0003          STRB     r0,[sp,#3]            ;663
0001d2  4668              MOV      r0,sp                 ;664
0001d4  f7fffffe          BL       NVIC_Init
0001d8  bf00              NOP      
0001da  e76e              B        |L7.186|
;;;667    
                          ENDP

                  |L7.476|
                          DCD      0x40010000
                  |L7.480|
                          DCD      0x40010400
                  |L7.484|
                          DCD      0x40000400
                  |L7.488|
                          DCD      0x40000800
                  |L7.492|
                          DCD      0x40000c00
                  |L7.496|
                          DCD      0x40001000
                  |L7.500|
                          DCD      0x40001400
                  |L7.504|
                          DCD      0x40014000
                  |L7.508|
                          DCD      0x40014400
                  |L7.512|
                          DCD      0x40014800
                  |L7.516|
                          DCD      SystemCoreClock

;*** Start embedded assembler ***

#line 1 "..\\User\\bsp\\bsp_tim_pwm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_d7165983____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_bsp_tim_pwm_c_d7165983____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_d7165983____REVSH|
#line 402
|__asm___13_bsp_tim_pwm_c_d7165983____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_d7165983____RRX|
#line 587
|__asm___13_bsp_tim_pwm_c_d7165983____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
