; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\lcdconf.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\lcdconf.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FatFS\src -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\User -I..\User\bsp -I..\User\emWinTask -I..\STemWin\Config -I..\STemWin\DisplayDriver -I..\STemWin\inc -I..\STemWin\OS -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\lcdconf.crf ..\STemWin\Config\LCDConf.c]
                          THUMB

                          AREA ||i.LCD_X_Config||, CODE, READONLY, ALIGN=2

                  LCD_X_Config PROC
;;;123    */
;;;124    void LCD_X_Config(void) {
000000  b570              PUSH     {r4-r6,lr}
;;;125    	/* Set display driver and color conversion for 1st layer */
;;;126        GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER, COLOR_CONVERSION, 0, 0);
000002  2300              MOVS     r3,#0
000004  461a              MOV      r2,r3
000006  490d              LDR      r1,|L1.60|
000008  480d              LDR      r0,|L1.64|
00000a  f7fffffe          BL       GUI_DEVICE_CreateAndLink
;;;127    
;;;128    	LCD_SetSizeEx    (0, LCD_GetWidth(), LCD_GetHeight());
00000e  f7fffffe          BL       LCD_GetHeight
000012  4604              MOV      r4,r0
000014  f7fffffe          BL       LCD_GetWidth
000018  4605              MOV      r5,r0
00001a  4622              MOV      r2,r4
00001c  4629              MOV      r1,r5
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       LCD_SetSizeEx
;;;129    	LCD_SetVSizeEx   (0, LCD_GetWidth(), LCD_GetHeight());
000024  f7fffffe          BL       LCD_GetHeight
000028  4604              MOV      r4,r0
00002a  f7fffffe          BL       LCD_GetWidth
00002e  4605              MOV      r5,r0
000030  4622              MOV      r2,r4
000032  4629              MOV      r1,r5
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       LCD_SetVSizeEx
;;;130    }
00003a  bd70              POP      {r4-r6,pc}
;;;131    
                          ENDP

                  |L1.60|
                          DCD      LCD_API_ColorConv_M565
                  |L1.64|
                          DCD      GUIDRV_Template_API

                          AREA ||i.LCD_X_DisplayDriver||, CODE, READONLY, ALIGN=1

                  LCD_X_DisplayDriver PROC
;;;154    */
;;;155    int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
000000  b510              PUSH     {r4,lr}
;;;156    {
000002  4603              MOV      r3,r0
000004  4614              MOV      r4,r2
;;;157    	int r;
;;;158    	switch (Cmd) 
000006  2904              CMP      r1,#4
000008  d016              BEQ      |L2.56|
00000a  dc06              BGT      |L2.26|
00000c  2901              CMP      r1,#1
00000e  d00b              BEQ      |L2.40|
000010  2902              CMP      r1,#2
000012  d00b              BEQ      |L2.44|
000014  2903              CMP      r1,#3
000016  d115              BNE      |L2.68|
000018  e00a              B        |L2.48|
                  |L2.26|
00001a  2905              CMP      r1,#5
00001c  d00e              BEQ      |L2.60|
00001e  2906              CMP      r1,#6
000020  d00e              BEQ      |L2.64|
000022  290e              CMP      r1,#0xe
000024  d10e              BNE      |L2.68|
000026  e005              B        |L2.52|
                  |L2.40|
;;;159    	{
;;;160    		case LCD_X_INITCONTROLLER: 
;;;161    		{
;;;162    			//
;;;163    			// Called during the initialization process in order to set up the
;;;164    			// display controller and put it into operation. If the display
;;;165    			// controller is not initialized by any external routine this needs
;;;166    			// to be adapted by the customer...
;;;167    			//
;;;168    			// ...
;;;169    			//  已经在前面初始化了，这里不再初始化
;;;170    			
;;;171    			return 0;
000028  2000              MOVS     r0,#0
                  |L2.42|
;;;172    		}
;;;173    		case LCD_X_SETVRAMADDR: 
;;;174    		{
;;;175    			//
;;;176    			// Required for setting the address of the video RAM for drivers
;;;177    			// with memory mapped video RAM which is passed in the 'pVRAM' element of p
;;;178    			//
;;;179    			//...
;;;180    			return 0;
;;;181    		}
;;;182    		case LCD_X_SETORG: 
;;;183    		{
;;;184    			//
;;;185    			// Required for setting the display origin which is passed in the 'xPos' and 'yPos' element of p
;;;186    			//
;;;187    
;;;188    			//...
;;;189    			return 0;
;;;190    		}
;;;191    		case LCD_X_SHOWBUFFER: 
;;;192    		{
;;;193    			//
;;;194    			// Required if multiple buffers are used. The 'Index' element of p contains the buffer index.
;;;195    			//
;;;196    			//...
;;;197    			return 0;
;;;198    		}
;;;199    		case LCD_X_SETLUTENTRY: 
;;;200    		{
;;;201    			//
;;;202    			// Required for setting a lookup table entry which is passed in the 'Pos' and 'Color' element of p
;;;203    			//
;;;204    			//...
;;;205    			return 0;
;;;206    		}
;;;207    		case LCD_X_ON: 
;;;208    		{
;;;209    			//
;;;210    			// Required if the display controller should support switching on and off
;;;211    			//
;;;212    			return 0;
;;;213    		}
;;;214    		case LCD_X_OFF: 
;;;215    		{
;;;216    			//
;;;217    			// Required if the display controller should support switching on and off
;;;218    			//
;;;219    			// ...
;;;220    			return 0;
;;;221    		}
;;;222    		default:
;;;223    		r = -1;
;;;224    	}
;;;225    	return r;
;;;226    }
00002a  bd10              POP      {r4,pc}
                  |L2.44|
00002c  2000              MOVS     r0,#0                 ;180
00002e  e7fc              B        |L2.42|
                  |L2.48|
000030  2000              MOVS     r0,#0                 ;189
000032  e7fa              B        |L2.42|
                  |L2.52|
000034  2000              MOVS     r0,#0                 ;197
000036  e7f8              B        |L2.42|
                  |L2.56|
000038  2000              MOVS     r0,#0                 ;205
00003a  e7f6              B        |L2.42|
                  |L2.60|
00003c  2000              MOVS     r0,#0                 ;212
00003e  e7f4              B        |L2.42|
                  |L2.64|
000040  2000              MOVS     r0,#0                 ;220
000042  e7f2              B        |L2.42|
                  |L2.68|
000044  f04f32ff          MOV      r2,#0xffffffff        ;223
000048  bf00              NOP                            ;158
00004a  bf00              NOP                            ;158
00004c  4610              MOV      r0,r2                 ;225
00004e  e7ec              B        |L2.42|
;;;227    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\STemWin\\Config\\LCDConf.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_LCDConf_c_0a169049____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_LCDConf_c_0a169049____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_LCDConf_c_0a169049____REVSH|
#line 402
|__asm___9_LCDConf_c_0a169049____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_LCDConf_c_0a169049____RRX|
#line 587
|__asm___9_LCDConf_c_0a169049____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
