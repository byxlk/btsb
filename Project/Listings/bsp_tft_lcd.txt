; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\bsp_tft_lcd.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\bsp_tft_lcd.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\User\bsp -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\FatFS\src -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\bsp_tft_lcd.crf ..\User\bsp\bsp_tft_lcd.c]
                          THUMB

                          AREA ||i.LCD_Blend565||, CODE, READONLY, ALIGN=2

                  LCD_Blend565 PROC
;;;1043   */
;;;1044   uint16_t LCD_Blend565(uint16_t src, uint16_t dst, uint8_t alpha)
000000  b570              PUSH     {r4-r6,lr}
;;;1045   {
000002  4603              MOV      r3,r0
;;;1046   	uint32_t src2;
;;;1047   	uint32_t dst2;
;;;1048   
;;;1049   	src2 = ((src << 16) |src) & 0x07E0F81F;
000004  ea434003          ORR      r0,r3,r3,LSL #16
000008  4e08              LDR      r6,|L1.44|
00000a  ea000406          AND      r4,r0,r6
;;;1050   	dst2 = ((dst << 16) | dst) & 0x07E0F81F;
00000e  ea414001          ORR      r0,r1,r1,LSL #16
000012  ea000506          AND      r5,r0,r6
;;;1051   	dst2 = ((((dst2 - src2) * alpha) >> 5) + src2) & 0x07E0F81F;
000016  1b28              SUBS     r0,r5,r4
000018  4350              MULS     r0,r2,r0
00001a  eb041050          ADD      r0,r4,r0,LSR #5
00001e  ea000506          AND      r5,r0,r6
;;;1052   	return (dst2 >> 16) | dst2;
000022  ea454015          ORR      r0,r5,r5,LSR #16
000026  b280              UXTH     r0,r0
;;;1053   }
000028  bd70              POP      {r4-r6,pc}
;;;1054   
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      0x07e0f81f

                          AREA ||i.LCD_ButtonTouchDown||, CODE, READONLY, ALIGN=1

                  LCD_ButtonTouchDown PROC
;;;1757   */
;;;1758   uint8_t LCD_ButtonTouchDown(BUTTON_T *_btn, uint16_t _usX, uint16_t _usY)
000000  b570              PUSH     {r4-r6,lr}
;;;1759   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1760   	if ((_usX > _btn->Left) && (_usX < _btn->Left + _btn->Width)
000008  8860              LDRH     r0,[r4,#2]
00000a  42a8              CMP      r0,r5
00000c  da13              BGE      |L2.54|
00000e  8860              LDRH     r0,[r4,#2]
000010  8921              LDRH     r1,[r4,#8]
000012  4408              ADD      r0,r0,r1
000014  42a8              CMP      r0,r5
000016  dd0e              BLE      |L2.54|
;;;1761   		&& (_usY > _btn->Top) && (_usY < _btn->Top + _btn->Height))
000018  88a0              LDRH     r0,[r4,#4]
00001a  42b0              CMP      r0,r6
00001c  da0b              BGE      |L2.54|
00001e  88a0              LDRH     r0,[r4,#4]
000020  88e1              LDRH     r1,[r4,#6]
000022  4408              ADD      r0,r0,r1
000024  42b0              CMP      r0,r6
000026  dd06              BLE      |L2.54|
;;;1762   	{
;;;1763   		BUTTON_BEEP();	/* 按键提示音 bsp_tft_lcd.h 文件开头可以使能和关闭 */
;;;1764   		_btn->Focus = 1;
000028  2001              MOVS     r0,#1
00002a  7520              STRB     r0,[r4,#0x14]
;;;1765   		LCD_DrawButton(_btn);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       LCD_DrawButton
;;;1766   		return 1;
000032  2001              MOVS     r0,#1
                  |L2.52|
;;;1767   	}
;;;1768   	else
;;;1769   	{
;;;1770   		return 0;
;;;1771   	}
;;;1772   }
000034  bd70              POP      {r4-r6,pc}
                  |L2.54|
000036  2000              MOVS     r0,#0                 ;1770
000038  e7fc              B        |L2.52|
;;;1773   
                          ENDP


                          AREA ||i.LCD_ButtonTouchRelease||, CODE, READONLY, ALIGN=1

                  LCD_ButtonTouchRelease PROC
;;;1782   */
;;;1783   uint8_t LCD_ButtonTouchRelease(BUTTON_T *_btn, uint16_t _usX, uint16_t _usY)
000000  b570              PUSH     {r4-r6,lr}
;;;1784   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1785   	_btn->Focus = 0;
000008  2000              MOVS     r0,#0
00000a  7520              STRB     r0,[r4,#0x14]
;;;1786   	LCD_DrawButton(_btn);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LCD_DrawButton
;;;1787   
;;;1788   	if ((_usX > _btn->Left) && (_usX < _btn->Left + _btn->Width)
000012  8860              LDRH     r0,[r4,#2]
000014  42a8              CMP      r0,r5
000016  da0e              BGE      |L3.54|
000018  8860              LDRH     r0,[r4,#2]
00001a  8921              LDRH     r1,[r4,#8]
00001c  4408              ADD      r0,r0,r1
00001e  42a8              CMP      r0,r5
000020  dd09              BLE      |L3.54|
;;;1789   		&& (_usY > _btn->Top) && (_usY < _btn->Top + _btn->Height))
000022  88a0              LDRH     r0,[r4,#4]
000024  42b0              CMP      r0,r6
000026  da06              BGE      |L3.54|
000028  88a0              LDRH     r0,[r4,#4]
00002a  88e1              LDRH     r1,[r4,#6]
00002c  4408              ADD      r0,r0,r1
00002e  42b0              CMP      r0,r6
000030  dd01              BLE      |L3.54|
;;;1790   	{
;;;1791   		return 1;
000032  2001              MOVS     r0,#1
                  |L3.52|
;;;1792   	}
;;;1793   	else
;;;1794   	{
;;;1795   		return 0;
;;;1796   	}
;;;1797   }
000034  bd70              POP      {r4-r6,pc}
                  |L3.54|
000036  2000              MOVS     r0,#0                 ;1795
000038  e7fc              B        |L3.52|
;;;1798   
                          ENDP


                          AREA ||i.LCD_ClrScr||, CODE, READONLY, ALIGN=1

                  LCD_ClrScr PROC
;;;228    */
;;;229    void LCD_ClrScr(uint16_t _usColor)
000000  b510              PUSH     {r4,lr}
;;;230    {
000002  4604              MOV      r4,r0
;;;231        ST7789V_ClrScr(_usColor);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       ST7789V_ClrScr
;;;232    }
00000a  bd10              POP      {r4,pc}
;;;233    
                          ENDP


                          AREA ||i.LCD_CtrlLinesConfig||, CODE, READONLY, ALIGN=2

                  LCD_CtrlLinesConfig PROC
;;;1598   */
;;;1599   static void LCD_CtrlLinesConfig(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;1600   {
;;;1601   	GPIO_InitTypeDef GPIO_InitStructure;
;;;1602   
;;;1603   	/* 使能 GPIOD */
;;;1604   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);
000002  2101              MOVS     r1,#1
000004  2006              MOVS     r0,#6
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;1605   
;;;1606   	/*  GPIO 配置为复用推挽输出 */
;;;1607   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0005          STRB     r0,[sp,#5]
;;;1608   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000010  2001              MOVS     r0,#1
000012  f88d0004          STRB     r0,[sp,#4]
;;;1609   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; 
000016  2000              MOVS     r0,#0
000018  f88d0006          STRB     r0,[sp,#6]
;;;1610   	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
00001c  f88d0007          STRB     r0,[sp,#7]
;;;1611   
;;;1612   	/* LCD Data Bus */
;;;1613   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0          /* D0 */
000020  20ff              MOVS     r0,#0xff
000022  9000              STR      r0,[sp,#0]
;;;1614   		                        | GPIO_Pin_1          /* D1 */ 
;;;1615   		                        | GPIO_Pin_2          /* D2 */
;;;1616   		                        | GPIO_Pin_3          /* D3 */
;;;1617   		                        | GPIO_Pin_4          /* D4 */
;;;1618   		                        | GPIO_Pin_5          /* D5 */
;;;1619   		                        | GPIO_Pin_6          /* D6 */
;;;1620   		                        | GPIO_Pin_7;         /* D7 */
;;;1621   	GPIO_Init(GPIOB, &GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  4805              LDR      r0,|L5.60|
000028  f7fffffe          BL       GPIO_Init
;;;1622   
;;;1623           /* LCD CMD Bus */
;;;1624   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6          /* RD */
00002c  f44f7070          MOV      r0,#0x3c0
000030  9000              STR      r0,[sp,#0]
;;;1625   		                        | GPIO_Pin_7          /* WD */ 
;;;1626   		                        | GPIO_Pin_8          /* RS */
;;;1627   		                        | GPIO_Pin_9;         /* CS */
;;;1628   	GPIO_Init(GPIOC, &GPIO_InitStructure);
000032  4669              MOV      r1,sp
000034  4802              LDR      r0,|L5.64|
000036  f7fffffe          BL       GPIO_Init
;;;1629   }
00003a  bd1c              POP      {r2-r4,pc}
;;;1630   
                          ENDP

                  |L5.60|
                          DCD      0x40020400
                  |L5.64|
                          DCD      0x40020800

                          AREA ||i.LCD_DispControl||, CODE, READONLY, ALIGN=1

                  LCD_DispControl PROC
;;;1552   */
;;;1553   void LCD_DispControl(void *_pControl)
000000  b570              PUSH     {r4-r6,lr}
;;;1554   {
000002  4604              MOV      r4,r0
;;;1555   	uint8_t id;
;;;1556   
;;;1557   	id = *(uint8_t *)_pControl;	/* 读取ID */
000004  7825              LDRB     r5,[r4,#0]
;;;1558   
;;;1559   	switch (id)
000006  2d08              CMP      r5,#8
000008  d21e              BCS      |L6.72|
00000a  e8dff005          TBB      [pc,r5]
00000e  1d04              DCB      0x1d,0x04
000010  05090d11          DCB      0x05,0x09,0x0d,0x11
000014  1519              DCB      0x15,0x19
;;;1560   	{
;;;1561   		case ID_ICON:
;;;1562   			//void LCD_DrawIcon(const ICON_T *_tIcon, FONT_T *_tFont, uint8_t _ucFocusMode);
;;;1563   			break;
000016  e017              B        |L6.72|
;;;1564   
;;;1565   		case ID_WIN:
;;;1566   			LCD_DrawWin((WIN_T *)_pControl);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       LCD_DrawWin
;;;1567   			break;
00001e  e013              B        |L6.72|
;;;1568   
;;;1569   		case ID_LABEL:
;;;1570   			LCD_DrawLabel((LABEL_T *)_pControl);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       LCD_DrawLabel
;;;1571   			break;
000026  e00f              B        |L6.72|
;;;1572   
;;;1573   		case ID_BUTTON:
;;;1574   			LCD_DrawButton((BUTTON_T *)_pControl);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       LCD_DrawButton
;;;1575   			break;
00002e  e00b              B        |L6.72|
;;;1576   
;;;1577   		case ID_CHECK:
;;;1578   			LCD_DrawCheckBox((CHECK_T *)_pControl);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       LCD_DrawCheckBox
;;;1579   			break;
000036  e007              B        |L6.72|
;;;1580   
;;;1581   		case ID_EDIT:
;;;1582   			LCD_DrawEdit((EDIT_T *)_pControl);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       LCD_DrawEdit
;;;1583   			break;
00003e  e003              B        |L6.72|
;;;1584   
;;;1585   		case ID_GROUP:
;;;1586   			LCD_DrawGroupBox((GROUP_T *)_pControl);
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       LCD_DrawGroupBox
;;;1587   			break;
000046  bf00              NOP      
                  |L6.72|
000048  bf00              NOP                            ;1563
;;;1588   	}
;;;1589   }
00004a  bd70              POP      {r4-r6,pc}
;;;1590   
                          ENDP


                          AREA ||i.LCD_DispOff||, CODE, READONLY, ALIGN=1

                  LCD_DispOff PROC
;;;215    */
;;;216    void LCD_DispOff(void)
000000  b510              PUSH     {r4,lr}
;;;217    {
;;;218    	ST7789V_DispOff();
000002  f7fffffe          BL       ST7789V_DispOff
;;;219    }
000006  bd10              POP      {r4,pc}
;;;220    
                          ENDP


                          AREA ||i.LCD_DispOn||, CODE, READONLY, ALIGN=1

                  LCD_DispOn PROC
;;;202    */
;;;203    void LCD_DispOn(void)
000000  b510              PUSH     {r4,lr}
;;;204    {
;;;205    	ST7789V_DispOn();
000002  f7fffffe          BL       ST7789V_DispOn
;;;206    }
000006  bd10              POP      {r4,pc}
;;;207    
                          ENDP


                          AREA ||i.LCD_DispStr||, CODE, READONLY, ALIGN=1

                  LCD_DispStr PROC
;;;245    */
;;;246    void LCD_DispStr(uint16_t _usX, uint16_t _usY, char *_ptr, FONT_T *_tFont)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;247    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;248    	LCD_DispStrEx(_usX, _usY, _ptr, _tFont, 0, 0);
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  463b              MOV      r3,r7
000012  4632              MOV      r2,r6
000014  4629              MOV      r1,r5
000016  9001              STR      r0,[sp,#4]
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       LCD_DispStrEx
;;;249    }
00001e  e8bd81fc          POP      {r2-r8,pc}
;;;250    
                          ENDP


                          AREA ||i.LCD_DispStrEx||, CODE, READONLY, ALIGN=1

                  LCD_DispStrEx PROC
;;;571    */
;;;572    void LCD_DispStrEx(uint16_t _usX, uint16_t _usY, char *_ptr, FONT_T *_tFont, uint16_t _Width,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;573    	uint8_t _Align)
;;;574    {
000004  b0ab              SUB      sp,sp,#0xac
000006  4607              MOV      r7,r0
000008  4616              MOV      r6,r2
00000a  461c              MOV      r4,r3
00000c  f8dd80e0          LDR      r8,[sp,#0xe0]
;;;575    	uint32_t i;
;;;576    	uint8_t code1;
;;;577    	uint8_t code2;
;;;578    	uint8_t buf[32 * 32 / 8];	/* 最大支持24点阵汉字 */
;;;579    	uint8_t width;
;;;580    	uint16_t m;
;;;581    	uint8_t font_width = 0;
000010  f04f0b00          MOV      r11,#0
;;;582    	uint8_t font_height = 0;
000014  2000              MOVS     r0,#0
000016  9006              STR      r0,[sp,#0x18]
;;;583    	uint16_t x, y;
;;;584    	uint16_t offset;
;;;585    	uint16_t str_width;	/* 字符串实际宽度  */
;;;586    	uint8_t ra8875_use = 0;
000018  9003              STR      r0,[sp,#0xc]
;;;587    	//uint8_t ra8875_font_code = 0;
;;;588    
;;;589    	switch (_tFont->FontCode)
00001a  7820              LDRB     r0,[r4,#0]
00001c  2807              CMP      r0,#7
00001e  d21e              BCS      |L10.94|
000020  e8dff000          TBB      [pc,r0]
000024  04080c10          DCB      0x04,0x08,0x0c,0x10
000028  14171a00          DCB      0x14,0x17,0x1a,0x00
;;;590    	{
;;;591    		case FC_ST_12:		/* 12点阵 */
;;;592    			font_height = 12;
00002c  200c              MOVS     r0,#0xc
00002e  9006              STR      r0,[sp,#0x18]
;;;593    			font_width = 12;
000030  4683              MOV      r11,r0
;;;594    			break;
000032  e017              B        |L10.100|
;;;595    		
;;;596    		case FC_ST_16:
;;;597    			font_height = 16;
000034  2010              MOVS     r0,#0x10
000036  9006              STR      r0,[sp,#0x18]
;;;598    			font_width = 16;
000038  4683              MOV      r11,r0
;;;599    			break;
00003a  e013              B        |L10.100|
;;;600    
;;;601    		case FC_ST_24:
;;;602    			font_height = 24;
00003c  2018              MOVS     r0,#0x18
00003e  9006              STR      r0,[sp,#0x18]
;;;603    			font_width = 24;
000040  4683              MOV      r11,r0
;;;604    			break;
000042  e00f              B        |L10.100|
;;;605    						
;;;606    		case FC_ST_32:	
;;;607    			font_height = 32;
000044  2020              MOVS     r0,#0x20
000046  9006              STR      r0,[sp,#0x18]
;;;608    			font_width = 32;
000048  4683              MOV      r11,r0
;;;609    			break;					
00004a  e00b              B        |L10.100|
;;;610    		
;;;611    		case FC_RA8875_16:
;;;612    			//ra8875_font_code = RA_FONT_16;
;;;613    			ra8875_use = 1;	/* 表示用RA8875字库 */
00004c  2001              MOVS     r0,#1
00004e  9003              STR      r0,[sp,#0xc]
;;;614    			break;
000050  e008              B        |L10.100|
;;;615    			
;;;616    		case FC_RA8875_24:
;;;617    			//ra8875_font_code = RA_FONT_24;
;;;618    			ra8875_use = 1;	/* 表示用RA8875字库 */
000052  2001              MOVS     r0,#1
000054  9003              STR      r0,[sp,#0xc]
;;;619    			break;
000056  e005              B        |L10.100|
;;;620    						
;;;621    		case FC_RA8875_32:
;;;622    			//ra8875_font_code = RA_FONT_32;
;;;623    			ra8875_use = 1;	/* 表示用RA8875字库 */
000058  2001              MOVS     r0,#1
00005a  9003              STR      r0,[sp,#0xc]
;;;624    			break;
00005c  e002              B        |L10.100|
                  |L10.94|
;;;625    		
;;;626    		default:
;;;627    			return;
;;;628    	}
;;;629    	
;;;630    	str_width = LCD_GetStrWidth(_ptr, _tFont);	/* 计算字符串实际宽度(RA8875内部ASCII点阵宽度为变长 */
;;;631    	offset = 0;
;;;632    	if (_Width > str_width)
;;;633    	{
;;;634    		if (_Align == ALIGN_RIGHT)	/* 右对齐 */
;;;635    		{
;;;636    			offset = _Width - str_width;
;;;637    		}
;;;638    		else if (_Align == ALIGN_CENTER)	/* 左对齐 */
;;;639    		{
;;;640    			offset = (_Width - str_width) / 2;
;;;641    		}
;;;642    		else	/* 左对齐 ALIGN_LEFT */
;;;643    		{
;;;644    			;
;;;645    		}
;;;646    	}
;;;647    
;;;648    	/* 左侧填背景色, 中间对齐和右边对齐  */
;;;649    	if (offset > 0)
;;;650    	{
;;;651    		LCD_Fill_Rect(_usX, _usY, LCD_GetFontHeight(_tFont), offset,  _tFont->BackColor);
;;;652    		_usX += offset;
;;;653    	}
;;;654    	
;;;655    	/* 右侧填背景色 */
;;;656    	if (_Width > str_width)
;;;657    	{
;;;658    		LCD_Fill_Rect(_usX + str_width, _usY, LCD_GetFontHeight(_tFont), _Width - str_width - offset,  _tFont->BackColor);
;;;659    	}
;;;660    	
;;;661    	if (ra8875_use == 1)	/* 使用RA8875外挂的字库芯片 */
;;;662    	{
;;;663    		//RA8875_SetFrontColor(_tFont->FrontColor);			/* 设置字体前景色 */
;;;664    		//RA8875_SetBackColor(_tFont->BackColor);				/* 设置字体背景色 */
;;;665    		//RA8875_SetFont(ra8875_font_code, 0, _tFont->Space);	/* 字体代码，行间距，字间距 */
;;;666    		//RA8875_DispStr(_usX, _usY, _ptr);
;;;667    	}
;;;668    	else	/* 使用CPU内部字库. 点阵信息由CPU读取 */
;;;669    	{
;;;670    		/* 开始循环处理字符 */
;;;671    		while (*_ptr != 0)
;;;672    		{
;;;673    			code1 = *_ptr;	/* 读取字符串数据， 该数据可能是ascii代码，也可能汉字代码的高字节 */
;;;674    			if (code1 < 0x80)
;;;675    			{
;;;676    				/* 将ascii字符点阵复制到buf */
;;;677    				//memcpy(buf, &pAscDot[code1 * (font_bytes / 2)], (font_bytes / 2));
;;;678    				_LCD_ReadAsciiDot(code1, _tFont->FontCode, buf);	/* 读取ASCII字符点阵 */
;;;679    				width = font_width / 2;
;;;680    			}
;;;681    			else
;;;682    			{
;;;683    				code2 = *++_ptr;
;;;684    				if (code2 == 0)
;;;685    				{
;;;686    					break;
;;;687    				}
;;;688    				/* 读1个汉字的点阵 */
;;;689    				_LCD_ReadHZDot(code1, code2, _tFont->FontCode, buf);
;;;690    				width = font_width;
;;;691    			}
;;;692    	
;;;693    			y = _usY;
;;;694    			/* 开始刷LCD */
;;;695    			for (m = 0; m < font_height; m++)	/* 字符高度 */
;;;696    			{
;;;697    				x = _usX;
;;;698    				for (i = 0; i < width; i++)	/* 字符宽度 */
;;;699    				{
;;;700    					if ((buf[m * ((2 * width) / font_width) + i / 8] & (0x80 >> (i % 8 ))) != 0x00)
;;;701    					{
;;;702    						LCD_PutPixel(x, y, _tFont->FrontColor);	/* 设置像素颜色为文字色 */
;;;703    					}
;;;704    					else
;;;705    					{
;;;706    						if (_tFont->BackColor != CL_MASK)	/* 透明色 */
;;;707    						{
;;;708    							LCD_PutPixel(x, y, _tFont->BackColor);	/* 设置像素颜色为文字背景色 */
;;;709    						}
;;;710    					}
;;;711    	
;;;712    					x++;
;;;713    				}
;;;714    				y++;
;;;715    			}
;;;716    	
;;;717    			if (_tFont->Space > 0)
;;;718    			{
;;;719    				/* 如果文字底色按_tFont->usBackColor，并且字间距大于点阵的宽度，那么需要在文字之间填充(暂时未实现) */
;;;720    			}
;;;721    			_usX += width + _tFont->Space;	/* 列地址递增 */
;;;722    			_ptr++;			/* 指向下一个字符 */
;;;723    		}
;;;724    	}
;;;725    }
00005e  b02f              ADD      sp,sp,#0xbc
000060  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.100|
000064  bf00              NOP                            ;594
000066  4621              MOV      r1,r4                 ;630
000068  4630              MOV      r0,r6                 ;630
00006a  f7fffffe          BL       LCD_GetStrWidth
00006e  4605              MOV      r5,r0                 ;630
000070  f04f0900          MOV      r9,#0                 ;631
000074  45a8              CMP      r8,r5                 ;632
000076  dd10              BLE      |L10.154|
000078  9839              LDR      r0,[sp,#0xe4]         ;634
00007a  2802              CMP      r0,#2                 ;634
00007c  d104              BNE      |L10.136|
00007e  eba80005          SUB      r0,r8,r5              ;636
000082  fa1ff980          UXTH     r9,r0                 ;636
000086  e008              B        |L10.154|
                  |L10.136|
000088  9839              LDR      r0,[sp,#0xe4]         ;638
00008a  2801              CMP      r0,#1                 ;638
00008c  d105              BNE      |L10.154|
00008e  eba80005          SUB      r0,r8,r5              ;640
000092  eb0071d0          ADD      r1,r0,r0,LSR #31      ;640
000096  f3c1094f          UBFX     r9,r1,#1,#16          ;640
                  |L10.154|
00009a  f1b90f00          CMP      r9,#0                 ;649
00009e  dd0e              BLE      |L10.190|
0000a0  4620              MOV      r0,r4                 ;651
0000a2  f7fffffe          BL       LCD_GetFontHeight
0000a6  9002              STR      r0,[sp,#8]            ;651
0000a8  88a0              LDRH     r0,[r4,#4]            ;651
0000aa  464b              MOV      r3,r9                 ;651
0000ac  9000              STR      r0,[sp,#0]            ;651
0000ae  4638              MOV      r0,r7                 ;651
0000b0  9a02              LDR      r2,[sp,#8]            ;651
0000b2  992c              LDR      r1,[sp,#0xb0]         ;651
0000b4  f7fffffe          BL       LCD_Fill_Rect
0000b8  eb070009          ADD      r0,r7,r9              ;652
0000bc  b287              UXTH     r7,r0                 ;652
                  |L10.190|
0000be  45a8              CMP      r8,r5                 ;656
0000c0  dd10              BLE      |L10.228|
0000c2  4620              MOV      r0,r4                 ;658
0000c4  f7fffffe          BL       LCD_GetFontHeight
0000c8  9002              STR      r0,[sp,#8]            ;658
0000ca  88a0              LDRH     r0,[r4,#4]            ;658
0000cc  eba80105          SUB      r1,r8,r5              ;658
0000d0  eba10109          SUB      r1,r1,r9              ;658
0000d4  b28b              UXTH     r3,r1                 ;658
0000d6  1979              ADDS     r1,r7,r5              ;658
0000d8  9000              STR      r0,[sp,#0]            ;658
0000da  b288              UXTH     r0,r1                 ;658
0000dc  9a02              LDR      r2,[sp,#8]            ;658
0000de  992c              LDR      r1,[sp,#0xb0]         ;658
0000e0  f7fffffe          BL       LCD_Fill_Rect
                  |L10.228|
0000e4  9803              LDR      r0,[sp,#0xc]          ;661
0000e6  2801              CMP      r0,#1                 ;661
0000e8  d068              BEQ      |L10.444|
0000ea  e063              B        |L10.436|
                  |L10.236|
0000ec  7830              LDRB     r0,[r6,#0]            ;673
0000ee  902a              STR      r0,[sp,#0xa8]         ;673
0000f0  982a              LDR      r0,[sp,#0xa8]         ;674
0000f2  2880              CMP      r0,#0x80              ;674
0000f4  da0b              BGE      |L10.270|
0000f6  7821              LDRB     r1,[r4,#0]            ;678
0000f8  aa09              ADD      r2,sp,#0x24           ;678
0000fa  982a              LDR      r0,[sp,#0xa8]         ;678
0000fc  f7fffffe          BL       _LCD_ReadAsciiDot
000100  4658              MOV      r0,r11                ;679
000102  eb0b71d0          ADD      r1,r11,r0,LSR #31     ;679
000106  f3c10147          UBFX     r1,r1,#1,#8           ;679
00010a  9108              STR      r1,[sp,#0x20]         ;679
00010c  e00e              B        |L10.300|
                  |L10.270|
00010e  1c70              ADDS     r0,r6,#1              ;683
000110  4606              MOV      r6,r0                 ;683
000112  7800              LDRB     r0,[r0,#0]            ;683
000114  9029              STR      r0,[sp,#0xa4]         ;683
000116  9829              LDR      r0,[sp,#0xa4]         ;684
000118  b900              CBNZ     r0,|L10.284|
00011a  e04e              B        |L10.442|
                  |L10.284|
00011c  7822              LDRB     r2,[r4,#0]            ;689
00011e  ab09              ADD      r3,sp,#0x24           ;689
000120  e9dd1029          LDRD     r1,r0,[sp,#0xa4]      ;689
000124  f7fffffe          BL       _LCD_ReadHZDot
000128  f8cdb020          STR      r11,[sp,#0x20]        ;690
                  |L10.300|
00012c  982c              LDR      r0,[sp,#0xb0]         ;693
00012e  9004              STR      r0,[sp,#0x10]         ;693
000130  2000              MOVS     r0,#0                 ;695
000132  9007              STR      r0,[sp,#0x1c]         ;695
000134  e034              B        |L10.416|
                  |L10.310|
000136  9705              STR      r7,[sp,#0x14]         ;697
000138  f04f0a00          MOV      r10,#0                ;698
00013c  e025              B        |L10.394|
                  |L10.318|
00013e  9808              LDR      r0,[sp,#0x20]         ;700
000140  0040              LSLS     r0,r0,#1              ;700
000142  fb90f0fb          SDIV     r0,r0,r11             ;700
000146  9907              LDR      r1,[sp,#0x1c]         ;700
000148  4348              MULS     r0,r1,r0              ;700
00014a  eb0000da          ADD      r0,r0,r10,LSR #3      ;700
00014e  a909              ADD      r1,sp,#0x24           ;700
000150  5c08              LDRB     r0,[r1,r0]            ;700
000152  f00a0207          AND      r2,r10,#7             ;700
000156  2180              MOVS     r1,#0x80              ;700
000158  4111              ASRS     r1,r1,r2              ;700
00015a  4008              ANDS     r0,r0,r1              ;700
00015c  b128              CBZ      r0,|L10.362|
00015e  8862              LDRH     r2,[r4,#2]            ;702
000160  e9dd1004          LDRD     r1,r0,[sp,#0x10]      ;702
000164  f7fffffe          BL       LCD_PutPixel
000168  e009              B        |L10.382|
                  |L10.362|
00016a  88a0              LDRH     r0,[r4,#4]            ;706
00016c  f6491199          MOV      r1,#0x9999            ;706
000170  4288              CMP      r0,r1                 ;706
000172  d004              BEQ      |L10.382|
000174  88a2              LDRH     r2,[r4,#4]            ;708
000176  e9dd1004          LDRD     r1,r0,[sp,#0x10]      ;708
00017a  f7fffffe          BL       LCD_PutPixel
                  |L10.382|
00017e  9805              LDR      r0,[sp,#0x14]         ;712
000180  1c40              ADDS     r0,r0,#1              ;712
000182  b280              UXTH     r0,r0                 ;712
000184  9005              STR      r0,[sp,#0x14]         ;712
000186  f10a0a01          ADD      r10,r10,#1            ;698
                  |L10.394|
00018a  9808              LDR      r0,[sp,#0x20]         ;698
00018c  4582              CMP      r10,r0                ;698
00018e  d3d6              BCC      |L10.318|
000190  9804              LDR      r0,[sp,#0x10]         ;714
000192  1c40              ADDS     r0,r0,#1              ;714
000194  b280              UXTH     r0,r0                 ;714
000196  9004              STR      r0,[sp,#0x10]         ;714
000198  9807              LDR      r0,[sp,#0x1c]         ;695
00019a  1c40              ADDS     r0,r0,#1              ;695
00019c  b280              UXTH     r0,r0                 ;695
00019e  9007              STR      r0,[sp,#0x1c]         ;695
                  |L10.416|
0001a0  e9dd1006          LDRD     r1,r0,[sp,#0x18]      ;695
0001a4  4288              CMP      r0,r1                 ;695
0001a6  dbc6              BLT      |L10.310|
0001a8  88e1              LDRH     r1,[r4,#6]            ;721
0001aa  9808              LDR      r0,[sp,#0x20]         ;721
0001ac  4408              ADD      r0,r0,r1              ;721
0001ae  4438              ADD      r0,r0,r7              ;721
0001b0  b287              UXTH     r7,r0                 ;721
0001b2  1c76              ADDS     r6,r6,#1              ;722
                  |L10.436|
0001b4  7830              LDRB     r0,[r6,#0]            ;671
0001b6  2800              CMP      r0,#0                 ;671
0001b8  d198              BNE      |L10.236|
                  |L10.442|
0001ba  bf00              NOP                            ;686
                  |L10.444|
0001bc  bf00              NOP      
0001be  e74e              B        |L10.94|
;;;726    
                          ENDP


                          AREA ||i.LCD_DrawBMP||, CODE, READONLY, ALIGN=1

                  LCD_DrawBMP PROC
;;;855    */
;;;856    void LCD_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;857    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;858        ST7789V_DrawBMP(_usX, _usY, _usHeight, _usWidth, _ptr);
000010  463b              MOV      r3,r7
000012  4632              MOV      r2,r6
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f8cd8000          STR      r8,[sp,#0]
00001c  f7fffffe          BL       ST7789V_DrawBMP
;;;859    }
000020  e8bd83f8          POP      {r3-r9,pc}
;;;860    
                          ENDP


                          AREA ||i.LCD_DrawBmp32||, CODE, READONLY, ALIGN=1

                  LCD_DrawBmp32 PROC
;;;1160   */
;;;1161   void LCD_DrawBmp32(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint8_t *_pBmp)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1162   {
000004  b087              SUB      sp,sp,#0x1c
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
;;;1163   	const uint8_t *p;
;;;1164   	uint16_t usOldRGB, usNewRGB;
;;;1165   	int16_t x, y;		/* 用于记录窗口内的相对坐标 */
;;;1166   	uint8_t R1,G1,B1,A;	/* 新像素色彩分量 */
;;;1167   	uint8_t R0,G0,B0;	/* 旧像素色彩分量 */
;;;1168   
;;;1169   	p = (const uint8_t *)_pBmp;
00000a  9c14              LDR      r4,[sp,#0x50]
;;;1170   	p += 54;		/* 直接指向图像数据区 */
00000c  3436              ADDS     r4,r4,#0x36
;;;1171   
;;;1172   	/* 按照BMP位图次序，从左至右，从上至下扫描 */
;;;1173   	for (y = _usHeight - 1; y >= 0; y--)
00000e  9809              LDR      r0,[sp,#0x24]
000010  1e40              SUBS     r0,r0,#1
000012  b207              SXTH     r7,r0
000014  e081              B        |L12.282|
                  |L12.22|
;;;1174   	{
;;;1175   		for (x = 0; x < _usWidth; x++)
000016  2600              MOVS     r6,#0
000018  e07a              B        |L12.272|
                  |L12.26|
;;;1176   		{
;;;1177   			B1 = *p++;
00001a  f8140b01          LDRB     r0,[r4],#1
00001e  9004              STR      r0,[sp,#0x10]
;;;1178   			G1 = *p++;
000020  f8140b01          LDRB     r0,[r4],#1
000024  9005              STR      r0,[sp,#0x14]
;;;1179   			R1 = *p++;
000026  f814bb01          LDRB     r11,[r4],#1
;;;1180   			A = *p++;	/* Alpha 值(透明度)，0-255, 0表示透明，1表示不透明, 中间值表示透明度 */
00002a  f8145b01          LDRB     r5,[r4],#1
;;;1181   
;;;1182   			if (A == 0x00)	/* 需要透明,显示背景 */
00002e  2d00              CMP      r5,#0
000030  d06c              BEQ      |L12.268|
;;;1183   			{
;;;1184   				;	/* 不用刷新背景 */
;;;1185   			}
;;;1186   			else if (A == 0xFF)	/* 完全不透明， 显示新像素 */
000032  2dff              CMP      r5,#0xff
000034  d114              BNE      |L12.96|
;;;1187   			{
;;;1188   				usNewRGB = RGB(R1, G1, B1);
000036  ea4f00eb          ASR      r0,r11,#3
00003a  02c1              LSLS     r1,r0,#11
00003c  9805              LDR      r0,[sp,#0x14]
00003e  1080              ASRS     r0,r0,#2
000040  ea411140          ORR      r1,r1,r0,LSL #5
000044  9804              LDR      r0,[sp,#0x10]
000046  ea4100e0          ORR      r0,r1,r0,ASR #3
00004a  9006              STR      r0,[sp,#0x18]
;;;1189   				//if (_ucFocusMode == 1)
;;;1190   				//{
;;;1191   				//	usNewRGB = Blend565(usNewRGB, CL_YELLOW, 10);
;;;1192   				//}
;;;1193   				LCD_PutPixel(x + _usX, y + _usY, usNewRGB);
00004c  eb070209          ADD      r2,r7,r9
000050  b291              UXTH     r1,r2
000052  eb060208          ADD      r2,r6,r8
000056  b290              UXTH     r0,r2
000058  9a06              LDR      r2,[sp,#0x18]
00005a  f7fffffe          BL       LCD_PutPixel
00005e  e055              B        |L12.268|
                  |L12.96|
;;;1194   			}
;;;1195   			else 	/* 半透明 */
;;;1196   			{
;;;1197   				/* 计算公式： 实际显示颜色 = 前景颜色 * Alpha / 255 + 背景颜色 * (255-Alpha) / 255 */
;;;1198   				usOldRGB = LCD_GetPixel(x + _usX, y + _usY);
000060  eb070209          ADD      r2,r7,r9
000064  b291              UXTH     r1,r2
000066  eb060208          ADD      r2,r6,r8
00006a  b290              UXTH     r0,r2
00006c  f7fffffe          BL       LCD_GetPixel
000070  4682              MOV      r10,r0
;;;1199   				R0 = RGB565_R(usOldRGB);
000072  20f8              MOVS     r0,#0xf8
000074  ea00202a          AND      r0,r0,r10,ASR #8
000078  9003              STR      r0,[sp,#0xc]
;;;1200   				G0 = RGB565_G(usOldRGB);
00007a  20fc              MOVS     r0,#0xfc
00007c  ea0000ea          AND      r0,r0,r10,ASR #3
000080  9002              STR      r0,[sp,#8]
;;;1201   				B0 = RGB565_B(usOldRGB);
000082  20f8              MOVS     r0,#0xf8
000084  ea0000ca          AND      r0,r0,r10,LSL #3
000088  9001              STR      r0,[sp,#4]
;;;1202   
;;;1203   				R1 = (R1 * A) / 255 + R0 * (255 - A) / 255;
00008a  fb0bf005          MUL      r0,r11,r5
00008e  21ff              MOVS     r1,#0xff
000090  fb90f2f1          SDIV     r2,r0,r1
000094  f1c501ff          RSB      r1,r5,#0xff
000098  9803              LDR      r0,[sp,#0xc]
00009a  4341              MULS     r1,r0,r1
00009c  20ff              MOVS     r0,#0xff
00009e  fb91f0f0          SDIV     r0,r1,r0
0000a2  4410              ADD      r0,r0,r2
0000a4  f0000bff          AND      r11,r0,#0xff
;;;1204   				G1 = (G1 * A) / 255 + G0 * (255 - A) / 255;
0000a8  9805              LDR      r0,[sp,#0x14]
0000aa  4368              MULS     r0,r5,r0
0000ac  21ff              MOVS     r1,#0xff
0000ae  fb90f2f1          SDIV     r2,r0,r1
0000b2  f1c501ff          RSB      r1,r5,#0xff
0000b6  9802              LDR      r0,[sp,#8]
0000b8  4341              MULS     r1,r0,r1
0000ba  20ff              MOVS     r0,#0xff
0000bc  fb91f0f0          SDIV     r0,r1,r0
0000c0  4410              ADD      r0,r0,r2
0000c2  b2c0              UXTB     r0,r0
0000c4  9005              STR      r0,[sp,#0x14]
;;;1205   				B1 = (B1 * A) / 255 + B0 * (255 - A) / 255;
0000c6  9804              LDR      r0,[sp,#0x10]
0000c8  4368              MULS     r0,r5,r0
0000ca  21ff              MOVS     r1,#0xff
0000cc  fb90f2f1          SDIV     r2,r0,r1
0000d0  f1c501ff          RSB      r1,r5,#0xff
0000d4  9801              LDR      r0,[sp,#4]
0000d6  4341              MULS     r1,r0,r1
0000d8  20ff              MOVS     r0,#0xff
0000da  fb91f0f0          SDIV     r0,r1,r0
0000de  4410              ADD      r0,r0,r2
0000e0  b2c0              UXTB     r0,r0
0000e2  9004              STR      r0,[sp,#0x10]
;;;1206   				usNewRGB = RGB(R1, G1, B1);
0000e4  ea4f00eb          ASR      r0,r11,#3
0000e8  02c1              LSLS     r1,r0,#11
0000ea  9805              LDR      r0,[sp,#0x14]
0000ec  1080              ASRS     r0,r0,#2
0000ee  ea411140          ORR      r1,r1,r0,LSL #5
0000f2  9804              LDR      r0,[sp,#0x10]
0000f4  ea4100e0          ORR      r0,r1,r0,ASR #3
0000f8  9006              STR      r0,[sp,#0x18]
;;;1207   				//if (_ucFocusMode == 1)
;;;1208   				//{
;;;1209   				//	usNewRGB = Blend565(usNewRGB, CL_YELLOW, 10);
;;;1210   				//}
;;;1211   				LCD_PutPixel(x + _usX, y + _usY, usNewRGB);
0000fa  eb070209          ADD      r2,r7,r9
0000fe  b291              UXTH     r1,r2
000100  eb060208          ADD      r2,r6,r8
000104  b290              UXTH     r0,r2
000106  9a06              LDR      r2,[sp,#0x18]
000108  f7fffffe          BL       LCD_PutPixel
                  |L12.268|
00010c  1c70              ADDS     r0,r6,#1              ;1175
00010e  b206              SXTH     r6,r0                 ;1175
                  |L12.272|
000110  980a              LDR      r0,[sp,#0x28]         ;1175
000112  4286              CMP      r6,r0                 ;1175
000114  db81              BLT      |L12.26|
000116  1e78              SUBS     r0,r7,#1              ;1173
000118  b207              SXTH     r7,r0                 ;1173
                  |L12.282|
00011a  2f00              CMP      r7,#0                 ;1173
00011c  f6bfaf7b          BGE      |L12.22|
;;;1212   			}
;;;1213   		}
;;;1214   	}
;;;1215   }
000120  b00b              ADD      sp,sp,#0x2c
000122  e8bd8ff0          POP      {r4-r11,pc}
;;;1216   
                          ENDP


                          AREA ||i.LCD_DrawButton||, CODE, READONLY, ALIGN=1

                  LCD_DrawButton PROC
;;;1409   */
;;;1410   void LCD_DrawButton(BUTTON_T *_pBtn)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;1411   {
000004  4604              MOV      r4,r0
;;;1412   #if 1
;;;1413   	uint16_t x, y, h;
;;;1414   	FONT_T font;	/* 按钮激活时，需要更改字体设置，因此需要一个变量来保存 */
;;;1415   
;;;1416   	font.FontCode = _pBtn->Font->FontCode;
000006  68e0              LDR      r0,[r4,#0xc]
000008  7800              LDRB     r0,[r0,#0]
00000a  f88d0008          STRB     r0,[sp,#8]
;;;1417   	font.FrontColor = _pBtn->Font->FrontColor;
00000e  68e0              LDR      r0,[r4,#0xc]
000010  8840              LDRH     r0,[r0,#2]
000012  f8ad000a          STRH     r0,[sp,#0xa]
;;;1418   	font.BackColor = _pBtn->Font->BackColor;
000016  68e0              LDR      r0,[r4,#0xc]
000018  8880              LDRH     r0,[r0,#4]
00001a  f8ad000c          STRH     r0,[sp,#0xc]
;;;1419   	font.Space = _pBtn->Font->Space;	
00001e  68e0              LDR      r0,[r4,#0xc]
000020  88c0              LDRH     r0,[r0,#6]
000022  f8ad000e          STRH     r0,[sp,#0xe]
;;;1420   			
;;;1421   	if (_pBtn->Focus == 1)
000026  7d20              LDRB     r0,[r4,#0x14]
000028  2801              CMP      r0,#1
00002a  d104              BNE      |L13.54|
;;;1422   	{
;;;1423   		font.BackColor = BUTTON_ACTIVE_COLOR;
00002c  f64770ff          MOV      r0,#0x7fff
000030  f8ad000c          STRH     r0,[sp,#0xc]
000034  e003              B        |L13.62|
                  |L13.54|
;;;1424   	}
;;;1425   	else
;;;1426   	{
;;;1427   		/* 按钮的背景色统一管理，不能单独指定 */
;;;1428   		font.BackColor = BUTTON_BACK_COLOR;
000036  f64c6059          MOV      r0,#0xce59
00003a  f8ad000c          STRH     r0,[sp,#0xc]
                  |L13.62|
;;;1429   	}
;;;1430   	
;;;1431   	/* 仿XP风格，平面编辑框 */
;;;1432   	LCD_DrawRect(_pBtn->Left, _pBtn->Top, _pBtn->Height, _pBtn->Width, BUTTON_BORDER_COLOR);
00003e  2010              MOVS     r0,#0x10
000040  9000              STR      r0,[sp,#0]
000042  8923              LDRH     r3,[r4,#8]
000044  88e2              LDRH     r2,[r4,#6]
000046  88a1              LDRH     r1,[r4,#4]
000048  8860              LDRH     r0,[r4,#2]
00004a  f7fffffe          BL       LCD_DrawRect
;;;1433   	LCD_DrawRect(_pBtn->Left + 1, _pBtn->Top + 1, _pBtn->Height - 2, _pBtn->Width - 2, BUTTON_BORDER1_COLOR);
00004e  f64f70ff          MOV      r0,#0xffff
000052  9000              STR      r0,[sp,#0]
000054  f8b4c008          LDRH     r12,[r4,#8]
000058  f1ac0c02          SUB      r12,r12,#2
00005c  fa1ff38c          UXTH     r3,r12
000060  f8b4c006          LDRH     r12,[r4,#6]
000064  f1ac0c02          SUB      r12,r12,#2
000068  fa1ff28c          UXTH     r2,r12
00006c  f8b4c004          LDRH     r12,[r4,#4]
000070  f10c0c01          ADD      r12,r12,#1
000074  fa1ff18c          UXTH     r1,r12
000078  f8b4c002          LDRH     r12,[r4,#2]
00007c  f10c0c01          ADD      r12,r12,#1
000080  fa1ff08c          UXTH     r0,r12
000084  f7fffffe          BL       LCD_DrawRect
;;;1434   	LCD_DrawRect(_pBtn->Left + 2, _pBtn->Top + 2, _pBtn->Height - 4, _pBtn->Width - 4, BUTTON_BORDER2_COLOR);
000088  f24940b2          MOV      r0,#0x94b2
00008c  9000              STR      r0,[sp,#0]
00008e  f8b4c008          LDRH     r12,[r4,#8]
000092  f1ac0c04          SUB      r12,r12,#4
000096  fa1ff38c          UXTH     r3,r12
00009a  f8b4c006          LDRH     r12,[r4,#6]
00009e  f1ac0c04          SUB      r12,r12,#4
0000a2  fa1ff28c          UXTH     r2,r12
0000a6  f8b4c004          LDRH     r12,[r4,#4]
0000aa  f10c0c02          ADD      r12,r12,#2
0000ae  fa1ff18c          UXTH     r1,r12
0000b2  f8b4c002          LDRH     r12,[r4,#2]
0000b6  f10c0c02          ADD      r12,r12,#2
0000ba  fa1ff08c          UXTH     r0,r12
0000be  f7fffffe          BL       LCD_DrawRect
;;;1435   
;;;1436   	h =  LCD_GetFontHeight(&font);
0000c2  a802              ADD      r0,sp,#8
0000c4  f7fffffe          BL       LCD_GetFontHeight
0000c8  4605              MOV      r5,r0
;;;1437   	x = _pBtn->Left + 3;
0000ca  8860              LDRH     r0,[r4,#2]
0000cc  1cc0              ADDS     r0,r0,#3
0000ce  b286              UXTH     r6,r0
;;;1438   	y = _pBtn->Top + _pBtn->Height / 2 - h / 2;		
0000d0  88e0              LDRH     r0,[r4,#6]
0000d2  eb0072d0          ADD      r2,r0,r0,LSR #31
0000d6  88a3              LDRH     r3,[r4,#4]
0000d8  eb030262          ADD      r2,r3,r2,ASR #1
0000dc  4629              MOV      r1,r5
0000de  eb0573d1          ADD      r3,r5,r1,LSR #31
0000e2  eba20263          SUB      r2,r2,r3,ASR #1
0000e6  b297              UXTH     r7,r2
;;;1439   	
;;;1440   	LCD_Fill_Rect(_pBtn->Left + 3, _pBtn->Top + 3, _pBtn->Height - 6, _pBtn->Width - 6, font.BackColor);	/* 选中后的底色 */
0000e8  f8bd000c          LDRH     r0,[sp,#0xc]
0000ec  9000              STR      r0,[sp,#0]
0000ee  f8b4c008          LDRH     r12,[r4,#8]
0000f2  f1ac0c06          SUB      r12,r12,#6
0000f6  fa1ff38c          UXTH     r3,r12
0000fa  f8b4c006          LDRH     r12,[r4,#6]
0000fe  f1ac0c06          SUB      r12,r12,#6
000102  fa1ff28c          UXTH     r2,r12
000106  f8b4c004          LDRH     r12,[r4,#4]
00010a  f10c0c03          ADD      r12,r12,#3
00010e  fa1ff18c          UXTH     r1,r12
000112  f8b4c002          LDRH     r12,[r4,#2]
000116  f10c0c03          ADD      r12,r12,#3
00011a  fa1ff08c          UXTH     r0,r12
00011e  f7fffffe          BL       LCD_Fill_Rect
;;;1441   	LCD_DispStrEx(x, y, _pBtn->pCaption, &font, _pBtn->Width - 6, ALIGN_CENTER);	/* 水平居中 */		
000122  2101              MOVS     r1,#1
000124  8920              LDRH     r0,[r4,#8]
000126  1f80              SUBS     r0,r0,#6
000128  b280              UXTH     r0,r0
00012a  e9cd0100          STRD     r0,r1,[sp,#0]
00012e  ab02              ADD      r3,sp,#8
000130  4639              MOV      r1,r7
000132  4630              MOV      r0,r6
000134  6922              LDR      r2,[r4,#0x10]
000136  f7fffffe          BL       LCD_DispStrEx
;;;1442   
;;;1443   #else
;;;1444   	if (g_ChipID == IC_8875)
;;;1445   	{
;;;1446   		uint16_t len, x, y;
;;;1447   
;;;1448   		if (_pBtn->Focus == 1)
;;;1449   		{
;;;1450   			/* 仿XP风格，平面编辑框 */
;;;1451   			RA8875_DrawRect(_pBtn->Left, _pBtn->Top, _pBtn->Height, _pBtn->Width, BUTTON_BORDER_COLOR);
;;;1452   			RA8875_DrawRect(_pBtn->Left + 1, _pBtn->Top + 1, _pBtn->Height - 2, _pBtn->Width - 2, BUTTON_BORDER1_COLOR);
;;;1453   			RA8875_DrawRect(_pBtn->Left + 2, _pBtn->Top + 2, _pBtn->Height - 4, _pBtn->Width - 4, BUTTON_BORDER2_COLOR);
;;;1454   
;;;1455   			RA8875_FillRect(_pBtn->Left + 3, _pBtn->Top + 3, _pBtn->Height - 6, _pBtn->Width - 6, BUTTON_ACTIVE_COLOR);
;;;1456   
;;;1457   			RA8875_SetBackColor(BUTTON_ACTIVE_COLOR);
;;;1458   		}
;;;1459   		else
;;;1460   		{
;;;1461   			/* 仿XP风格，平面编辑框 */
;;;1462   			RA8875_DrawRect(_pBtn->Left, _pBtn->Top, _pBtn->Height, _pBtn->Width, BUTTON_BORDER_COLOR);
;;;1463   			RA8875_DrawRect(_pBtn->Left + 1, _pBtn->Top + 1, _pBtn->Height - 2, _pBtn->Width - 2, BUTTON_BORDER1_COLOR);
;;;1464   			RA8875_DrawRect(_pBtn->Left + 2, _pBtn->Top + 2, _pBtn->Height - 4, _pBtn->Width - 4, BUTTON_BORDER2_COLOR);
;;;1465   
;;;1466   			RA8875_FillRect(_pBtn->Left + 3, _pBtn->Top + 3, _pBtn->Height - 6, _pBtn->Width - 6, BUTTON_BACK_COLOR);
;;;1467   
;;;1468   			RA8875_SetBackColor(BUTTON_BACK_COLOR);
;;;1469   		}
;;;1470   
;;;1471   		#if 1	/* 按钮文字字体和颜色固定 */
;;;1472   			if (strcmp(_pBtn->Caption, "←") == 0)	/* 退格键特殊处理 */
;;;1473   			{
;;;1474   				/* 退格键符号是单像素笔画，太细了不协调，因此特殊处理 */
;;;1475   				RA8875_SetFont(RA_FONT_16, 0, 0);
;;;1476   				RA8875_SetFrontColor(CL_BLACK);
;;;1477   				RA8875_SetTextZoom(RA_SIZE_X2, RA_SIZE_X2);	/* 放大2倍 */
;;;1478   			}
;;;1479   			else
;;;1480   			{
;;;1481   				RA8875_SetFont(RA_FONT_16, 0, 0);
;;;1482   				RA8875_SetFrontColor(CL_BLACK);
;;;1483   				RA8875_SetTextZoom(RA_SIZE_X1, RA_SIZE_X1);	/* 放大1倍 */
;;;1484   			}
;;;1485   		#else	/* 按钮文字字体和颜色有应用程序指定 */
;;;1486   			RA8875_SetFont(_pBtn->Font.FontCode, 0, 0);
;;;1487   			RA8875_SetFrontColor(_pBtn->Font.FrontColor);
;;;1488   		#endif
;;;1489   
;;;1490   		/* 文字居中 */
;;;1491   		len = strlen(_pBtn->Caption);
;;;1492   
;;;1493   		/* 此处统计不等宽字符有问题。暂时特殊处理下 */
;;;1494   		if (len != 3)
;;;1495   		{
;;;1496   			x = _pBtn->Left + (_pBtn->Width - len * 16) / 2;
;;;1497   		}
;;;1498   		else
;;;1499   		{
;;;1500   			x = _pBtn->Left + (_pBtn->Width - len * 20) / 2;
;;;1501   		}
;;;1502   
;;;1503   		/* 对特殊字符特殊处理 */
;;;1504   		if ((len == 1) && (_pBtn->Caption[0] == '.'))
;;;1505   		{
;;;1506   			y = _pBtn->Top + 3;
;;;1507   			x += 3;
;;;1508   		}
;;;1509   		else
;;;1510   		{
;;;1511   			y = _pBtn->Top + 3;
;;;1512   		}
;;;1513   
;;;1514   		RA8875_DispStr(x, y, _pBtn->Caption);
;;;1515   
;;;1516   		RA8875_SetTextZoom(RA_SIZE_X1, RA_SIZE_X1);	/* 还原放大1倍 */
;;;1517   	}
;;;1518   #endif
;;;1519   }
00013a  e8bd81ff          POP      {r0-r8,pc}
;;;1520   
                          ENDP


                          AREA ||i.LCD_DrawCheckBox||, CODE, READONLY, ALIGN=2

                  LCD_DrawCheckBox PROC
;;;1276   */
;;;1277   void LCD_DrawCheckBox(CHECK_T *_pCheckBox)
000000  b57c              PUSH     {r2-r6,lr}
;;;1278   {
000002  4604              MOV      r4,r0
;;;1279   #if 1
;;;1280   	uint16_t x, y;
;;;1281   
;;;1282   	/* 目前只做了16点阵汉字的大小 */
;;;1283   
;;;1284   	/* 绘制外框 */
;;;1285   	x = _pCheckBox->Left;
000004  8865              LDRH     r5,[r4,#2]
;;;1286   	LCD_DrawRect(x, _pCheckBox->Top, CHECK_BOX_H, CHECK_BOX_W, CHECK_BOX_BORDER_COLOR);
000006  2010              MOVS     r0,#0x10
000008  9000              STR      r0,[sp,#0]
00000a  88a1              LDRH     r1,[r4,#4]
00000c  2318              MOVS     r3,#0x18
00000e  461a              MOV      r2,r3
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       LCD_DrawRect
;;;1287   	LCD_DrawRect(x + 1, _pCheckBox->Top + 1, CHECK_BOX_H - 2, CHECK_BOX_W - 2, CHECK_BOX_BORDER_COLOR);
000016  2010              MOVS     r0,#0x10
000018  9000              STR      r0,[sp,#0]
00001a  88a2              LDRH     r2,[r4,#4]
00001c  1c52              ADDS     r2,r2,#1
00001e  b291              UXTH     r1,r2
000020  1c6a              ADDS     r2,r5,#1
000022  b290              UXTH     r0,r2
000024  2316              MOVS     r3,#0x16
000026  461a              MOV      r2,r3
000028  f7fffffe          BL       LCD_DrawRect
;;;1288   	LCD_Fill_Rect(x + 2, _pCheckBox->Top + 2, CHECK_BOX_H - 4, CHECK_BOX_W - 4, CHECK_BOX_BACK_COLOR);
00002c  f64c6059          MOV      r0,#0xce59
000030  9000              STR      r0,[sp,#0]
000032  88a2              LDRH     r2,[r4,#4]
000034  1c92              ADDS     r2,r2,#2
000036  b291              UXTH     r1,r2
000038  1caa              ADDS     r2,r5,#2
00003a  b290              UXTH     r0,r2
00003c  2314              MOVS     r3,#0x14
00003e  461a              MOV      r2,r3
000040  f7fffffe          BL       LCD_Fill_Rect
;;;1289   
;;;1290   	/* 绘制文本标签 */
;;;1291   	x = _pCheckBox->Left + CHECK_BOX_W + 2;
000044  8860              LDRH     r0,[r4,#2]
000046  301a              ADDS     r0,r0,#0x1a
000048  b285              UXTH     r5,r0
;;;1292   	y = _pCheckBox->Top + CHECK_BOX_H / 2 - 8;
00004a  88a0              LDRH     r0,[r4,#4]
00004c  1d00              ADDS     r0,r0,#4
00004e  b286              UXTH     r6,r0
;;;1293   	LCD_DispStr(x, y, _pCheckBox->pCaption, _pCheckBox->Font);
000050  4631              MOV      r1,r6
000052  4628              MOV      r0,r5
000054  e9d43203          LDRD     r3,r2,[r4,#0xc]
000058  f7fffffe          BL       LCD_DispStr
;;;1294   
;;;1295   	if (_pCheckBox->Checked)
00005c  7d20              LDRB     r0,[r4,#0x14]
00005e  b1c0              CBZ      r0,|L14.146|
;;;1296   	{
;;;1297   		FONT_T font;
;;;1298   
;;;1299   	    font.FontCode = FC_ST_16;
000060  2001              MOVS     r0,#1
000062  f88d0000          STRB     r0,[sp,#0]
;;;1300   		font.BackColor = CL_MASK;
000066  f6491099          MOV      r0,#0x9999
00006a  f8ad0004          STRH     r0,[sp,#4]
;;;1301   		font.FrontColor = CHECK_BOX_CHECKED_COLOR;	/* 钩的颜色 */
00006e  f44f4078          MOV      r0,#0xf800
000072  f8ad0002          STRH     r0,[sp,#2]
;;;1302   		font.Space = 0;
000076  2000              MOVS     r0,#0
000078  f8ad0006          STRH     r0,[sp,#6]
;;;1303   		x = _pCheckBox->Left;
00007c  8865              LDRH     r5,[r4,#2]
;;;1304   		LCD_DispStr(x + 3, _pCheckBox->Top + 3, "√", &font);
00007e  88a2              LDRH     r2,[r4,#4]
000080  1cd2              ADDS     r2,r2,#3
000082  b291              UXTH     r1,r2
000084  1cea              ADDS     r2,r5,#3
000086  b290              UXTH     r0,r2
000088  466b              MOV      r3,sp
00008a  a202              ADR      r2,|L14.148|
00008c  f7fffffe          BL       LCD_DispStr
;;;1305   	}
000090  bf00              NOP      
                  |L14.146|
;;;1306   #else
;;;1307   	if (g_ChipID == IC_8875)
;;;1308   	{
;;;1309   		uint16_t x;
;;;1310   
;;;1311   		RA8875_SetFont(_pCheckBox->Font.FontCode, 0, 0);	/* 设置32点阵字体，行间距=0，字间距=0 */
;;;1312   
;;;1313   		/* 绘制标签 */
;;;1314   		//RA8875_SetBackColor(_pCheckBox->Font.BackColor);
;;;1315   		RA8875_SetBackColor(WIN_BODY_COLOR);
;;;1316   		RA8875_SetFrontColor(_pCheckBox->Font.FrontColor);
;;;1317   		RA8875_DispStr(_pCheckBox->Left, _pCheckBox->Top, _pCheckBox->Caption);
;;;1318   
;;;1319   		/* 绘制外框 */
;;;1320   		x = _pCheckBox->Left + _pCheckBox->Width - CHECK_BOX_W;
;;;1321   		RA8875_DrawRect(x, _pCheckBox->Top, CHECK_BOX_H, CHECK_BOX_W, CHECK_BOX_BORDER_COLOR);
;;;1322   		RA8875_DrawRect(x + 1, _pCheckBox->Top + 1, CHECK_BOX_H - 2, CHECK_BOX_W - 2, CHECK_BOX_BORDER_COLOR);
;;;1323   		RA8875_FillRect(x + 2, _pCheckBox->Top + 2, CHECK_BOX_H - 4, CHECK_BOX_W - 4, CHECK_BOX_BACK_COLOR);
;;;1324   
;;;1325   		if (_pCheckBox->Checked)
;;;1326   		{
;;;1327   			RA8875_SetBackColor(CHECK_BOX_BACK_COLOR);
;;;1328   			RA8875_SetFrontColor(CL_RED);
;;;1329   			RA8875_DispStr(x + 3, _pCheckBox->Top + 3, "√");
;;;1330   		}
;;;1331   	}
;;;1332   	else
;;;1333   	{
;;;1334   
;;;1335   	}
;;;1336   #endif
;;;1337   
;;;1338   }
000092  bd7c              POP      {r2-r6,pc}
;;;1339   
                          ENDP

                  |L14.148|
000094  a1cc00            DCB      161,204,0
000097  00                DCB      0

                          AREA ||i.LCD_DrawCircle||, CODE, READONLY, ALIGN=1

                  LCD_DrawCircle PROC
;;;838    */
;;;839    void LCD_DrawCircle(uint16_t _usX, uint16_t _usY, uint16_t _usRadius, uint16_t _usColor)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;840    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;841    	ST7789V_DrawCircle(_usX, _usY, _usRadius, _usColor);
00000c  463b              MOV      r3,r7
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       ST7789V_DrawCircle
;;;842    }
000018  e8bd81f0          POP      {r4-r8,pc}
;;;843    
                          ENDP


                          AREA ||i.LCD_DrawEdit||, CODE, READONLY, ALIGN=1

                  LCD_DrawEdit PROC
;;;1347   */
;;;1348   void LCD_DrawEdit(EDIT_T *_pEdit)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1349   {
000004  4604              MOV      r4,r0
;;;1350   #if 1
;;;1351   	uint16_t len, x, y;
;;;1352   	uint8_t width;
;;;1353   
;;;1354   	/* 仿XP风格，平面编辑框 */
;;;1355   	LCD_DrawRect(_pEdit->Left, _pEdit->Top, _pEdit->Height, _pEdit->Width, EDIT_BORDER_COLOR);
000006  2010              MOVS     r0,#0x10
000008  9000              STR      r0,[sp,#0]
00000a  8923              LDRH     r3,[r4,#8]
00000c  88e2              LDRH     r2,[r4,#6]
00000e  88a1              LDRH     r1,[r4,#4]
000010  8860              LDRH     r0,[r4,#2]
000012  f7fffffe          BL       LCD_DrawRect
;;;1356   	LCD_Fill_Rect(_pEdit->Left + 1, _pEdit->Top + 1, _pEdit->Height - 2, _pEdit->Width - 2, EDIT_BACK_COLOR);
000016  f64f70ff          MOV      r0,#0xffff
00001a  9000              STR      r0,[sp,#0]
00001c  f8b4c008          LDRH     r12,[r4,#8]
000020  f1ac0c02          SUB      r12,r12,#2
000024  fa1ff38c          UXTH     r3,r12
000028  f8b4c006          LDRH     r12,[r4,#6]
00002c  f1ac0c02          SUB      r12,r12,#2
000030  fa1ff28c          UXTH     r2,r12
000034  f8b4c004          LDRH     r12,[r4,#4]
000038  f10c0c01          ADD      r12,r12,#1
00003c  fa1ff18c          UXTH     r1,r12
000040  f8b4c002          LDRH     r12,[r4,#2]
000044  f10c0c01          ADD      r12,r12,#1
000048  fa1ff08c          UXTH     r0,r12
00004c  f7fffffe          BL       LCD_Fill_Rect
;;;1357   
;;;1358   	/* 文字居中 */
;;;1359   	if (_pEdit->Font->FontCode == FC_ST_12)
000050  68e0              LDR      r0,[r4,#0xc]
000052  7800              LDRB     r0,[r0,#0]
000054  b908              CBNZ     r0,|L16.90|
;;;1360   	{
;;;1361   		width = 6;
000056  2506              MOVS     r5,#6
000058  e000              B        |L16.92|
                  |L16.90|
;;;1362   	}
;;;1363   	else
;;;1364   	{
;;;1365   		width = 8;
00005a  2508              MOVS     r5,#8
                  |L16.92|
;;;1366   	}
;;;1367   	len = strlen(_pEdit->pCaption);
00005c  6920              LDR      r0,[r4,#0x10]
00005e  f7fffffe          BL       strlen
000062  b286              UXTH     r6,r0
;;;1368   	x = _pEdit->Left +  (_pEdit->Width - len * width) / 2;
000064  8921              LDRH     r1,[r4,#8]
000066  fb061015          MLS      r0,r6,r5,r1
00006a  eb0071d0          ADD      r1,r0,r0,LSR #31
00006e  8862              LDRH     r2,[r4,#2]
000070  eb020161          ADD      r1,r2,r1,ASR #1
000074  b28f              UXTH     r7,r1
;;;1369   	y = _pEdit->Top + _pEdit->Height / 2 - width;
000076  88e0              LDRH     r0,[r4,#6]
000078  eb0071d0          ADD      r1,r0,r0,LSR #31
00007c  88a2              LDRH     r2,[r4,#4]
00007e  eb020161          ADD      r1,r2,r1,ASR #1
000082  1b49              SUBS     r1,r1,r5
000084  fa1ff881          UXTH     r8,r1
;;;1370   
;;;1371   	LCD_DispStr(x, y, _pEdit->pCaption, _pEdit->Font);
000088  4641              MOV      r1,r8
00008a  4638              MOV      r0,r7
00008c  e9d43203          LDRD     r3,r2,[r4,#0xc]
000090  f7fffffe          BL       LCD_DispStr
;;;1372   #else
;;;1373   	if (g_ChipID == IC_8875)
;;;1374   	{
;;;1375   		uint16_t len, x;
;;;1376   
;;;1377   		/* 仿XP风格，平面编辑框 */
;;;1378   		RA8875_DrawRect(_pEdit->Left, _pEdit->Top, _pEdit->Height, _pEdit->Width, EDIT_BORDER_COLOR);
;;;1379   		RA8875_FillRect(_pEdit->Left + 1, _pEdit->Top + 1, _pEdit->Height - 2, _pEdit->Width - 2, EDIT_BACK_COLOR);
;;;1380   
;;;1381   		RA8875_SetFont(_pEdit->Font.FontCode, 0, 0);	/* 设置32点阵字体，行间距=0，字间距=0 */
;;;1382   		RA8875_SetFrontColor(_pEdit->Font.FrontColor);
;;;1383   		RA8875_SetBackColor(EDIT_BACK_COLOR);
;;;1384   
;;;1385   		/* 文字居中 */
;;;1386   		len = strlen(_pEdit->Caption);
;;;1387   		x = (_pEdit->Width - len * 16) / 2;
;;;1388   
;;;1389   		RA8875_DispStr(_pEdit->Left + x, _pEdit->Top + 3, _pEdit->Caption);
;;;1390   	}
;;;1391   	else
;;;1392   	{
;;;1393   		//SPFD5420_DrawCircle(_usX, _usY, _usRadius, _usColor);
;;;1394   	}
;;;1395   #endif
;;;1396   }
000094  e8bd83f8          POP      {r3-r9,pc}
;;;1397   
                          ENDP


                          AREA ||i.LCD_DrawGroupBox||, CODE, READONLY, ALIGN=1

                  LCD_DrawGroupBox PROC
;;;1528   */
;;;1529   void LCD_DrawGroupBox(GROUP_T *_pBox)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1530   {
000002  4604              MOV      r4,r0
;;;1531   	uint16_t x, y;
;;;1532   
;;;1533   	/* 画阴影线 */
;;;1534   	LCD_DrawRect(_pBox->Left + 1, _pBox->Top + 5, _pBox->Height, _pBox->Width - 1, CL_BOX_BORDER2);
000004  f64f70ff          MOV      r0,#0xffff
000008  9000              STR      r0,[sp,#0]
00000a  8927              LDRH     r7,[r4,#8]
00000c  1e7f              SUBS     r7,r7,#1
00000e  b2bb              UXTH     r3,r7
000010  88e2              LDRH     r2,[r4,#6]
000012  88a7              LDRH     r7,[r4,#4]
000014  1d7f              ADDS     r7,r7,#5
000016  b2b9              UXTH     r1,r7
000018  8867              LDRH     r7,[r4,#2]
00001a  1c7f              ADDS     r7,r7,#1
00001c  b2b8              UXTH     r0,r7
00001e  f7fffffe          BL       LCD_DrawRect
;;;1535   
;;;1536   	/* 画主框线 */
;;;1537   	LCD_DrawRect(_pBox->Left, _pBox->Top + 4, _pBox->Height, _pBox->Width - 1, CL_BOX_BORDER1);
000022  f64a5053          MOV      r0,#0xad53
000026  9000              STR      r0,[sp,#0]
000028  8927              LDRH     r7,[r4,#8]
00002a  1e7f              SUBS     r7,r7,#1
00002c  b2bb              UXTH     r3,r7
00002e  88e2              LDRH     r2,[r4,#6]
000030  88a7              LDRH     r7,[r4,#4]
000032  1d3f              ADDS     r7,r7,#4
000034  b2b9              UXTH     r1,r7
000036  8860              LDRH     r0,[r4,#2]
000038  f7fffffe          BL       LCD_DrawRect
;;;1538   
;;;1539   	/* 显示分组框标题（文字在左上角） */
;;;1540   	x = _pBox->Left + 9;
00003c  8860              LDRH     r0,[r4,#2]
00003e  3009              ADDS     r0,r0,#9
000040  b285              UXTH     r5,r0
;;;1541   	y = _pBox->Top;
000042  88a6              LDRH     r6,[r4,#4]
;;;1542   	LCD_DispStr(x, y, _pBox->pCaption, _pBox->Font);
000044  4631              MOV      r1,r6
000046  4628              MOV      r0,r5
000048  e9d43203          LDRD     r3,r2,[r4,#0xc]
00004c  f7fffffe          BL       LCD_DispStr
;;;1543   }
000050  bdf8              POP      {r3-r7,pc}
;;;1544   
                          ENDP


                          AREA ||i.LCD_DrawIcon||, CODE, READONLY, ALIGN=1

                  LCD_DrawIcon PROC
;;;929    */
;;;930    void LCD_DrawIcon(const ICON_T *_tIcon, FONT_T *_tFont, uint8_t _ucFocusMode)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;931    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;932    	const uint16_t *p;
;;;933    	uint16_t usNewRGB;
;;;934    	uint16_t x, y;		/* 用于记录窗口内的相对坐标 */
;;;935    
;;;936    	p = _tIcon->pBmp;
000008  f8d4a00c          LDR      r10,[r4,#0xc]
;;;937    	for (y = 0; y < _tIcon->Height; y++)
00000c  2600              MOVS     r6,#0
00000e  e0ad              B        |L18.364|
                  |L18.16|
;;;938    	{
;;;939    		for (x = 0; x < _tIcon->Width; x++)
000010  2500              MOVS     r5,#0
000012  e0a5              B        |L18.352|
                  |L18.20|
;;;940    		{
;;;941    			usNewRGB = *p++;	/* 读取图标的颜色值后指针加1 */
000014  f83a8b02          LDRH     r8,[r10],#2
;;;942    			/* 将图标的4个直角切割为弧角，弧角外是背景图标 */
;;;943    			if ((y == 0 && (x < 6 || x > _tIcon->Width - 7)) ||
000018  b92e              CBNZ     r6,|L18.38|
00001a  2d06              CMP      r5,#6
                  |L18.28|
00001c  db77              BLT      |L18.270|
00001e  8920              LDRH     r0,[r4,#8]
000020  1fc0              SUBS     r0,r0,#7
000022  42a8              CMP      r0,r5
000024  dbfa              BLT      |L18.28|
                  |L18.38|
;;;944    				(y == 1 && (x < 4 || x > _tIcon->Width - 5)) ||
000026  2e01              CMP      r6,#1
000028  d105              BNE      |L18.54|
00002a  2d04              CMP      r5,#4
00002c  dbf6              BLT      |L18.28|
00002e  8920              LDRH     r0,[r4,#8]
000030  1f40              SUBS     r0,r0,#5
000032  42a8              CMP      r0,r5
000034  dbf2              BLT      |L18.28|
                  |L18.54|
;;;945    				(y == 2 && (x < 3 || x > _tIcon->Width - 4)) ||
000036  2e02              CMP      r6,#2
000038  d105              BNE      |L18.70|
00003a  2d03              CMP      r5,#3
00003c  dbee              BLT      |L18.28|
00003e  8920              LDRH     r0,[r4,#8]
000040  1f00              SUBS     r0,r0,#4
000042  42a8              CMP      r0,r5
000044  dbea              BLT      |L18.28|
                  |L18.70|
;;;946    				(y == 3 && (x < 2 || x > _tIcon->Width - 3)) ||
000046  2e03              CMP      r6,#3
000048  d105              BNE      |L18.86|
00004a  2d02              CMP      r5,#2
00004c  dbe6              BLT      |L18.28|
00004e  8920              LDRH     r0,[r4,#8]
000050  1ec0              SUBS     r0,r0,#3
000052  42a8              CMP      r0,r5
000054  dbe2              BLT      |L18.28|
                  |L18.86|
;;;947    				(y == 4 && (x < 1 || x > _tIcon->Width - 2)) ||
000056  2e04              CMP      r6,#4
000058  d105              BNE      |L18.102|
00005a  2d01              CMP      r5,#1
00005c  db7e              BLT      |L18.348|
00005e  8920              LDRH     r0,[r4,#8]
000060  1e80              SUBS     r0,r0,#2
000062  42a8              CMP      r0,r5
000064  db7a              BLT      |L18.348|
                  |L18.102|
;;;948    				(y == 5 && (x < 1 || x > _tIcon->Width - 2))	||
000066  2e05              CMP      r6,#5
000068  d105              BNE      |L18.118|
00006a  2d01              CMP      r5,#1
00006c  db76              BLT      |L18.348|
00006e  8920              LDRH     r0,[r4,#8]
000070  1e80              SUBS     r0,r0,#2
000072  42a8              CMP      r0,r5
000074  db72              BLT      |L18.348|
                  |L18.118|
;;;949    
;;;950    				(y == _tIcon->Height - 1 && (x < 6 || x > _tIcon->Width - 7)) ||
000076  88e0              LDRH     r0,[r4,#6]
000078  1e40              SUBS     r0,r0,#1
00007a  42b0              CMP      r0,r6
00007c  d105              BNE      |L18.138|
00007e  2d06              CMP      r5,#6
000080  db6c              BLT      |L18.348|
000082  8920              LDRH     r0,[r4,#8]
000084  1fc0              SUBS     r0,r0,#7
000086  42a8              CMP      r0,r5
000088  db68              BLT      |L18.348|
                  |L18.138|
;;;951    				(y == _tIcon->Height - 2 && (x < 4 || x > _tIcon->Width - 5)) ||
00008a  88e0              LDRH     r0,[r4,#6]
00008c  1e80              SUBS     r0,r0,#2
00008e  42b0              CMP      r0,r6
000090  d105              BNE      |L18.158|
000092  2d04              CMP      r5,#4
000094  db62              BLT      |L18.348|
000096  8920              LDRH     r0,[r4,#8]
000098  1f40              SUBS     r0,r0,#5
00009a  42a8              CMP      r0,r5
00009c  db5e              BLT      |L18.348|
                  |L18.158|
;;;952    				(y == _tIcon->Height - 3 && (x < 3 || x > _tIcon->Width - 4)) ||
00009e  88e0              LDRH     r0,[r4,#6]
0000a0  1ec0              SUBS     r0,r0,#3
0000a2  42b0              CMP      r0,r6
0000a4  d105              BNE      |L18.178|
0000a6  2d03              CMP      r5,#3
0000a8  db58              BLT      |L18.348|
0000aa  8920              LDRH     r0,[r4,#8]
0000ac  1f00              SUBS     r0,r0,#4
0000ae  42a8              CMP      r0,r5
0000b0  db54              BLT      |L18.348|
                  |L18.178|
;;;953    				(y == _tIcon->Height - 4 && (x < 2 || x > _tIcon->Width - 3)) ||
0000b2  88e0              LDRH     r0,[r4,#6]
0000b4  1f00              SUBS     r0,r0,#4
0000b6  42b0              CMP      r0,r6
0000b8  d105              BNE      |L18.198|
0000ba  2d02              CMP      r5,#2
0000bc  db4e              BLT      |L18.348|
0000be  8920              LDRH     r0,[r4,#8]
0000c0  1ec0              SUBS     r0,r0,#3
0000c2  42a8              CMP      r0,r5
0000c4  db4a              BLT      |L18.348|
                  |L18.198|
;;;954    				(y == _tIcon->Height - 5 && (x < 1 || x > _tIcon->Width - 2)) ||
0000c6  88e0              LDRH     r0,[r4,#6]
0000c8  1f40              SUBS     r0,r0,#5
0000ca  42b0              CMP      r0,r6
0000cc  d105              BNE      |L18.218|
0000ce  2d01              CMP      r5,#1
0000d0  db44              BLT      |L18.348|
0000d2  8920              LDRH     r0,[r4,#8]
0000d4  1e80              SUBS     r0,r0,#2
0000d6  42a8              CMP      r0,r5
0000d8  db40              BLT      |L18.348|
                  |L18.218|
;;;955    				(y == _tIcon->Height - 6 && (x < 1 || x > _tIcon->Width - 2))
0000da  88e0              LDRH     r0,[r4,#6]
0000dc  1f80              SUBS     r0,r0,#6
0000de  42b0              CMP      r0,r6
0000e0  d105              BNE      |L18.238|
0000e2  2d01              CMP      r5,#1
0000e4  db3a              BLT      |L18.348|
0000e6  8920              LDRH     r0,[r4,#8]
0000e8  1e80              SUBS     r0,r0,#2
0000ea  42a8              CMP      r0,r5
0000ec  db36              BLT      |L18.348|
                  |L18.238|
;;;956    				)
;;;957    			{
;;;958    				;
;;;959    			}
;;;960    			else
;;;961    			{
;;;962    				if (_ucFocusMode != 0)	/* 1表示选中的图标 */
0000ee  9802              LDR      r0,[sp,#8]
0000f0  b358              CBZ      r0,|L18.330|
;;;963    				{
;;;964    					/* 降低原始像素的亮度，实现图标被激活选中的效果 */
;;;965    					uint16_t R,G,B;
;;;966    					uint16_t bright = 15;
0000f2  200f              MOVS     r0,#0xf
;;;967    
;;;968    					/* rrrr rggg gggb bbbb */
;;;969    					R = (usNewRGB & 0xF800) >> 11;
0000f4  ea4f21d8          LSR      r1,r8,#11
;;;970    					G = (usNewRGB & 0x07E0) >> 5;
0000f8  f3c81245          UBFX     r2,r8,#5,#6
;;;971    					B =  usNewRGB & 0x001F;
0000fc  f008031f          AND      r3,r8,#0x1f
;;;972    					if (R > bright)
000100  4281              CMP      r1,r0
000102  dd05              BLE      |L18.272|
;;;973    					{
;;;974    						R -= bright;
000104  eba10c00          SUB      r12,r1,r0
000108  fa1ff18c          UXTH     r1,r12
00010c  e001              B        |L18.274|
                  |L18.270|
00010e  e025              B        |L18.348|
                  |L18.272|
;;;975    					}
;;;976    					else
;;;977    					{
;;;978    						R = 0;
000110  2100              MOVS     r1,#0
                  |L18.274|
;;;979    					}
;;;980    					if (G > 2 * bright)
000112  ea4f0c40          LSL      r12,r0,#1
000116  4594              CMP      r12,r2
000118  da06              BGE      |L18.296|
;;;981    					{
;;;982    						G -= 2 * bright;
00011a  f04f0c02          MOV      r12,#2
00011e  fb0c2c10          MLS      r12,r12,r0,r2
000122  fa1ff28c          UXTH     r2,r12
000126  e000              B        |L18.298|
                  |L18.296|
;;;983    					}
;;;984    					else
;;;985    					{
;;;986    						G = 0;
000128  2200              MOVS     r2,#0
                  |L18.298|
;;;987    					}
;;;988    					if (B > bright)
00012a  4283              CMP      r3,r0
00012c  dd04              BLE      |L18.312|
;;;989    					{
;;;990    						B -= bright;
00012e  eba30c00          SUB      r12,r3,r0
000132  fa1ff38c          UXTH     r3,r12
000136  e000              B        |L18.314|
                  |L18.312|
;;;991    					}
;;;992    					else
;;;993    					{
;;;994    						B = 0;
000138  2300              MOVS     r3,#0
                  |L18.314|
;;;995    					}
;;;996    					usNewRGB = (R << 11) + (G << 5) + B;
00013a  ea4f2cc1          LSL      r12,r1,#11
00013e  eb0c1c42          ADD      r12,r12,r2,LSL #5
000142  449c              ADD      r12,r12,r3
000144  fa1ff88c          UXTH     r8,r12
;;;997    				}
000148  bf00              NOP      
                  |L18.330|
;;;998    
;;;999    				LCD_PutPixel(x + _tIcon->Left, y + _tIcon->Top, usNewRGB);
00014a  88a2              LDRH     r2,[r4,#4]
00014c  4432              ADD      r2,r2,r6
00014e  b291              UXTH     r1,r2
000150  8862              LDRH     r2,[r4,#2]
000152  442a              ADD      r2,r2,r5
000154  b290              UXTH     r0,r2
000156  4642              MOV      r2,r8
000158  f7fffffe          BL       LCD_PutPixel
                  |L18.348|
00015c  1c68              ADDS     r0,r5,#1              ;939
00015e  b285              UXTH     r5,r0                 ;939
                  |L18.352|
000160  8920              LDRH     r0,[r4,#8]            ;939
000162  42a8              CMP      r0,r5                 ;939
000164  f73faf56          BGT      |L18.20|
000168  1c70              ADDS     r0,r6,#1              ;937
00016a  b286              UXTH     r6,r0                 ;937
                  |L18.364|
00016c  88e0              LDRH     r0,[r4,#6]            ;937
00016e  42b0              CMP      r0,r6                 ;937
000170  f73faf4e          BGT      |L18.16|
;;;1000   			}
;;;1001   		}
;;;1002   	}
;;;1003   
;;;1004   	/* 绘制图标下的文字 */
;;;1005   	{
;;;1006   		uint16_t len;
;;;1007   		uint16_t width;
;;;1008   
;;;1009   		len = strlen(_tIcon->Text);
000174  f1040010          ADD      r0,r4,#0x10
000178  f7fffffe          BL       strlen
00017c  fa1ffb80          UXTH     r11,r0
;;;1010   
;;;1011   		if  (len == 0)
000180  f1bb0f00          CMP      r11,#0
000184  d101              BNE      |L18.394|
                  |L18.390|
;;;1012   		{
;;;1013   			return;	/* 如果图标文本长度为0，则不显示 */
;;;1014   		}
;;;1015   
;;;1016   		/* 计算文本的总宽度 */
;;;1017   		if (_tFont->FontCode == FC_ST_12)		/* 12点阵 */
;;;1018   		{
;;;1019   			width = 6 * (len + _tFont->Space);
;;;1020   		}
;;;1021   		else	/* FC_ST_16 */
;;;1022   		{
;;;1023   			width = 8 * (len + _tFont->Space);
;;;1024   		}
;;;1025   
;;;1026   
;;;1027   		/* 水平居中 */
;;;1028   		x = (_tIcon->Left + _tIcon->Width / 2) - width / 2;
;;;1029   		y = _tIcon->Top + _tIcon->Height + 2;
;;;1030   		LCD_DispStr(x, y, (char *)_tIcon->Text, _tFont);
;;;1031   	}
;;;1032   }
000186  e8bd8ffe          POP      {r1-r11,pc}
                  |L18.394|
00018a  7838              LDRB     r0,[r7,#0]            ;1017
00018c  b938              CBNZ     r0,|L18.414|
00018e  88f8              LDRH     r0,[r7,#6]            ;1019
000190  4458              ADD      r0,r0,r11             ;1019
000192  eb000040          ADD      r0,r0,r0,LSL #1       ;1019
000196  0440              LSLS     r0,r0,#17             ;1019
000198  ea4f4910          LSR      r9,r0,#16             ;1019
00019c  e004              B        |L18.424|
                  |L18.414|
00019e  88f8              LDRH     r0,[r7,#6]            ;1023
0001a0  4458              ADD      r0,r0,r11             ;1023
0001a2  04c0              LSLS     r0,r0,#19             ;1023
0001a4  ea4f4910          LSR      r9,r0,#16             ;1023
                  |L18.424|
0001a8  8920              LDRH     r0,[r4,#8]            ;1028
0001aa  eb0072d0          ADD      r2,r0,r0,LSR #31      ;1028
0001ae  8863              LDRH     r3,[r4,#2]            ;1028
0001b0  eb030262          ADD      r2,r3,r2,ASR #1       ;1028
0001b4  4649              MOV      r1,r9                 ;1028
0001b6  eb0973d1          ADD      r3,r9,r1,LSR #31      ;1028
0001ba  eba20263          SUB      r2,r2,r3,ASR #1       ;1028
0001be  b295              UXTH     r5,r2                 ;1028
0001c0  88a0              LDRH     r0,[r4,#4]            ;1029
0001c2  88e1              LDRH     r1,[r4,#6]            ;1029
0001c4  4408              ADD      r0,r0,r1              ;1029
0001c6  1c80              ADDS     r0,r0,#2              ;1029
0001c8  b286              UXTH     r6,r0                 ;1029
0001ca  463b              MOV      r3,r7                 ;1030
0001cc  f1040210          ADD      r2,r4,#0x10           ;1030
0001d0  4631              MOV      r1,r6                 ;1030
0001d2  4628              MOV      r0,r5                 ;1030
0001d4  f7fffffe          BL       LCD_DispStr
0001d8  bf00              NOP      
0001da  e7d4              B        |L18.390|
;;;1033   
                          ENDP


                          AREA ||i.LCD_DrawIcon32||, CODE, READONLY, ALIGN=1

                  LCD_DrawIcon32 PROC
;;;1064   */
;;;1065   void LCD_DrawIcon32(const ICON_T *_tIcon, FONT_T *_tFont, uint8_t _ucFocusMode)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1066   {
000004  b088              SUB      sp,sp,#0x20
000006  4604              MOV      r4,r0
000008  4689              MOV      r9,r1
;;;1067   	const uint8_t *p;
;;;1068   	uint16_t usOldRGB, usNewRGB;
;;;1069   	int16_t x, y;		/* 用于记录窗口内的相对坐标 */
;;;1070   	uint8_t R1,G1,B1,A;	/* 新像素色彩分量 */
;;;1071   	uint8_t R0,G0,B0;	/* 旧像素色彩分量 */
;;;1072   
;;;1073   	p = (const uint8_t *)_tIcon->pBmp;
00000a  68e5              LDR      r5,[r4,#0xc]
;;;1074   	p += 54;		/* 直接指向图像数据区 */
00000c  3536              ADDS     r5,r5,#0x36
;;;1075   
;;;1076   	/* 按照BMP位图次序，从左至右，从上至下扫描 */
;;;1077   	for (y = _tIcon->Height - 1; y >= 0; y--)
00000e  88e0              LDRH     r0,[r4,#6]
000010  1e40              SUBS     r0,r0,#1
000012  fa0ff880          SXTH     r8,r0
000016  e099              B        |L19.332|
                  |L19.24|
;;;1078   	{
;;;1079   		for (x = 0; x < _tIcon->Width; x++)
000018  2700              MOVS     r7,#0
00001a  e08f              B        |L19.316|
                  |L19.28|
;;;1080   		{
;;;1081   			B1 = *p++;
00001c  f8150b01          LDRB     r0,[r5],#1
000020  9004              STR      r0,[sp,#0x10]
;;;1082   			G1 = *p++;
000022  f8150b01          LDRB     r0,[r5],#1
000026  9005              STR      r0,[sp,#0x14]
;;;1083   			R1 = *p++;
000028  f8150b01          LDRB     r0,[r5],#1
00002c  9006              STR      r0,[sp,#0x18]
;;;1084   			A = *p++;	/* Alpha 值(透明度)，0-255, 0表示透明，1表示不透明, 中间值表示透明度 */
00002e  f8156b01          LDRB     r6,[r5],#1
;;;1085   
;;;1086   			if (A == 0x00)	/* 需要透明,显示背景 */
000032  2e00              CMP      r6,#0
000034  d01f              BEQ      |L19.118|
;;;1087   			{
;;;1088   				;	/* 不用刷新背景 */
;;;1089   			}
;;;1090   			else if (A == 0xFF)	/* 完全不透明， 显示新像素 */
000036  2eff              CMP      r6,#0xff
000038  d11e              BNE      |L19.120|
;;;1091   			{
;;;1092   				usNewRGB = RGB(R1, G1, B1);
00003a  9806              LDR      r0,[sp,#0x18]
00003c  10c0              ASRS     r0,r0,#3
00003e  02c1              LSLS     r1,r0,#11
000040  9805              LDR      r0,[sp,#0x14]
000042  1080              ASRS     r0,r0,#2
000044  ea411140          ORR      r1,r1,r0,LSL #5
000048  9804              LDR      r0,[sp,#0x10]
00004a  ea4100e0          ORR      r0,r1,r0,ASR #3
00004e  9007              STR      r0,[sp,#0x1c]
;;;1093   				if (_ucFocusMode == 1)
000050  980a              LDR      r0,[sp,#0x28]
000052  2801              CMP      r0,#1
000054  d106              BNE      |L19.100|
;;;1094   				{
;;;1095   					usNewRGB = LCD_Blend565(usNewRGB, CL_YELLOW, 10);
000056  220a              MOVS     r2,#0xa
000058  f64f71e0          MOV      r1,#0xffe0
00005c  9807              LDR      r0,[sp,#0x1c]
00005e  f7fffffe          BL       LCD_Blend565
000062  9007              STR      r0,[sp,#0x1c]
                  |L19.100|
;;;1096   				}
;;;1097   				LCD_PutPixel(x + _tIcon->Left, y + _tIcon->Top, usNewRGB);
000064  88a2              LDRH     r2,[r4,#4]
000066  4442              ADD      r2,r2,r8
000068  b291              UXTH     r1,r2
00006a  8862              LDRH     r2,[r4,#2]
00006c  443a              ADD      r2,r2,r7
00006e  b290              UXTH     r0,r2
000070  9a07              LDR      r2,[sp,#0x1c]
000072  f7fffffe          BL       LCD_PutPixel
                  |L19.118|
000076  e05f              B        |L19.312|
                  |L19.120|
;;;1098   			}
;;;1099   			else 	/* 半透明 */
;;;1100   			{
;;;1101   				/* 计算公式： 实际显示颜色 = 前景颜色 * Alpha / 255 + 背景颜色 * (255-Alpha) / 255 */
;;;1102   				usOldRGB = LCD_GetPixel(x + _tIcon->Left, y + _tIcon->Top);
000078  88a2              LDRH     r2,[r4,#4]
00007a  4442              ADD      r2,r2,r8
00007c  b291              UXTH     r1,r2
00007e  8862              LDRH     r2,[r4,#2]
000080  443a              ADD      r2,r2,r7
000082  b290              UXTH     r0,r2
000084  f7fffffe          BL       LCD_GetPixel
000088  4682              MOV      r10,r0
;;;1103   				//usOldRGB = 0xFFFF;
;;;1104   				R0 = RGB565_R(usOldRGB);
00008a  21f8              MOVS     r1,#0xf8
00008c  ea01202a          AND      r0,r1,r10,ASR #8
000090  9003              STR      r0,[sp,#0xc]
;;;1105   				G0 = RGB565_G(usOldRGB);
000092  21fc              MOVS     r1,#0xfc
000094  ea0100ea          AND      r0,r1,r10,ASR #3
000098  9002              STR      r0,[sp,#8]
;;;1106   				B0 = RGB565_B(usOldRGB);
00009a  21f8              MOVS     r1,#0xf8
00009c  ea0100ca          AND      r0,r1,r10,LSL #3
0000a0  9001              STR      r0,[sp,#4]
;;;1107   
;;;1108   				R1 = (R1 * A) / 255 + R0 * (255 - A) / 255;
0000a2  9806              LDR      r0,[sp,#0x18]
0000a4  4370              MULS     r0,r6,r0
0000a6  21ff              MOVS     r1,#0xff
0000a8  fb90f2f1          SDIV     r2,r0,r1
0000ac  f1c601ff          RSB      r1,r6,#0xff
0000b0  9803              LDR      r0,[sp,#0xc]
0000b2  4341              MULS     r1,r0,r1
0000b4  20ff              MOVS     r0,#0xff
0000b6  fb91f0f0          SDIV     r0,r1,r0
0000ba  4410              ADD      r0,r0,r2
0000bc  b2c0              UXTB     r0,r0
0000be  9006              STR      r0,[sp,#0x18]
;;;1109   				G1 = (G1 * A) / 255 + G0 * (255 - A) / 255;
0000c0  9805              LDR      r0,[sp,#0x14]
0000c2  4370              MULS     r0,r6,r0
0000c4  21ff              MOVS     r1,#0xff
0000c6  fb90f2f1          SDIV     r2,r0,r1
0000ca  f1c601ff          RSB      r1,r6,#0xff
0000ce  9802              LDR      r0,[sp,#8]
0000d0  4341              MULS     r1,r0,r1
0000d2  20ff              MOVS     r0,#0xff
0000d4  fb91f0f0          SDIV     r0,r1,r0
0000d8  4410              ADD      r0,r0,r2
0000da  b2c0              UXTB     r0,r0
0000dc  9005              STR      r0,[sp,#0x14]
;;;1110   				B1 = (B1 * A) / 255 + B0 * (255 - A) / 255;
0000de  9804              LDR      r0,[sp,#0x10]
0000e0  4370              MULS     r0,r6,r0
0000e2  21ff              MOVS     r1,#0xff
0000e4  fb90f2f1          SDIV     r2,r0,r1
0000e8  f1c601ff          RSB      r1,r6,#0xff
0000ec  9801              LDR      r0,[sp,#4]
0000ee  4341              MULS     r1,r0,r1
0000f0  20ff              MOVS     r0,#0xff
0000f2  fb91f0f0          SDIV     r0,r1,r0
0000f6  4410              ADD      r0,r0,r2
0000f8  b2c0              UXTB     r0,r0
0000fa  9004              STR      r0,[sp,#0x10]
;;;1111   				usNewRGB = RGB(R1, G1, B1);
0000fc  9806              LDR      r0,[sp,#0x18]
0000fe  10c0              ASRS     r0,r0,#3
000100  02c1              LSLS     r1,r0,#11
000102  9805              LDR      r0,[sp,#0x14]
000104  1080              ASRS     r0,r0,#2
000106  ea411140          ORR      r1,r1,r0,LSL #5
00010a  9804              LDR      r0,[sp,#0x10]
00010c  ea4100e0          ORR      r0,r1,r0,ASR #3
000110  9007              STR      r0,[sp,#0x1c]
;;;1112   				if (_ucFocusMode == 1)
000112  980a              LDR      r0,[sp,#0x28]
000114  2801              CMP      r0,#1
000116  d106              BNE      |L19.294|
;;;1113   				{
;;;1114   					usNewRGB = LCD_Blend565(usNewRGB, CL_YELLOW, 10);
000118  220a              MOVS     r2,#0xa
00011a  f64f71e0          MOV      r1,#0xffe0
00011e  9807              LDR      r0,[sp,#0x1c]
000120  f7fffffe          BL       LCD_Blend565
000124  9007              STR      r0,[sp,#0x1c]
                  |L19.294|
;;;1115   				}
;;;1116   				LCD_PutPixel(x + _tIcon->Left, y + _tIcon->Top, usNewRGB);
000126  88a2              LDRH     r2,[r4,#4]
000128  4442              ADD      r2,r2,r8
00012a  b291              UXTH     r1,r2
00012c  8862              LDRH     r2,[r4,#2]
00012e  443a              ADD      r2,r2,r7
000130  b290              UXTH     r0,r2
000132  9a07              LDR      r2,[sp,#0x1c]
000134  f7fffffe          BL       LCD_PutPixel
                  |L19.312|
000138  1c78              ADDS     r0,r7,#1              ;1079
00013a  b207              SXTH     r7,r0                 ;1079
                  |L19.316|
00013c  8920              LDRH     r0,[r4,#8]            ;1079
00013e  42b8              CMP      r0,r7                 ;1079
000140  f73faf6c          BGT      |L19.28|
000144  f1a80001          SUB      r0,r8,#1              ;1077
000148  fa0ff880          SXTH     r8,r0                 ;1077
                  |L19.332|
00014c  f1b80f00          CMP      r8,#0                 ;1077
000150  f6bfaf62          BGE      |L19.24|
;;;1117   			}
;;;1118   		}
;;;1119   	}
;;;1120   
;;;1121   	/* 绘制图标下的文字 */
;;;1122   	{
;;;1123   		uint16_t len;
;;;1124   		uint16_t width;
;;;1125   
;;;1126   		len = strlen(_tIcon->Text);
000154  f1040010          ADD      r0,r4,#0x10
000158  f7fffffe          BL       strlen
00015c  b280              UXTH     r0,r0
00015e  9000              STR      r0,[sp,#0]
;;;1127   
;;;1128   		if  (len == 0)
000160  9800              LDR      r0,[sp,#0]
000162  b910              CBNZ     r0,|L19.362|
                  |L19.356|
;;;1129   		{
;;;1130   			return;	/* 如果图标文本长度为0，则不显示 */
;;;1131   		}
;;;1132   
;;;1133   		/* 计算文本的总宽度 */
;;;1134   		if (_tFont->FontCode == FC_ST_12)		/* 12点阵 */
;;;1135   		{
;;;1136   			width = 6 * (len + _tFont->Space);
;;;1137   		}
;;;1138   		else	/* FC_ST_16 */
;;;1139   		{
;;;1140   			width = 8 * (len + _tFont->Space);
;;;1141   		}
;;;1142   
;;;1143   
;;;1144   		/* 水平居中 */
;;;1145   		x = (_tIcon->Left + _tIcon->Width / 2) - width / 2;
;;;1146   		y = _tIcon->Top + _tIcon->Height + 2;
;;;1147   		LCD_DispStr(x, y, (char *)_tIcon->Text, _tFont);
;;;1148   	}
;;;1149   }
000164  b00b              ADD      sp,sp,#0x2c
000166  e8bd8ff0          POP      {r4-r11,pc}
                  |L19.362|
00016a  f8990000          LDRB     r0,[r9,#0]            ;1134
00016e  b948              CBNZ     r0,|L19.388|
000170  f8b91006          LDRH     r1,[r9,#6]            ;1136
000174  9800              LDR      r0,[sp,#0]            ;1136
000176  4408              ADD      r0,r0,r1              ;1136
000178  eb000040          ADD      r0,r0,r0,LSL #1       ;1136
00017c  0440              LSLS     r0,r0,#17             ;1136
00017e  ea4f4b10          LSR      r11,r0,#16            ;1136
000182  e006              B        |L19.402|
                  |L19.388|
000184  f8b91006          LDRH     r1,[r9,#6]            ;1140
000188  9800              LDR      r0,[sp,#0]            ;1140
00018a  4408              ADD      r0,r0,r1              ;1140
00018c  04c0              LSLS     r0,r0,#19             ;1140
00018e  ea4f4b10          LSR      r11,r0,#16            ;1140
                  |L19.402|
000192  8920              LDRH     r0,[r4,#8]            ;1145
000194  eb0072d0          ADD      r2,r0,r0,LSR #31      ;1145
000198  8863              LDRH     r3,[r4,#2]            ;1145
00019a  eb030262          ADD      r2,r3,r2,ASR #1       ;1145
00019e  4659              MOV      r1,r11                ;1145
0001a0  eb0b73d1          ADD      r3,r11,r1,LSR #31     ;1145
0001a4  eba20263          SUB      r2,r2,r3,ASR #1       ;1145
0001a8  b217              SXTH     r7,r2                 ;1145
0001aa  88a0              LDRH     r0,[r4,#4]            ;1146
0001ac  88e1              LDRH     r1,[r4,#6]            ;1146
0001ae  4408              ADD      r0,r0,r1              ;1146
0001b0  1c80              ADDS     r0,r0,#2              ;1146
0001b2  fa0ff880          SXTH     r8,r0                 ;1146
0001b6  fa1ff188          UXTH     r1,r8                 ;1147
0001ba  b2b8              UXTH     r0,r7                 ;1147
0001bc  464b              MOV      r3,r9                 ;1147
0001be  f1040210          ADD      r2,r4,#0x10           ;1147
0001c2  f7fffffe          BL       LCD_DispStr
0001c6  bf00              NOP      
0001c8  e7cc              B        |L19.356|
;;;1150   
                          ENDP


                          AREA ||i.LCD_DrawLabel||, CODE, READONLY, ALIGN=1

                  LCD_DrawLabel PROC
;;;1224   */
;;;1225   void LCD_DrawLabel(LABEL_T *_pLabel)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1226   {
000002  b0c1              SUB      sp,sp,#0x104
000004  4604              MOV      r4,r0
;;;1227   #if 1
;;;1228   	char dispbuf[256];
;;;1229   	uint16_t i;
;;;1230   	uint16_t NewLen;
;;;1231   
;;;1232   	NewLen = strlen(_pLabel->pCaption);
000006  6920              LDR      r0,[r4,#0x10]
000008  f7fffffe          BL       strlen
00000c  b286              UXTH     r6,r0
;;;1233   
;;;1234   	if (NewLen > _pLabel->MaxLen)
00000e  8960              LDRH     r0,[r4,#0xa]
000010  42b0              CMP      r0,r6
000012  da07              BGE      |L20.36|
;;;1235   	{
;;;1236   		LCD_DispStr(_pLabel->Left, _pLabel->Top, _pLabel->pCaption, _pLabel->Font);
000014  88a1              LDRH     r1,[r4,#4]
000016  8860              LDRH     r0,[r4,#2]
000018  e9d43203          LDRD     r3,r2,[r4,#0xc]
00001c  f7fffffe          BL       LCD_DispStr
;;;1237   		_pLabel->MaxLen = NewLen;
000020  8166              STRH     r6,[r4,#0xa]
000022  e01b              B        |L20.92|
                  |L20.36|
;;;1238   	}
;;;1239   	else
;;;1240   	{
;;;1241   		for (i = 0; i < NewLen; i++)
000024  2500              MOVS     r5,#0
000026  e005              B        |L20.52|
                  |L20.40|
;;;1242   		{
;;;1243   			dispbuf[i] = _pLabel->pCaption[i];
000028  6920              LDR      r0,[r4,#0x10]
00002a  5d40              LDRB     r0,[r0,r5]
00002c  a901              ADD      r1,sp,#4
00002e  5548              STRB     r0,[r1,r5]
000030  1c68              ADDS     r0,r5,#1              ;1241
000032  b285              UXTH     r5,r0                 ;1241
                  |L20.52|
000034  42b5              CMP      r5,r6                 ;1241
000036  dbf7              BLT      |L20.40|
;;;1244   		}
;;;1245   		for (; i < _pLabel->MaxLen; i++)
000038  e004              B        |L20.68|
                  |L20.58|
;;;1246   		{
;;;1247   			dispbuf[i] = ' ';		/* 末尾填充空格 */
00003a  2020              MOVS     r0,#0x20
00003c  a901              ADD      r1,sp,#4
00003e  5548              STRB     r0,[r1,r5]
000040  1c68              ADDS     r0,r5,#1              ;1245
000042  b285              UXTH     r5,r0                 ;1245
                  |L20.68|
000044  8960              LDRH     r0,[r4,#0xa]          ;1245
000046  42a8              CMP      r0,r5                 ;1245
000048  dcf7              BGT      |L20.58|
;;;1248   		}
;;;1249   		dispbuf[i] = 0;
00004a  2000              MOVS     r0,#0
00004c  a901              ADD      r1,sp,#4
00004e  5548              STRB     r0,[r1,r5]
;;;1250   		LCD_DispStr(_pLabel->Left, _pLabel->Top, dispbuf, _pLabel->Font);
000050  88a1              LDRH     r1,[r4,#4]
000052  8860              LDRH     r0,[r4,#2]
000054  aa01              ADD      r2,sp,#4
000056  68e3              LDR      r3,[r4,#0xc]
000058  f7fffffe          BL       LCD_DispStr
                  |L20.92|
;;;1251   	}
;;;1252   #else
;;;1253   	if (g_ChipID == IC_8875)
;;;1254   	{
;;;1255   		RA8875_SetFont(_pLabel->Font->FontCode, 0, 0);	/* 设置32点阵字体，行间距=0，字间距=0 */
;;;1256   
;;;1257   		RA8875_SetBackColor(_pLabel->Font->BackColor);
;;;1258   		RA8875_SetFrontColor(_pLabel->Font->FrontColor);
;;;1259   
;;;1260   		RA8875_DispStr(_pLabel->Left, _pLabel->Top, _pLabel->Caption);
;;;1261   	}
;;;1262   	else
;;;1263   	{
;;;1264   
;;;1265   	}
;;;1266   #endif
;;;1267   }
00005c  b041              ADD      sp,sp,#0x104
00005e  bdf0              POP      {r4-r7,pc}
;;;1268   
                          ENDP


                          AREA ||i.LCD_DrawLine||, CODE, READONLY, ALIGN=1

                  LCD_DrawLine PROC
;;;771    */
;;;772    void LCD_DrawLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usX2 , uint16_t _usY2 , uint16_t _usColor)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;773    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;774    	ST7789V_DrawLine(_usX1 , _usY1 , _usX2, _usY2 , _usColor);
000010  463b              MOV      r3,r7
000012  4632              MOV      r2,r6
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f8cd8000          STR      r8,[sp,#0]
00001c  f7fffffe          BL       ST7789V_DrawLine
;;;775    }
000020  e8bd83f8          POP      {r3-r9,pc}
;;;776    
                          ENDP


                          AREA ||i.LCD_DrawPoints||, CODE, READONLY, ALIGN=1

                  LCD_DrawPoints PROC
;;;786    */
;;;787    void LCD_DrawPoints(uint16_t *x, uint16_t *y, uint16_t _usSize, uint16_t _usColor)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;788    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;789    	uint16_t i;
;;;790    
;;;791    	for (i = 0 ; i < _usSize - 1; i++)
00000c  2400              MOVS     r4,#0
00000e  e00f              B        |L22.48|
                  |L22.16|
;;;792    	{
;;;793    		LCD_DrawLine(x[i], y[i], x[i + 1], y[i + 1], _usColor);
000010  f1040c01          ADD      r12,r4,#1
000014  f8cd8000          STR      r8,[sp,#0]
000018  f836301c          LDRH     r3,[r6,r12,LSL #1]
00001c  f835201c          LDRH     r2,[r5,r12,LSL #1]
000020  f8361014          LDRH     r1,[r6,r4,LSL #1]
000024  f8350014          LDRH     r0,[r5,r4,LSL #1]
000028  f7fffffe          BL       LCD_DrawLine
00002c  1c60              ADDS     r0,r4,#1              ;791
00002e  b284              UXTH     r4,r0                 ;791
                  |L22.48|
000030  1e78              SUBS     r0,r7,#1              ;791
000032  42a0              CMP      r0,r4                 ;791
000034  dcec              BGT      |L22.16|
;;;794    	}
;;;795    }
000036  e8bd83f8          POP      {r3-r9,pc}
;;;796    
                          ENDP


                          AREA ||i.LCD_DrawRect||, CODE, READONLY, ALIGN=1

                  LCD_DrawRect PROC
;;;807    */
;;;808    void LCD_DrawRect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;809    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;810    	ST7789V_DrawRect(_usX, _usY, _usHeight, _usWidth, _usColor);
000010  463b              MOV      r3,r7
000012  4632              MOV      r2,r6
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f8cd8000          STR      r8,[sp,#0]
00001c  f7fffffe          BL       ST7789V_DrawRect
;;;811    }
000020  e8bd83f8          POP      {r3-r9,pc}
;;;812    
                          ENDP


                          AREA ||i.LCD_DrawWin||, CODE, READONLY, ALIGN=1

                  LCD_DrawWin PROC
;;;868    */
;;;869    void LCD_DrawWin(WIN_T *_pWin)
000000  b5f8              PUSH     {r3-r7,lr}
;;;870    {
000002  4604              MOV      r4,r0
;;;871    #if 1
;;;872    	uint16_t TitleHegiht;
;;;873    
;;;874    	TitleHegiht = 20;
000004  2514              MOVS     r5,#0x14
;;;875    
;;;876    	/* 绘制窗口外框 */
;;;877    	LCD_DrawRect(_pWin->Left, _pWin->Top, _pWin->Height, _pWin->Width, WIN_BORDER_COLOR);
000006  f44f7004          MOV      r0,#0x210
00000a  9000              STR      r0,[sp,#0]
00000c  8923              LDRH     r3,[r4,#8]
00000e  88e2              LDRH     r2,[r4,#6]
000010  88a1              LDRH     r1,[r4,#4]
000012  8860              LDRH     r0,[r4,#2]
000014  f7fffffe          BL       LCD_DrawRect
;;;878    	LCD_DrawRect(_pWin->Left + 1, _pWin->Top + 1, _pWin->Height - 2, _pWin->Width - 2, WIN_BORDER_COLOR);
000018  f44f7004          MOV      r0,#0x210
00001c  9000              STR      r0,[sp,#0]
00001e  8926              LDRH     r6,[r4,#8]
000020  1eb6              SUBS     r6,r6,#2
000022  b2b3              UXTH     r3,r6
000024  88e6              LDRH     r6,[r4,#6]
000026  1eb6              SUBS     r6,r6,#2
000028  b2b2              UXTH     r2,r6
00002a  88a6              LDRH     r6,[r4,#4]
00002c  1c76              ADDS     r6,r6,#1
00002e  b2b1              UXTH     r1,r6
000030  8866              LDRH     r6,[r4,#2]
000032  1c76              ADDS     r6,r6,#1
000034  b2b0              UXTH     r0,r6
000036  f7fffffe          BL       LCD_DrawRect
;;;879    
;;;880    	/* 窗口标题栏 */
;;;881    	LCD_Fill_Rect(_pWin->Left + 2, _pWin->Top + 2, TitleHegiht, _pWin->Width - 4, WIN_TITLE_COLOR);
00003a  f244203f          MOV      r0,#0x423f
00003e  9000              STR      r0,[sp,#0]
000040  8922              LDRH     r2,[r4,#8]
000042  1f12              SUBS     r2,r2,#4
000044  b293              UXTH     r3,r2
000046  88a2              LDRH     r2,[r4,#4]
000048  1c92              ADDS     r2,r2,#2
00004a  b291              UXTH     r1,r2
00004c  8862              LDRH     r2,[r4,#2]
00004e  1c92              ADDS     r2,r2,#2
000050  b290              UXTH     r0,r2
000052  462a              MOV      r2,r5
000054  f7fffffe          BL       LCD_Fill_Rect
;;;882    
;;;883    	/* 窗体填充 */
;;;884    	LCD_Fill_Rect(_pWin->Left + 2, _pWin->Top + TitleHegiht + 2, _pWin->Height - 4 - TitleHegiht,
000058  f24b50b6          MOV      r0,#0xb5b6
00005c  9000              STR      r0,[sp,#0]
00005e  8926              LDRH     r6,[r4,#8]
000060  1f36              SUBS     r6,r6,#4
000062  b2b3              UXTH     r3,r6
000064  88e6              LDRH     r6,[r4,#6]
000066  1f36              SUBS     r6,r6,#4
000068  1b76              SUBS     r6,r6,r5
00006a  b2b2              UXTH     r2,r6
00006c  88a6              LDRH     r6,[r4,#4]
00006e  442e              ADD      r6,r6,r5
000070  1cb6              ADDS     r6,r6,#2
000072  b2b1              UXTH     r1,r6
000074  8866              LDRH     r6,[r4,#2]
000076  1cb6              ADDS     r6,r6,#2
000078  b2b0              UXTH     r0,r6
00007a  f7fffffe          BL       LCD_Fill_Rect
;;;885    		_pWin->Width - 4, WIN_BODY_COLOR);
;;;886    
;;;887    	LCD_DispStr(_pWin->Left + 3, _pWin->Top + 2, _pWin->pCaption, _pWin->Font);
00007e  88a6              LDRH     r6,[r4,#4]
000080  1cb6              ADDS     r6,r6,#2
000082  b2b1              UXTH     r1,r6
000084  8866              LDRH     r6,[r4,#2]
000086  1cf6              ADDS     r6,r6,#3
000088  b2b0              UXTH     r0,r6
00008a  e9d43203          LDRD     r3,r2,[r4,#0xc]
00008e  f7fffffe          BL       LCD_DispStr
;;;888    #else
;;;889    	if (g_ChipID == IC_8875)
;;;890    	{
;;;891    		uint16_t TitleHegiht;
;;;892    
;;;893    		TitleHegiht = 28;
;;;894    
;;;895    		/* 绘制窗口外框 */
;;;896    		RA8875_DrawRect(_pWin->Left, _pWin->Top, _pWin->Height, _pWin->Width, WIN_BORDER_COLOR);
;;;897    		RA8875_DrawRect(_pWin->Left + 1, _pWin->Top + 1, _pWin->Height - 2, _pWin->Width - 2, WIN_BORDER_COLOR);
;;;898    
;;;899    		/* 窗口标题栏 */
;;;900    		RA8875_FillRect(_pWin->Left + 2, _pWin->Top + 2, TitleHegiht, _pWin->Width - 4, WIN_TITLE_COLOR);
;;;901    
;;;902    		/* 窗体填充 */
;;;903    		RA8875_FillRect(_pWin->Left + 2, _pWin->Top + TitleHegiht + 2, _pWin->Height - 4 - TitleHegiht, _pWin->Width - 4, WIN_BODY_COLOR);
;;;904    
;;;905    		//RA8875_SetFont(_pWin->Font.FontCode, 0, 0);
;;;906    		RA8875_SetFont(RA_FONT_24, 0, 0);
;;;907    
;;;908    		RA8875_SetBackColor(WIN_TITLE_COLOR);
;;;909    		RA8875_SetFrontColor(WIN_CAPTION_COLOR);
;;;910    		RA8875_DispStr(_pWin->Left + 3, _pWin->Top + 2, _pWin->Caption);
;;;911    	}
;;;912    	else
;;;913    	{
;;;914    		;
;;;915    	}
;;;916    #endif
;;;917    }
000092  bdf8              POP      {r3-r7,pc}
;;;918    
                          ENDP


                          AREA ||i.LCD_Fill_Rect||, CODE, READONLY, ALIGN=1

                  LCD_Fill_Rect PROC
;;;823    */
;;;824    void LCD_Fill_Rect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;825    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;826    	ST7789V_FillRect(_usX, _usY, _usHeight, _usWidth, _usColor);
000010  463b              MOV      r3,r7
000012  4632              MOV      r2,r6
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f8cd8000          STR      r8,[sp,#0]
00001c  f7fffffe          BL       ST7789V_FillRect
;;;827    }
000020  e8bd83f8          POP      {r3-r9,pc}
;;;828    
                          ENDP


                          AREA ||i.LCD_GetBackLight||, CODE, READONLY, ALIGN=2

                  LCD_GetBackLight PROC
;;;1728   */
;;;1729   uint8_t LCD_GetBackLight(void)
000000  4801              LDR      r0,|L26.8|
;;;1730   {
;;;1731   	return s_ucBright;
000002  7800              LDRB     r0,[r0,#0]  ; s_ucBright
;;;1732   }
000004  4770              BX       lr
;;;1733   /*
                          ENDP

000006  0000              DCW      0x0000
                  |L26.8|
                          DCD      s_ucBright

                          AREA ||i.LCD_GetChipDescribe||, CODE, READONLY, ALIGN=2

                  LCD_GetChipDescribe PROC
;;;138    */
;;;139    void LCD_GetChipDescribe(char *_str)
000000  b510              PUSH     {r4,lr}
;;;140    {
000002  4604              MOV      r4,r0
;;;141    	switch (g_ChipID)
000004  481b              LDR      r0,|L27.116|
000006  8801              LDRH     r1,[r0,#0]  ; g_ChipID
000008  f2454220          MOV      r2,#0x5420
00000c  1a88              SUBS     r0,r1,r2
00000e  4291              CMP      r1,r2
000010  d010              BEQ      |L27.52|
000012  dc06              BGT      |L27.34|
000014  2975              CMP      r1,#0x75
000016  d01c              BEQ      |L27.82|
000018  f46f4080          MVN      r0,#0x4000
00001c  4408              ADD      r0,r0,r1
00001e  bb10              CBNZ     r0,|L27.102|
000020  e00d              B        |L27.62|
                  |L27.34|
000022  f5a04080          SUB      r0,r0,#0x4000
000026  3868              SUBS     r0,r0,#0x68
000028  b1c0              CBZ      r0,|L27.92|
00002a  f46f5102          MVN      r1,#0x2080
00002e  4408              ADD      r0,r0,r1
000030  b9c8              CBNZ     r0,|L27.102|
000032  e009              B        |L27.72|
                  |L27.52|
;;;142    	{
;;;143    		case IC_5420:
;;;144    			strcpy(_str, CHIP_STR_5420);
000034  a110              ADR      r1,|L27.120|
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       strcpy
;;;145    			break;
00003c  e018              B        |L27.112|
                  |L27.62|
;;;146    
;;;147    		case IC_4001:
;;;148    			strcpy(_str, CHIP_STR_4001);
00003e  a111              ADR      r1,|L27.132|
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       strcpy
;;;149    			break;
000046  e013              B        |L27.112|
                  |L27.72|
;;;150    
;;;151    		case IC_61509:
;;;152    			strcpy(_str, CHIP_STR_61509);
000048  a111              ADR      r1,|L27.144|
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       strcpy
;;;153    			break;
000050  e00e              B        |L27.112|
                  |L27.82|
;;;154    
;;;155    		case IC_8875:
;;;156    			strcpy(_str, CHIP_STR_8875);
000052  a111              ADR      r1,|L27.152|
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       strcpy
;;;157    			break;
00005a  e009              B        |L27.112|
                  |L27.92|
;;;158    
;;;159    		case IC_9488:
;;;160    			strcpy(_str, CHIP_STR_9488);
00005c  a110              ADR      r1,|L27.160|
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       strcpy
;;;161    			break;
000064  e004              B        |L27.112|
                  |L27.102|
;;;162    
;;;163    		default:
;;;164    			strcpy(_str, "Unknow");
000066  a110              ADR      r1,|L27.168|
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       strcpy
;;;165    			break;
00006e  bf00              NOP      
                  |L27.112|
000070  bf00              NOP                            ;145
;;;166    	}
;;;167    }
000072  bd10              POP      {r4,pc}
;;;168    
                          ENDP

                  |L27.116|
                          DCD      g_ChipID
                  |L27.120|
000078  53504644          DCB      "SPFD5420A",0
00007c  35343230
000080  4100    
000082  00                DCB      0
000083  00                DCB      0
                  |L27.132|
000084  4f544d34          DCB      "OTM4001A",0
000088  30303141
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L27.144|
000090  52363135          DCB      "R61509V",0
000094  30395600
                  |L27.152|
000098  52413838          DCB      "RA8875",0
00009c  373500  
00009f  00                DCB      0
                  |L27.160|
0000a0  494c4939          DCB      "ILI9488",0
0000a4  34383800
                  |L27.168|
0000a8  556e6b6e          DCB      "Unknow",0
0000ac  6f7700  
0000af  00                DCB      0

                          AREA ||i.LCD_GetFontHeight||, CODE, READONLY, ALIGN=1

                  LCD_GetFontHeight PROC
;;;296    */
;;;297    uint16_t LCD_GetFontHeight(FONT_T *_tFont)
000000  4601              MOV      r1,r0
;;;298    {
;;;299    	uint16_t height = 16;
000002  2010              MOVS     r0,#0x10
;;;300    
;;;301    	switch (_tFont->FontCode)
000004  780a              LDRB     r2,[r1,#0]
000006  2a07              CMP      r2,#7
000008  d210              BCS      |L28.44|
00000a  e8dff002          TBB      [pc,r2]
00000e  0406              DCB      0x04,0x06
000010  0a0c0709          DCB      0x0a,0x0c,0x07,0x09
000014  0d00              DCB      0x0d,0x00
;;;302    	{
;;;303    		case FC_ST_12:
;;;304    			height = 12;
000016  200c              MOVS     r0,#0xc
;;;305    			break;
000018  e008              B        |L28.44|
;;;306    
;;;307    		case FC_ST_16:
;;;308    		case FC_RA8875_16:			
00001a  bf00              NOP      
;;;309    			height = 16;
00001c  2010              MOVS     r0,#0x10
;;;310    			break;
00001e  e005              B        |L28.44|
;;;311    			
;;;312    		case FC_RA8875_24:			
;;;313    		case FC_ST_24:
000020  bf00              NOP      
;;;314    			height = 24;
000022  2018              MOVS     r0,#0x18
;;;315    			break;
000024  e002              B        |L28.44|
;;;316    			
;;;317    		case FC_ST_32:
;;;318    		case FC_RA8875_32:	
000026  bf00              NOP      
;;;319    			height = 32;
000028  2020              MOVS     r0,#0x20
;;;320    			break;			
00002a  bf00              NOP      
                  |L28.44|
00002c  bf00              NOP                            ;305
;;;321    	}
;;;322    	return height;
;;;323    }
00002e  4770              BX       lr
;;;324    
                          ENDP


                          AREA ||i.LCD_GetFontWidth||, CODE, READONLY, ALIGN=1

                  LCD_GetFontWidth PROC
;;;259    */
;;;260    uint16_t LCD_GetFontWidth(FONT_T *_tFont)
000000  4601              MOV      r1,r0
;;;261    {
;;;262    	uint16_t font_width = 16;
000002  2010              MOVS     r0,#0x10
;;;263    
;;;264    	switch (_tFont->FontCode)
000004  780a              LDRB     r2,[r1,#0]
000006  2a07              CMP      r2,#7
000008  d210              BCS      |L29.44|
00000a  e8dff002          TBB      [pc,r2]
00000e  0406              DCB      0x04,0x06
000010  0a0c0709          DCB      0x0a,0x0c,0x07,0x09
000014  0d00              DCB      0x0d,0x00
;;;265    	{
;;;266    		case FC_ST_12:
;;;267    			font_width = 12;
000016  200c              MOVS     r0,#0xc
;;;268    			break;
000018  e008              B        |L29.44|
;;;269    
;;;270    		case FC_ST_16:
;;;271    		case FC_RA8875_16:			
00001a  bf00              NOP      
;;;272    			font_width = 16;
00001c  2010              MOVS     r0,#0x10
;;;273    			break;
00001e  e005              B        |L29.44|
;;;274    			
;;;275    		case FC_RA8875_24:			
;;;276    		case FC_ST_24:
000020  bf00              NOP      
;;;277    			font_width = 24;
000022  2018              MOVS     r0,#0x18
;;;278    			break;
000024  e002              B        |L29.44|
;;;279    			
;;;280    		case FC_ST_32:
;;;281    		case FC_RA8875_32:	
000026  bf00              NOP      
;;;282    			font_width = 32;
000028  2020              MOVS     r0,#0x20
;;;283    			break;			
00002a  bf00              NOP      
                  |L29.44|
00002c  bf00              NOP                            ;268
;;;284    	}
;;;285    	return font_width;
;;;286    }
00002e  4770              BX       lr
;;;287    
                          ENDP


                          AREA ||i.LCD_GetHeight||, CODE, READONLY, ALIGN=2

                  LCD_GetHeight PROC
;;;176    */
;;;177    uint16_t LCD_GetHeight(void)
000000  4801              LDR      r0,|L30.8|
;;;178    {
;;;179    	return g_LcdHeight;
000002  8800              LDRH     r0,[r0,#0]  ; g_LcdHeight
;;;180    }
000004  4770              BX       lr
;;;181    
                          ENDP

000006  0000              DCW      0x0000
                  |L30.8|
                          DCD      g_LcdHeight

                          AREA ||i.LCD_GetPixel||, CODE, READONLY, ALIGN=1

                  LCD_GetPixel PROC
;;;751    */
;;;752    uint16_t LCD_GetPixel(uint16_t _usX, uint16_t _usY)
000000  b570              PUSH     {r4-r6,lr}
;;;753    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;754    	uint16_t usRGB;
;;;755    
;;;756    	usRGB = ST7789V_GetPixel(_usX, _usY);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       ST7789V_GetPixel
00000e  4606              MOV      r6,r0
;;;757    
;;;758    	return usRGB;
000010  4630              MOV      r0,r6
;;;759    }
000012  bd70              POP      {r4-r6,pc}
;;;760    
                          ENDP


                          AREA ||i.LCD_GetStrWidth||, CODE, READONLY, ALIGN=1

                  LCD_GetStrWidth PROC
;;;334    */
;;;335    uint16_t LCD_GetStrWidth(char *_ptr, FONT_T *_tFont)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;336    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
;;;337    	char *p = _ptr;
000008  4634              MOV      r4,r6
;;;338    	uint16_t width = 0;
00000a  2700              MOVS     r7,#0
;;;339    	uint8_t code1, code2;
;;;340    	uint16_t font_width;
;;;341    
;;;342    	font_width = LCD_GetFontWidth(_tFont);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       LCD_GetFontWidth
000012  4682              MOV      r10,r0
;;;343    
;;;344    	while (*p != 0)
000014  e030              B        |L32.120|
                  |L32.22|
;;;345    	{
;;;346    		code1 = *p;	/* 读取字符串数据， 该数据可能是ascii代码，也可能汉字代码的高字节 */
000016  f8949000          LDRB     r9,[r4,#0]
;;;347    		if (code1 < 0x80)	/* ASCII */
00001a  f1b90f80          CMP      r9,#0x80
00001e  da1b              BGE      |L32.88|
;;;348    		{
;;;349    			switch(_tFont->FontCode)
000020  7828              LDRB     r0,[r5,#0]
000022  2807              CMP      r0,#7
000024  d214              BCS      |L32.80|
000026  e8dff000          TBB      [pc,r0]
00002a  070a              DCB      0x07,0x0a
00002c  0d100405          DCB      0x0d,0x10,0x04,0x05
000030  0600              DCB      0x06,0x00
;;;350    			{
;;;351    				case FC_RA8875_16:
;;;352    					//font_width = g_RA8875_Ascii16_width[code1 - 0x20];
;;;353    					break;
000032  e010              B        |L32.86|
;;;354    				
;;;355    				case FC_RA8875_24:
;;;356    					//font_width = g_RA8875_Ascii24_width[code1 - 0x20];
;;;357    					break;
000034  e00f              B        |L32.86|
;;;358    				
;;;359    				case FC_RA8875_32:
;;;360    					//font_width = g_RA8875_Ascii32_width[code1 - 0x20];
;;;361    					break;
000036  e00e              B        |L32.86|
;;;362    				
;;;363    				case FC_ST_12:
;;;364    					font_width = 6;
000038  f04f0a06          MOV      r10,#6
;;;365    					break;
00003c  e00b              B        |L32.86|
;;;366    
;;;367    				case FC_ST_16:		
;;;368    					font_width = 8;
00003e  f04f0a08          MOV      r10,#8
;;;369    					break;
000042  e008              B        |L32.86|
;;;370    					
;;;371    				case FC_ST_24:			
;;;372    					font_width = 12;
000044  f04f0a0c          MOV      r10,#0xc
;;;373    					break;
000048  e005              B        |L32.86|
;;;374    					
;;;375    				case FC_ST_32:
;;;376    					font_width = 16;
00004a  f04f0a10          MOV      r10,#0x10
;;;377    					break;
00004e  e002              B        |L32.86|
                  |L32.80|
;;;378    				
;;;379    				default:
;;;380    					font_width = 8;
000050  f04f0a08          MOV      r10,#8
;;;381    					break;					
000054  bf00              NOP      
                  |L32.86|
000056  e00b              B        |L32.112|
                  |L32.88|
;;;382    			}
;;;383    			
;;;384    		}
;;;385    		else	/* 汉字 */
;;;386    		{
;;;387    			code2 = *++p;
000058  1c60              ADDS     r0,r4,#1
00005a  4604              MOV      r4,r0
00005c  f8908000          LDRB     r8,[r0,#0]
;;;388    			if (code2 == 0)
000060  f1b80f00          CMP      r8,#0
000064  d100              BNE      |L32.104|
;;;389    			{
;;;390    				break;
000066  e00a              B        |L32.126|
                  |L32.104|
;;;391    			}
;;;392    			font_width = LCD_GetFontWidth(_tFont);
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       LCD_GetFontWidth
00006e  4682              MOV      r10,r0
                  |L32.112|
;;;393    			
;;;394    		}
;;;395    		width += font_width;
000070  eb07000a          ADD      r0,r7,r10
000074  b287              UXTH     r7,r0
;;;396    		p++;
000076  1c64              ADDS     r4,r4,#1
                  |L32.120|
000078  7820              LDRB     r0,[r4,#0]            ;344
00007a  2800              CMP      r0,#0                 ;344
00007c  d1cb              BNE      |L32.22|
                  |L32.126|
00007e  bf00              NOP                            ;390
;;;397    	}
;;;398    
;;;399    	return width;
000080  4638              MOV      r0,r7
;;;400    }
000082  e8bd87f0          POP      {r4-r10,pc}
;;;401    
                          ENDP


                          AREA ||i.LCD_GetWidth||, CODE, READONLY, ALIGN=2

                  LCD_GetWidth PROC
;;;189    */
;;;190    uint16_t LCD_GetWidth(void)
000000  4801              LDR      r0,|L33.8|
;;;191    {
;;;192    	return g_LcdWidth;
000002  8800              LDRH     r0,[r0,#0]  ; g_LcdWidth
;;;193    }
000004  4770              BX       lr
;;;194    
                          ENDP

000006  0000              DCW      0x0000
                  |L33.8|
                          DCD      g_LcdWidth

                          AREA ||i.LCD_HardReset||, CODE, READONLY, ALIGN=2

                  LCD_HardReset PROC
;;;107    */
;;;108    void LCD_HardReset(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;109    {
;;;110    	GPIO_InitTypeDef GPIO_InitStructure;
;;;111    
;;;112    	/* 使能 GPIO时钟 */
;;;113    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;114    	
;;;115    	/* 配置背光GPIO为推挽输出模式 */
;;;116    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
00000a  f44f7080          MOV      r0,#0x100
00000e  9000              STR      r0,[sp,#0]
;;;117    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000010  2001              MOVS     r0,#1
000012  f88d0004          STRB     r0,[sp,#4]
;;;118    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
000016  2003              MOVS     r0,#3
000018  f88d0005          STRB     r0,[sp,#5]
;;;119    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00001c  2000              MOVS     r0,#0
00001e  f88d0006          STRB     r0,[sp,#6]
;;;120    	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
000022  f88d0007          STRB     r0,[sp,#7]
;;;121    	GPIO_Init(GPIOA, &GPIO_InitStructure);
000026  4669              MOV      r1,sp
000028  480d              LDR      r0,|L34.96|
00002a  f7fffffe          BL       GPIO_Init
;;;122    
;;;123    	GPIO_SetBits(GPIOA, GPIO_Pin_8);
00002e  f44f7180          MOV      r1,#0x100
000032  480b              LDR      r0,|L34.96|
000034  f7fffffe          BL       GPIO_SetBits
;;;124    	bsp_DelayMS(1);
000038  2001              MOVS     r0,#1
00003a  f7fffffe          BL       bsp_DelayMS
;;;125    	GPIO_ResetBits(GPIOA, GPIO_Pin_8);
00003e  f44f7180          MOV      r1,#0x100
000042  4807              LDR      r0,|L34.96|
000044  f7fffffe          BL       GPIO_ResetBits
;;;126    	bsp_DelayMS(10);
000048  200a              MOVS     r0,#0xa
00004a  f7fffffe          BL       bsp_DelayMS
;;;127    	GPIO_SetBits(GPIOA, GPIO_Pin_8);
00004e  f44f7180          MOV      r1,#0x100
000052  4803              LDR      r0,|L34.96|
000054  f7fffffe          BL       GPIO_SetBits
;;;128     	bsp_DelayMS(120);
000058  2078              MOVS     r0,#0x78
00005a  f7fffffe          BL       bsp_DelayMS
;;;129    }
00005e  bd1c              POP      {r2-r4,pc}
;;;130    
                          ENDP

                  |L34.96|
                          DCD      0x40020000

                          AREA ||i.LCD_InitButton||, CODE, READONLY, ALIGN=1

                  LCD_InitButton PROC
;;;1809   */
;;;1810   void LCD_InitButton(BUTTON_T *_btn, uint16_t _x, uint16_t _y, uint16_t _h, uint16_t _w, char *_pCaption, FONT_T *_pFont)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1811   {
000002  ac05              ADD      r4,sp,#0x14
000004  cc70              LDM      r4,{r4-r6}
;;;1812   	_btn->Left = _x;
000006  8041              STRH     r1,[r0,#2]
;;;1813   	_btn->Top = _y;
000008  8082              STRH     r2,[r0,#4]
;;;1814   	_btn->Height = _h;
00000a  80c3              STRH     r3,[r0,#6]
;;;1815   	_btn->Width = _w;
00000c  8104              STRH     r4,[r0,#8]
;;;1816   	_btn->pCaption = _pCaption;	
00000e  6105              STR      r5,[r0,#0x10]
;;;1817   	_btn->Font = _pFont;
000010  60c6              STR      r6,[r0,#0xc]
;;;1818   	_btn->Focus = 0;
000012  2700              MOVS     r7,#0
000014  7507              STRB     r7,[r0,#0x14]
;;;1819   }
000016  bdf0              POP      {r4-r7,pc}
;;;1820   
                          ENDP


                          AREA ||i.LCD_InitHard||, CODE, READONLY, ALIGN=2

                  LCD_InitHard PROC
;;;73     */
;;;74     void LCD_InitHard(void)
000000  b510              PUSH     {r4,lr}
;;;75     {
;;;76     	uint32_t id;
;;;77     
;;;78     	/* 配置LCD控制口线GPIO */
;;;79     	LCD_CtrlLinesConfig();
000002  f7fffffe          BL       LCD_CtrlLinesConfig
;;;80     
;;;81     	LCD_HardReset();	/* 硬件复位 （STM32-V5 无需），针对其他GPIO控制LCD复位的产品 */
000006  f7fffffe          BL       LCD_HardReset
;;;82     	
;;;83     	/* FSMC重置后必须加延迟才能访问总线设备  */
;;;84     	bsp_DelayMS(20);
00000a  2014              MOVS     r0,#0x14
00000c  f7fffffe          BL       bsp_DelayMS
;;;85     
;;;86     	id = ST7789V_ReadID();
000010  f7fffffe          BL       ST7789V_ReadID
000014  4604              MOV      r4,r0
;;;87     	if (id == IC_ST7789V_ID)		/* 3.5寸屏 */
000016  4809              LDR      r0,|L36.60|
000018  4284              CMP      r4,r0
00001a  d105              BNE      |L36.40|
;;;88     	{
;;;89     		g_ChipID = IC_7789;
00001c  f2477089          MOV      r0,#0x7789
000020  4907              LDR      r1,|L36.64|
000022  8008              STRH     r0,[r1,#0]
;;;90     		ST7789V_InitHard();
000024  f7fffffe          BL       ST7789V_InitHard
                  |L36.40|
;;;91     	}
;;;92     
;;;93     	LCD_SetDirection(0);
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       LCD_SetDirection
;;;94     
;;;95     	LCD_ClrScr(CL_BLACK);	/* 清屏，显示全黑 */
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       LCD_ClrScr
;;;96     
;;;97     	LCD_SetBackLight(BRIGHT_DEFAULT);	 /* 打开背光，设置为缺省亮度 */
000034  2032              MOVS     r0,#0x32
000036  f7fffffe          BL       LCD_SetBackLight
;;;98     }
00003a  bd10              POP      {r4,pc}
;;;99     
                          ENDP

                  |L36.60|
                          DCD      0x00858552
                  |L36.64|
                          DCD      g_ChipID

                          AREA ||i.LCD_PutPixel||, CODE, READONLY, ALIGN=1

                  LCD_PutPixel PROC
;;;736    */
;;;737    void LCD_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
000000  b570              PUSH     {r4-r6,lr}
;;;738    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;739    	ST7789V_PutPixel(_usX, _usY, _usColor);
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       ST7789V_PutPixel
;;;740    }
000012  bd70              POP      {r4-r6,pc}
;;;741    
                          ENDP


                          AREA ||i.LCD_SetBackLight||, CODE, READONLY, ALIGN=2

                  LCD_SetBackLight PROC
;;;1713   */
;;;1714   void LCD_SetBackLight(uint8_t _bright)
000000  b510              PUSH     {r4,lr}
;;;1715   {
000002  4604              MOV      r4,r0
;;;1716   	s_ucBright =  _bright;	/* 保存背光值 */
000004  4802              LDR      r0,|L38.16|
000006  7004              STRB     r4,[r0,#0]
;;;1717   
;;;1718   	LCD_SetPwmBackLight(_bright);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       LCD_SetPwmBackLight
;;;1719   }
00000e  bd10              POP      {r4,pc}
;;;1720   
                          ENDP

                  |L38.16|
                          DCD      s_ucBright

                          AREA ||i.LCD_SetDirection||, CODE, READONLY, ALIGN=2

                  LCD_SetDirection PROC
;;;1740   */
;;;1741   void LCD_SetDirection(uint8_t _dir)
000000  b510              PUSH     {r4,lr}
;;;1742   {
000002  4604              MOV      r4,r0
;;;1743   	g_LcdDirection =  _dir;		/* 保存在全局变量 */
000004  4802              LDR      r0,|L39.16|
000006  7004              STRB     r4,[r0,#0]
;;;1744   
;;;1745   	ST7789V_SetDirection(_dir);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       ST7789V_SetDirection
;;;1746   }
00000e  bd10              POP      {r4,pc}
;;;1747   
                          ENDP

                  |L39.16|
                          DCD      g_LcdDirection

                          AREA ||i.LCD_SetPwmBackLight||, CODE, READONLY, ALIGN=2

                  LCD_SetPwmBackLight PROC
;;;1697   */
;;;1698   void LCD_SetPwmBackLight(uint8_t _bright)
000000  b51c              PUSH     {r2-r4,lr}
;;;1699   {
000002  4604              MOV      r4,r0
;;;1700   	/* STM32-V4开发板，PB1/TIM3_CH4/TIM8_CH3N 控制背光PWM ； 因为 TIM3用于红外解码。因此用TIM8_CH3N做背光PWM */
;;;1701   	//bsp_SetTIMOutPWM(GPIOB, GPIO_Pin_1, TIM3, 4, 100, (_bright * 10000) /255);	// TIM3_CH4
;;;1702   	bsp_SetTIMOutPWM_N(GPIOA, GPIO_Pin_2, TIM2, 3, 200000, _bright);	// TIM2_CH3N
000004  4804              LDR      r0,|L40.24|
000006  2303              MOVS     r3,#3
000008  0602              LSLS     r2,r0,#24
00000a  2104              MOVS     r1,#4
00000c  e9cd0400          STRD     r0,r4,[sp,#0]
000010  4802              LDR      r0,|L40.28|
000012  f7fffffe          BL       bsp_SetTIMOutPWM_N
;;;1703   }
000016  bd1c              POP      {r2-r4,pc}
;;;1704   
                          ENDP

                  |L40.24|
                          DCD      0x00030d40
                  |L40.28|
                          DCD      0x40020000

                          AREA ||i._LCD_ReadAsciiDot||, CODE, READONLY, ALIGN=1

                  _LCD_ReadAsciiDot PROC
;;;412    */
;;;413    static void _LCD_ReadAsciiDot(uint8_t _code, uint8_t _fontcode, uint8_t *_pBuf)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;414    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;415    	const uint8_t *pAscDot;
;;;416    	uint8_t font_bytes = 0;
00000a  2400              MOVS     r4,#0
;;;417    
;;;418    	pAscDot = 0;
00000c  46a2              MOV      r10,r4
;;;419    	switch (_fontcode)
00000e  2d07              CMP      r5,#7
000010  d20f              BCS      |L41.50|
000012  e8dff005          TBB      [pc,r5]
000016  0408              DCB      0x04,0x08
000018  06070a0b          DCB      0x06,0x07,0x0a,0x0b
00001c  0c00              DCB      0x0c,0x00
;;;420    	{
;;;421    		case FC_ST_12:		/* 12点阵 */
;;;422    			font_bytes = 24;
00001e  2418              MOVS     r4,#0x18
;;;423    			//pAscDot = g_Ascii12;	
;;;424    			break;
000020  e007              B        |L41.50|
;;;425    		
;;;426    		case FC_ST_24:
;;;427    		case FC_ST_32:
000022  bf00              NOP      
;;;428    		case FC_ST_16:
000024  bf00              NOP      
;;;429    			/* 缺省是16点阵 */
;;;430    			font_bytes = 32;
000026  2420              MOVS     r4,#0x20
;;;431    			//pAscDot = g_Ascii16;
;;;432    			break;
000028  e003              B        |L41.50|
;;;433    		
;;;434    		case FC_RA8875_16:
;;;435    		case FC_RA8875_24:
00002a  bf00              NOP      
;;;436    		case FC_RA8875_32:
00002c  bf00              NOP      
                  |L41.46|
;;;437    			return;
;;;438    	}	
;;;439    
;;;440    	/* 将CPU内部Flash中的ascii字符点阵复制到buf */
;;;441    	memcpy(_pBuf, &pAscDot[_code * (font_bytes / 2)], (font_bytes / 2));	
;;;442    }
00002e  e8bd87f0          POP      {r4-r10,pc}
                  |L41.50|
000032  bf00              NOP                            ;424
000034  4626              MOV      r6,r4                 ;441
000036  46a1              MOV      r9,r4                 ;441
000038  eb0470d9          ADD      r0,r4,r9,LSR #31      ;441
00003c  1040              ASRS     r0,r0,#1              ;441
00003e  fb07a100          MLA      r1,r7,r0,r10          ;441
000042  eb0470d6          ADD      r0,r4,r6,LSR #31      ;441
000046  1042              ASRS     r2,r0,#1              ;441
000048  4640              MOV      r0,r8                 ;441
00004a  f7fffffe          BL       __aeabi_memcpy
00004e  bf00              NOP      
000050  e7ed              B        |L41.46|
;;;443    
                          ENDP


                          AREA ||i._LCD_ReadHZDot||, CODE, READONLY, ALIGN=1

                  _LCD_ReadHZDot PROC
;;;454    */
;;;455    static void _LCD_ReadHZDot(uint8_t _code1, uint8_t _code2,  uint8_t _fontcode, uint8_t *_pBuf)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;456    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  4699              MOV      r9,r3
;;;457    	#ifdef USE_SMALL_FONT	/* 使用CPU 内部Flash 小字库 */
;;;458    		uint8_t *pDot;
;;;459    		uint8_t font_bytes = 0;
;;;460    		uint32_t address;
;;;461    		uint16_t m;
;;;462    
;;;463    		pDot = 0;	/* 仅仅用于避免告警 */
;;;464    		switch (_fontcode)
;;;465    		{
;;;466    			case FC_ST_12:		/* 12点阵 */
;;;467    				font_bytes = 24;
;;;468    				pDot = (uint8_t *)g_Hz12;	
;;;469    				break;
;;;470    			
;;;471    			case FC_ST_16:
;;;472    				font_bytes = 32;
;;;473    				pDot = (uint8_t *)g_Hz16;
;;;474    				break;
;;;475    	
;;;476    			case FC_ST_24:
;;;477    				font_bytes = 72;
;;;478    				pDot = (uint8_t *)g_Hz24;
;;;479    				break;			
;;;480    				
;;;481    			case FC_ST_32:	
;;;482    				font_bytes = 128;
;;;483    				pDot = (uint8_t *)g_Hz32;
;;;484    				break;						
;;;485    			
;;;486    			case FC_RA8875_16:
;;;487    			case FC_RA8875_24:
;;;488    			case FC_RA8875_32:
;;;489    				return;
;;;490    		}	
;;;491    
;;;492    		m = 0;
;;;493    		while(1)
;;;494    		{
;;;495    			address = m * (font_bytes + 2);
;;;496    			m++;
;;;497    			if ((_code1 == pDot[address + 0]) && (_code2 == pDot[address + 1]))
;;;498    			{
;;;499    				address += 2;
;;;500    				memcpy(_pBuf, &pDot[address], font_bytes);
;;;501    				break;
;;;502    			}
;;;503    			else if ((pDot[address + 0] == 0xFF) && (pDot[address + 1] == 0xFF))
;;;504    			{
;;;505    				/* 字库搜索完毕，未找到，则填充全FF */
;;;506    				memset(_pBuf, 0xFF, font_bytes);
;;;507    				break;
;;;508    			}
;;;509    		}
;;;510    	#else	/* 用全字库 */
;;;511    		uint8_t *pDot = 0;
00000c  f04f0800          MOV      r8,#0
;;;512    		uint8_t font_bytes = 0;
000010  2700              MOVS     r7,#0
;;;513    			
;;;514    		switch (_fontcode)
000012  2e07              CMP      r6,#7
000014  d211              BCS      |L42.58|
000016  e8dff006          TBB      [pc,r6]
00001a  0406              DCB      0x04,0x06
00001c  080a0c0d          DCB      0x08,0x0a,0x0c,0x0d
000020  0e00              DCB      0x0e,0x00
;;;515    		{
;;;516    			case FC_ST_12:		/* 12点阵 */
;;;517    				font_bytes = 24;
000022  2718              MOVS     r7,#0x18
;;;518    				//pDot = (uint8_t *)HZK12_ADDR;	
;;;519    				break;
000024  e009              B        |L42.58|
;;;520    			
;;;521    			case FC_ST_16:
;;;522    				font_bytes = 32;
000026  2720              MOVS     r7,#0x20
;;;523    				//pDot = (uint8_t *)HZK16_ADDR;
;;;524    				break;
000028  e007              B        |L42.58|
;;;525    	
;;;526    			case FC_ST_24:
;;;527    				font_bytes = 72;
00002a  2748              MOVS     r7,#0x48
;;;528    				//pDot = (uint8_t *)HZK24_ADDR;
;;;529    				break;			
00002c  e005              B        |L42.58|
;;;530    				
;;;531    			case FC_ST_32:	
;;;532    				font_bytes = 128;
00002e  2780              MOVS     r7,#0x80
;;;533    				//pDot = (uint8_t *)HZK32_ADDR;
;;;534    				break;						
000030  e003              B        |L42.58|
;;;535    			
;;;536    			case FC_RA8875_16:
;;;537    			case FC_RA8875_24:
000032  bf00              NOP      
;;;538    			case FC_RA8875_32:
000034  bf00              NOP      
                  |L42.54|
;;;539    				return;
;;;540    		}			
;;;541    	
;;;542    		/* 此处需要根据字库文件存放位置进行修改 */
;;;543    		if (_code1 >=0xA1 && _code1 <= 0xA9 && _code2 >=0xA1)
;;;544    		{
;;;545    			pDot += ((_code1 - 0xA1) * 94 + (_code2 - 0xA1)) * font_bytes;
;;;546    		}
;;;547    		else if (_code1 >=0xB0 && _code1 <= 0xF7 && _code2 >=0xA1)
;;;548    		{
;;;549    			pDot += ((_code1 - 0xB0) * 94 + (_code2 - 0xA1) + 846) * font_bytes;
;;;550    		}
;;;551    		memcpy(_pBuf, pDot, font_bytes);
;;;552    	#endif
;;;553    }
000036  e8bd87f0          POP      {r4-r10,pc}
                  |L42.58|
00003a  bf00              NOP                            ;519
00003c  2ca1              CMP      r4,#0xa1              ;543
00003e  db10              BLT      |L42.98|
000040  2ca9              CMP      r4,#0xa9              ;543
000042  dc0e              BGT      |L42.98|
000044  2da1              CMP      r5,#0xa1              ;543
000046  db0c              BLT      |L42.98|
000048  f1a500a1          SUB      r0,r5,#0xa1           ;545
00004c  f1a401a1          SUB      r1,r4,#0xa1           ;545
000050  ebc11201          RSB      r2,r1,r1,LSL #4       ;545
000054  eb021141          ADD      r1,r2,r1,LSL #5       ;545
000058  eb000041          ADD      r0,r0,r1,LSL #1       ;545
00005c  fb008807          MLA      r8,r0,r7,r8           ;545
000060  e013              B        |L42.138|
                  |L42.98|
000062  2cb0              CMP      r4,#0xb0              ;547
000064  db11              BLT      |L42.138|
000066  2cf7              CMP      r4,#0xf7              ;547
000068  dc0f              BGT      |L42.138|
00006a  2da1              CMP      r5,#0xa1              ;547
00006c  db0d              BLT      |L42.138|
00006e  f1a500a1          SUB      r0,r5,#0xa1           ;549
000072  f1a401b0          SUB      r1,r4,#0xb0           ;549
000076  ebc11201          RSB      r2,r1,r1,LSL #4       ;549
00007a  eb021141          ADD      r1,r2,r1,LSL #5       ;549
00007e  eb000041          ADD      r0,r0,r1,LSL #1       ;549
000082  f200304e          ADD      r0,r0,#0x34e          ;549
000086  fb008807          MLA      r8,r0,r7,r8           ;549
                  |L42.138|
00008a  463a              MOV      r2,r7                 ;551
00008c  4641              MOV      r1,r8                 ;551
00008e  4648              MOV      r0,r9                 ;551
000090  f7fffffe          BL       __aeabi_memcpy
000094  bf00              NOP      
000096  e7ce              B        |L42.54|
;;;554    			
                          ENDP


                          AREA ||.data||, DATA, ALIGN=1

                  g_ChipID
000000  4001              DCW      0x4001
                  g_LcdHeight
000002  00f0              DCW      0x00f0
                  g_LcdWidth
000004  0140              DCW      0x0140
                  s_ucBright
000006  00                DCB      0x00
                  g_LcdDirection
000007  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\User\\bsp\\bsp_tft_lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tft_lcd_c_g_ChipID____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_bsp_tft_lcd_c_g_ChipID____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tft_lcd_c_g_ChipID____REVSH|
#line 402
|__asm___13_bsp_tft_lcd_c_g_ChipID____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tft_lcd_c_g_ChipID____RRX|
#line 587
|__asm___13_bsp_tft_lcd_c_g_ChipID____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
