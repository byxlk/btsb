; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\system_stm32f2xx_1.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\system_stm32f2xx_1.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\User\bsp -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\FatFS\src -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\system_stm32f2xx_1.crf ..\Libraries\CMSIS\Device\ST\STM32F2xx\Source\Templates\system_stm32f2xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;336      */
;;;337    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;338    {
;;;339    /******************************************************************************/
;;;340    /*            PLL (clocked by HSE) used as System clock source                */
;;;341    /******************************************************************************/
;;;342      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;343      
;;;344      /* Enable HSE */
;;;345      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000008  482d              LDR      r0,|L1.192|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  492b              LDR      r1,|L1.192|
000012  6008              STR      r0,[r1,#0]
;;;346     
;;;347      /* Wait till HSE is ready and if Time out is reached exit */
;;;348      do
000014  bf00              NOP      
                  |L1.22|
;;;349      {
;;;350        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000016  482a              LDR      r0,|L1.192|
000018  6800              LDR      r0,[r0,#0]
00001a  f4003000          AND      r0,r0,#0x20000
00001e  9000              STR      r0,[sp,#0]
;;;351        StartUpCounter++;
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  9001              STR      r0,[sp,#4]
;;;352      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000026  9800              LDR      r0,[sp,#0]
000028  b918              CBNZ     r0,|L1.50|
00002a  9801              LDR      r0,[sp,#4]
00002c  f5b06fa0          CMP      r0,#0x500
000030  d1f1              BNE      |L1.22|
                  |L1.50|
;;;353    
;;;354      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000032  4823              LDR      r0,|L1.192|
000034  6800              LDR      r0,[r0,#0]
000036  f4003000          AND      r0,r0,#0x20000
00003a  b110              CBZ      r0,|L1.66|
;;;355      {
;;;356        HSEStatus = (uint32_t)0x01;
00003c  2001              MOVS     r0,#1
00003e  9000              STR      r0,[sp,#0]
000040  e001              B        |L1.70|
                  |L1.66|
;;;357      }
;;;358      else
;;;359      {
;;;360        HSEStatus = (uint32_t)0x00;
000042  2000              MOVS     r0,#0
000044  9000              STR      r0,[sp,#0]
                  |L1.70|
;;;361      }
;;;362    
;;;363      if (HSEStatus == (uint32_t)0x01)
000046  9800              LDR      r0,[sp,#0]
000048  2801              CMP      r0,#1
00004a  d138              BNE      |L1.190|
;;;364      {
;;;365        /* HCLK = SYSCLK / 1*/
;;;366        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
00004c  481c              LDR      r0,|L1.192|
00004e  3008              ADDS     r0,r0,#8
000050  6800              LDR      r0,[r0,#0]
000052  491b              LDR      r1,|L1.192|
000054  3108              ADDS     r1,r1,#8
000056  6008              STR      r0,[r1,#0]
;;;367          
;;;368        /* PCLK2 = HCLK / 2*/
;;;369        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000058  4608              MOV      r0,r1
00005a  6800              LDR      r0,[r0,#0]
00005c  f4404000          ORR      r0,r0,#0x8000
000060  6008              STR      r0,[r1,#0]
;;;370        
;;;371        /* PCLK1 = HCLK / 4*/
;;;372        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
000062  4608              MOV      r0,r1
000064  6800              LDR      r0,[r0,#0]
000066  f44050a0          ORR      r0,r0,#0x1400
00006a  6008              STR      r0,[r1,#0]
;;;373    
;;;374        /* Configure the main PLL */
;;;375        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
00006c  4815              LDR      r0,|L1.196|
00006e  1f09              SUBS     r1,r1,#4
000070  6008              STR      r0,[r1,#0]
;;;376                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;377    
;;;378        /* Enable the main PLL */
;;;379        RCC->CR |= RCC_CR_PLLON;
000072  1f08              SUBS     r0,r1,#4
000074  6800              LDR      r0,[r0,#0]
000076  f0407080          ORR      r0,r0,#0x1000000
00007a  1f09              SUBS     r1,r1,#4
00007c  6008              STR      r0,[r1,#0]
;;;380    
;;;381        /* Wait till the main PLL is ready */
;;;382        while((RCC->CR & RCC_CR_PLLRDY) == 0)
00007e  bf00              NOP      
                  |L1.128|
000080  480f              LDR      r0,|L1.192|
000082  6800              LDR      r0,[r0,#0]
000084  f0007000          AND      r0,r0,#0x2000000
000088  2800              CMP      r0,#0
00008a  d0f9              BEQ      |L1.128|
;;;383        {
;;;384        }
;;;385       
;;;386        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;387        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_3WS;
00008c  f2407003          MOV      r0,#0x703
000090  490d              LDR      r1,|L1.200|
000092  6008              STR      r0,[r1,#0]
;;;388    
;;;389        /* Select the main PLL as system clock source */
;;;390        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
000094  480a              LDR      r0,|L1.192|
000096  3008              ADDS     r0,r0,#8
000098  6800              LDR      r0,[r0,#0]
00009a  f0200003          BIC      r0,r0,#3
00009e  4908              LDR      r1,|L1.192|
0000a0  3108              ADDS     r1,r1,#8
0000a2  6008              STR      r0,[r1,#0]
;;;391        RCC->CFGR |= RCC_CFGR_SW_PLL;
0000a4  4608              MOV      r0,r1
0000a6  6800              LDR      r0,[r0,#0]
0000a8  f0400002          ORR      r0,r0,#2
0000ac  6008              STR      r0,[r1,#0]
;;;392    
;;;393        /* Wait till the main PLL is used as system clock source */
;;;394        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
0000ae  bf00              NOP      
                  |L1.176|
0000b0  4803              LDR      r0,|L1.192|
0000b2  3008              ADDS     r0,r0,#8
0000b4  6800              LDR      r0,[r0,#0]
0000b6  f000000c          AND      r0,r0,#0xc
0000ba  2808              CMP      r0,#8
0000bc  d1f8              BNE      |L1.176|
                  |L1.190|
;;;395        {
;;;396        }
;;;397      }
;;;398      else
;;;399      { /* If HSE fails to start-up, the application will have wrong clock
;;;400             configuration. User can add here some code to deal with this error */
;;;401      }
;;;402    
;;;403    }
0000be  bd0c              POP      {r2,r3,pc}
;;;404    
                          ENDP

                  |L1.192|
                          DCD      0x40023800
                  |L1.196|
                          DCD      0x05403c19
                  |L1.200|
                          DCD      0x40023c00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;280      */
;;;281    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;282    {
;;;283      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
000002  2000              MOVS     r0,#0
000004  2200              MOVS     r2,#0
000006  2302              MOVS     r3,#2
000008  2400              MOVS     r4,#0
00000a  2102              MOVS     r1,#2
;;;284      
;;;285      /* Get SYSCLK source -------------------------------------------------------*/
;;;286      tmp = RCC->CFGR & RCC_CFGR_SWS;
00000c  4d27              LDR      r5,|L2.172|
00000e  682d              LDR      r5,[r5,#0]
000010  f005000c          AND      r0,r5,#0xc
;;;287    
;;;288      switch (tmp)
000014  b120              CBZ      r0,|L2.32|
000016  2804              CMP      r0,#4
000018  d006              BEQ      |L2.40|
00001a  2808              CMP      r0,#8
00001c  d134              BNE      |L2.136|
00001e  e007              B        |L2.48|
                  |L2.32|
;;;289      {
;;;290        case 0x00:  /* HSI used as system clock source */
;;;291          SystemCoreClock = HSI_VALUE;
000020  4d23              LDR      r5,|L2.176|
000022  4e24              LDR      r6,|L2.180|
000024  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;292          break;
000026  e033              B        |L2.144|
                  |L2.40|
;;;293        case 0x04:  /* HSE used as system clock source */
;;;294          SystemCoreClock = HSE_VALUE;
000028  4d23              LDR      r5,|L2.184|
00002a  4e22              LDR      r6,|L2.180|
00002c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;295          break;
00002e  e02f              B        |L2.144|
                  |L2.48|
;;;296        case 0x08:  /* PLL used as system clock source */
;;;297    
;;;298          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;299             SYSCLK = PLL_VCO / PLL_P
;;;300             */    
;;;301          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000030  4d1e              LDR      r5,|L2.172|
000032  1f2d              SUBS     r5,r5,#4
000034  682d              LDR      r5,[r5,#0]
000036  f3c55480          UBFX     r4,r5,#22,#1
;;;302          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00003a  4d1c              LDR      r5,|L2.172|
00003c  1f2d              SUBS     r5,r5,#4
00003e  682d              LDR      r5,[r5,#0]
000040  f005013f          AND      r1,r5,#0x3f
;;;303          
;;;304          if (pllsource != 0)
000044  b154              CBZ      r4,|L2.92|
;;;305          {
;;;306            /* HSE used as PLL clock source */
;;;307            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000046  4d1c              LDR      r5,|L2.184|
000048  fbb5f5f1          UDIV     r5,r5,r1
00004c  4e17              LDR      r6,|L2.172|
00004e  1f36              SUBS     r6,r6,#4
000050  6836              LDR      r6,[r6,#0]
000052  f3c61688          UBFX     r6,r6,#6,#9
000056  fb05f206          MUL      r2,r5,r6
00005a  e009              B        |L2.112|
                  |L2.92|
;;;308          }
;;;309          else
;;;310          {
;;;311            /* HSI used as PLL clock source */
;;;312            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
00005c  4d14              LDR      r5,|L2.176|
00005e  fbb5f5f1          UDIV     r5,r5,r1
000062  4e12              LDR      r6,|L2.172|
000064  1f36              SUBS     r6,r6,#4
000066  6836              LDR      r6,[r6,#0]
000068  f3c61688          UBFX     r6,r6,#6,#9
00006c  fb05f206          MUL      r2,r5,r6
                  |L2.112|
;;;313          }
;;;314    
;;;315          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000070  4d0e              LDR      r5,|L2.172|
000072  1f2d              SUBS     r5,r5,#4
000074  682d              LDR      r5,[r5,#0]
000076  f3c54501          UBFX     r5,r5,#16,#2
00007a  1c6d              ADDS     r5,r5,#1
00007c  006b              LSLS     r3,r5,#1
;;;316          SystemCoreClock = pllvco/pllp;
00007e  fbb2f5f3          UDIV     r5,r2,r3
000082  4e0c              LDR      r6,|L2.180|
000084  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;317          break;
000086  e003              B        |L2.144|
                  |L2.136|
;;;318        default:
;;;319          SystemCoreClock = HSI_VALUE;
000088  4d09              LDR      r5,|L2.176|
00008a  4e0a              LDR      r6,|L2.180|
00008c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;320          break;
00008e  bf00              NOP      
                  |L2.144|
000090  bf00              NOP                            ;292
;;;321      }
;;;322      /* Compute HCLK frequency --------------------------------------------------*/
;;;323      /* Get HCLK prescaler */
;;;324      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000092  4d06              LDR      r5,|L2.172|
000094  682d              LDR      r5,[r5,#0]
000096  f3c51503          UBFX     r5,r5,#4,#4
00009a  4e08              LDR      r6,|L2.188|
00009c  5d70              LDRB     r0,[r6,r5]
;;;325      /* HCLK frequency */
;;;326      SystemCoreClock >>= tmp;
00009e  4d05              LDR      r5,|L2.180|
0000a0  682d              LDR      r5,[r5,#0]  ; SystemCoreClock
0000a2  40c5              LSRS     r5,r5,r0
0000a4  4e03              LDR      r6,|L2.180|
0000a6  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;327    }
0000a8  bd70              POP      {r4-r6,pc}
;;;328    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L2.172|
                          DCD      0x40023808
                  |L2.176|
                          DCD      0x00f42400
                  |L2.180|
                          DCD      SystemCoreClock
                  |L2.184|
                          DCD      0x017d7840
                  |L2.188|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;207      */
;;;208    void SystemInit(void)
000000  b510              PUSH     {r4,lr}
;;;209    {
;;;210      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;211      /* Set HSION bit */
;;;212      RCC->CR |= (uint32_t)0x00000001;
000002  4812              LDR      r0,|L3.76|
000004  6800              LDR      r0,[r0,#0]
000006  f0400001          ORR      r0,r0,#1
00000a  4910              LDR      r1,|L3.76|
00000c  6008              STR      r0,[r1,#0]
;;;213    
;;;214      /* Reset CFGR register */
;;;215      RCC->CFGR = 0x00000000;
00000e  2000              MOVS     r0,#0
000010  490e              LDR      r1,|L3.76|
000012  3108              ADDS     r1,r1,#8
000014  6008              STR      r0,[r1,#0]
;;;216    
;;;217      /* Reset HSEON, CSSON and PLLON bits */
;;;218      RCC->CR &= (uint32_t)0xFEF6FFFF;
000016  480d              LDR      r0,|L3.76|
000018  6800              LDR      r0,[r0,#0]
00001a  490d              LDR      r1,|L3.80|
00001c  4008              ANDS     r0,r0,r1
00001e  490b              LDR      r1,|L3.76|
000020  6008              STR      r0,[r1,#0]
;;;219    
;;;220      /* Reset PLLCFGR register */
;;;221      RCC->PLLCFGR = 0x24003010;
000022  480c              LDR      r0,|L3.84|
000024  1d09              ADDS     r1,r1,#4
000026  6008              STR      r0,[r1,#0]
;;;222    
;;;223      /* Reset HSEBYP bit */
;;;224      RCC->CR &= (uint32_t)0xFFFBFFFF;
000028  1f08              SUBS     r0,r1,#4
00002a  6800              LDR      r0,[r0,#0]
00002c  f4202080          BIC      r0,r0,#0x40000
000030  1f09              SUBS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;225    
;;;226      /* Disable all interrupts */
;;;227      RCC->CIR = 0x00000000;
000034  2000              MOVS     r0,#0
000036  4905              LDR      r1,|L3.76|
000038  310c              ADDS     r1,r1,#0xc
00003a  6008              STR      r0,[r1,#0]
;;;228    
;;;229    #ifdef DATA_IN_ExtSRAM
;;;230      SystemInit_ExtMemCtl(); 
;;;231    #endif /* DATA_IN_ExtSRAM */
;;;232             
;;;233      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;234         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;235      SetSysClock();
00003c  f7fffffe          BL       SetSysClock
;;;236    
;;;237      /* Configure the Vector Table location add offset address ------------------*/
;;;238    #ifdef VECT_TAB_SRAM
;;;239      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;240    #else
;;;241      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
000040  f04f6000          MOV      r0,#0x8000000
000044  4904              LDR      r1,|L3.88|
000046  6008              STR      r0,[r1,#0]
;;;242    #endif
;;;243    }
000048  bd10              POP      {r4,pc}
;;;244    
                          ENDP

00004a  0000              DCW      0x0000
                  |L3.76|
                          DCD      0x40023800
                  |L3.80|
                          DCD      0xfef6ffff
                  |L3.84|
                          DCD      0x24003010
                  |L3.88|
                          DCD      0xe000ed08

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x07270e00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\Libraries\\CMSIS\\Device\\ST\\STM32F2xx\\Source\\Templates\\system_stm32f2xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f2xx_c_5d646a67____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___18_system_stm32f2xx_c_5d646a67____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f2xx_c_5d646a67____REVSH|
#line 402
|__asm___18_system_stm32f2xx_c_5d646a67____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f2xx_c_5d646a67____RRX|
#line 587
|__asm___18_system_stm32f2xx_c_5d646a67____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
