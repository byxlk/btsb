; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\bsp_tim_pwm.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\bsp_tim_pwm.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FatFS\src -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\User -I..\User\bsp -I..\User\emWinTask -I..\STemWin\Config -I..\STemWin\DisplayDriver -I..\STemWin\inc -I..\STemWin\OS -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\bsp_tim_pwm.crf ..\User\bsp\bsp_tim_pwm.c]
                          THUMB

                          AREA ||i.bsp_ConfigGpioOut||, CODE, READONLY, ALIGN=1

                  bsp_ConfigGpioOut PROC
;;;267    */
;;;268    void bsp_ConfigGpioOut(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinX)
000000  b57c              PUSH     {r2-r6,lr}
;;;269    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;270    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;271    
;;;272    	/* 使能GPIO时钟 */
;;;273    	RCC_AHB1PeriphClockCmd(bsp_GetRCCofGPIO(GPIOx), ENABLE);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       bsp_GetRCCofGPIO
00000c  4606              MOV      r6,r0
00000e  2101              MOVS     r1,#1
000010  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;274    
;;;275    	/* 配置GPIO */
;;;276    	GPIO_InitStructure.GPIO_Pin = GPIO_PinX;		/* 带入的形参 */
000014  9400              STR      r4,[sp,#0]
;;;277    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;	/* 输出 */
000016  2001              MOVS     r0,#1
000018  f88d0004          STRB     r0,[sp,#4]
;;;278        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00001c  2000              MOVS     r0,#0
00001e  f88d0006          STRB     r0,[sp,#6]
;;;279    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000022  2002              MOVS     r0,#2
000024  f88d0005          STRB     r0,[sp,#5]
;;;280    	GPIO_Init(GPIOx, &GPIO_InitStructure);
000028  4669              MOV      r1,sp
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       GPIO_Init
;;;281    }
000030  bd7c              POP      {r2-r6,pc}
;;;282    
                          ENDP


                          AREA ||i.bsp_ConfigTimGpio||, CODE, READONLY, ALIGN=2

                  bsp_ConfigTimGpio PROC
;;;238    */
;;;239    void bsp_ConfigTimGpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinX, TIM_TypeDef* TIMx, uint8_t _ucChannel)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;240    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  4699              MOV      r9,r3
;;;241    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;242    
;;;243    	/* 使能GPIO时钟 */
;;;244    	RCC_AHB1PeriphClockCmd(bsp_GetRCCofGPIO(GPIOx), ENABLE);
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       bsp_GetRCCofGPIO
000012  4607              MOV      r7,r0
000014  2101              MOVS     r1,#1
000016  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;245    
;;;246      	/* 配置GPIO */
;;;247    	GPIO_InitStructure.GPIO_Pin = GPIO_PinX;
00001a  9500              STR      r5,[sp,#0]
;;;248    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;		/* 复用功能 */
00001c  2002              MOVS     r0,#2
00001e  f88d0004          STRB     r0,[sp,#4]
;;;249        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000022  2000              MOVS     r0,#0
000024  f88d0006          STRB     r0,[sp,#6]
;;;250    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000028  2002              MOVS     r0,#2
00002a  f88d0005          STRB     r0,[sp,#5]
;;;251        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
00002e  2001              MOVS     r0,#1
000030  f88d0007          STRB     r0,[sp,#7]
;;;252    	GPIO_Init(GPIOx, &GPIO_InitStructure); 
000034  4669              MOV      r1,sp
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       GPIO_Init
;;;253            
;;;254        /* Connect TIM3 pins to AF2 */  
;;;255        if(TIMx != TIM6 || TIMx != TIM7)
00003c  480a              LDR      r0,|L2.104|
00003e  4284              CMP      r4,r0
000040  d102              BNE      |L2.72|
000042  480a              LDR      r0,|L2.108|
000044  4284              CMP      r4,r0
000046  d00c              BEQ      |L2.98|
                  |L2.72|
;;;256            GPIO_PinAFConfig(GPIOx, bsp_GetPinSource(GPIO_PinX), bsp_GetGpioAfTIMx(TIMx));
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       bsp_GetGpioAfTIMx
00004e  4607              MOV      r7,r0
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       bsp_GetPinSource
000056  4680              MOV      r8,r0
000058  463a              MOV      r2,r7
00005a  4641              MOV      r1,r8
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       GPIO_PinAFConfig
                  |L2.98|
;;;257    }
000062  e8bd87fc          POP      {r2-r10,pc}
;;;258    
                          ENDP

000066  0000              DCW      0x0000
                  |L2.104|
                          DCD      0x40001000
                  |L2.108|
                          DCD      0x40001400

                          AREA ||i.bsp_GetGpioAfTIMx||, CODE, READONLY, ALIGN=2

                  bsp_GetGpioAfTIMx PROC
;;;89     
;;;90     uint8_t bsp_GetGpioAfTIMx(TIM_TypeDef* TIMx)
000000  4601              MOV      r1,r0
;;;91     {
;;;92            if(TIMx == TIM1) return GPIO_AF_TIM1;
000002  481c              LDR      r0,|L3.116|
000004  4281              CMP      r1,r0
000006  d101              BNE      |L3.12|
000008  2001              MOVS     r0,#1
                  |L3.10|
;;;93            else if(TIMx == TIM2) return GPIO_AF_TIM2;
;;;94            else if(TIMx == TIM3) return GPIO_AF_TIM3;
;;;95            else if(TIMx == TIM4) return GPIO_AF_TIM4;
;;;96            else if(TIMx == TIM5) return GPIO_AF_TIM5;
;;;97            else if(TIMx == TIM8) return GPIO_AF_TIM8;
;;;98            else if(TIMx == TIM9) return GPIO_AF_TIM9;
;;;99            else if(TIMx == TIM10) return GPIO_AF_TIM10;
;;;100           else if(TIMx == TIM11) return GPIO_AF_TIM11;
;;;101           else if(TIMx == TIM12) return GPIO_AF_TIM12;
;;;102           else if(TIMx == TIM13) return GPIO_AF_TIM13;
;;;103           else return GPIO_AF_TIM14;
;;;104    }
00000a  4770              BX       lr
                  |L3.12|
00000c  f1b14f80          CMP      r1,#0x40000000        ;93
000010  d101              BNE      |L3.22|
000012  2001              MOVS     r0,#1                 ;93
000014  e7f9              B        |L3.10|
                  |L3.22|
000016  4818              LDR      r0,|L3.120|
000018  4281              CMP      r1,r0                 ;94
00001a  d101              BNE      |L3.32|
00001c  2002              MOVS     r0,#2                 ;94
00001e  e7f4              B        |L3.10|
                  |L3.32|
000020  4816              LDR      r0,|L3.124|
000022  4281              CMP      r1,r0                 ;95
000024  d101              BNE      |L3.42|
000026  2002              MOVS     r0,#2                 ;95
000028  e7ef              B        |L3.10|
                  |L3.42|
00002a  4815              LDR      r0,|L3.128|
00002c  4281              CMP      r1,r0                 ;96
00002e  d101              BNE      |L3.52|
000030  2002              MOVS     r0,#2                 ;96
000032  e7ea              B        |L3.10|
                  |L3.52|
000034  4813              LDR      r0,|L3.132|
000036  4281              CMP      r1,r0                 ;97
000038  d101              BNE      |L3.62|
00003a  2003              MOVS     r0,#3                 ;97
00003c  e7e5              B        |L3.10|
                  |L3.62|
00003e  4812              LDR      r0,|L3.136|
000040  4281              CMP      r1,r0                 ;98
000042  d101              BNE      |L3.72|
000044  2003              MOVS     r0,#3                 ;98
000046  e7e0              B        |L3.10|
                  |L3.72|
000048  4810              LDR      r0,|L3.140|
00004a  4281              CMP      r1,r0                 ;99
00004c  d101              BNE      |L3.82|
00004e  2003              MOVS     r0,#3                 ;99
000050  e7db              B        |L3.10|
                  |L3.82|
000052  480f              LDR      r0,|L3.144|
000054  4281              CMP      r1,r0                 ;100
000056  d101              BNE      |L3.92|
000058  2003              MOVS     r0,#3                 ;100
00005a  e7d6              B        |L3.10|
                  |L3.92|
00005c  480d              LDR      r0,|L3.148|
00005e  4281              CMP      r1,r0                 ;101
000060  d101              BNE      |L3.102|
000062  2009              MOVS     r0,#9                 ;101
000064  e7d1              B        |L3.10|
                  |L3.102|
000066  480c              LDR      r0,|L3.152|
000068  4281              CMP      r1,r0                 ;102
00006a  d101              BNE      |L3.112|
00006c  2009              MOVS     r0,#9                 ;102
00006e  e7cc              B        |L3.10|
                  |L3.112|
000070  2009              MOVS     r0,#9                 ;103
000072  e7ca              B        |L3.10|
;;;105    
                          ENDP

                  |L3.116|
                          DCD      0x40010000
                  |L3.120|
                          DCD      0x40000400
                  |L3.124|
                          DCD      0x40000800
                  |L3.128|
                          DCD      0x40000c00
                  |L3.132|
                          DCD      0x40010400
                  |L3.136|
                          DCD      0x40014000
                  |L3.140|
                          DCD      0x40014400
                  |L3.144|
                          DCD      0x40014800
                  |L3.148|
                          DCD      0x40001800
                  |L3.152|
                          DCD      0x40001c00

                          AREA ||i.bsp_GetPinSource||, CODE, READONLY, ALIGN=1

                  bsp_GetPinSource PROC
;;;69     
;;;70     uint16_t bsp_GetPinSource(uint16_t GPIOx)
000000  4601              MOV      r1,r0
;;;71     {
;;;72             if(GPIOx == GPIO_Pin_0) return GPIO_PinSource0;
000002  2901              CMP      r1,#1
000004  d101              BNE      |L4.10|
000006  2000              MOVS     r0,#0
                  |L4.8|
;;;73             else if(GPIOx == GPIO_Pin_1) return GPIO_PinSource1;
;;;74             else if(GPIOx == GPIO_Pin_2) return GPIO_PinSource2;
;;;75             else if(GPIOx == GPIO_Pin_3) return GPIO_PinSource3;
;;;76             else if(GPIOx == GPIO_Pin_4) return GPIO_PinSource4;
;;;77             else if(GPIOx == GPIO_Pin_5) return GPIO_PinSource5;
;;;78             else if(GPIOx == GPIO_Pin_6) return GPIO_PinSource6;
;;;79             else if(GPIOx == GPIO_Pin_7) return GPIO_PinSource7;
;;;80             else if(GPIOx == GPIO_Pin_8) return GPIO_PinSource8;
;;;81             else if(GPIOx == GPIO_Pin_9) return GPIO_PinSource9;
;;;82             else if(GPIOx == GPIO_Pin_10) return GPIO_PinSource10;
;;;83             else if(GPIOx == GPIO_Pin_11) return GPIO_PinSource11;
;;;84             else if(GPIOx == GPIO_Pin_12) return GPIO_PinSource12;
;;;85             else if(GPIOx == GPIO_Pin_13) return GPIO_PinSource13;
;;;86             else if(GPIOx == GPIO_Pin_14) return GPIO_PinSource14;
;;;87             else return GPIO_PinSource15;
;;;88     }
000008  4770              BX       lr
                  |L4.10|
00000a  2902              CMP      r1,#2                 ;73
00000c  d101              BNE      |L4.18|
00000e  2001              MOVS     r0,#1                 ;73
000010  e7fa              B        |L4.8|
                  |L4.18|
000012  2904              CMP      r1,#4                 ;74
000014  d101              BNE      |L4.26|
000016  2002              MOVS     r0,#2                 ;74
000018  e7f6              B        |L4.8|
                  |L4.26|
00001a  2908              CMP      r1,#8                 ;75
00001c  d101              BNE      |L4.34|
00001e  2003              MOVS     r0,#3                 ;75
000020  e7f2              B        |L4.8|
                  |L4.34|
000022  2910              CMP      r1,#0x10              ;76
000024  d101              BNE      |L4.42|
000026  2004              MOVS     r0,#4                 ;76
000028  e7ee              B        |L4.8|
                  |L4.42|
00002a  2920              CMP      r1,#0x20              ;77
00002c  d101              BNE      |L4.50|
00002e  2005              MOVS     r0,#5                 ;77
000030  e7ea              B        |L4.8|
                  |L4.50|
000032  2940              CMP      r1,#0x40              ;78
000034  d101              BNE      |L4.58|
000036  2006              MOVS     r0,#6                 ;78
000038  e7e6              B        |L4.8|
                  |L4.58|
00003a  2980              CMP      r1,#0x80              ;79
00003c  d101              BNE      |L4.66|
00003e  2007              MOVS     r0,#7                 ;79
000040  e7e2              B        |L4.8|
                  |L4.66|
000042  f5b17f80          CMP      r1,#0x100             ;80
000046  d101              BNE      |L4.76|
000048  2008              MOVS     r0,#8                 ;80
00004a  e7dd              B        |L4.8|
                  |L4.76|
00004c  f5b17f00          CMP      r1,#0x200             ;81
000050  d101              BNE      |L4.86|
000052  2009              MOVS     r0,#9                 ;81
000054  e7d8              B        |L4.8|
                  |L4.86|
000056  f5b16f80          CMP      r1,#0x400             ;82
00005a  d101              BNE      |L4.96|
00005c  200a              MOVS     r0,#0xa               ;82
00005e  e7d3              B        |L4.8|
                  |L4.96|
000060  f5b16f00          CMP      r1,#0x800             ;83
000064  d101              BNE      |L4.106|
000066  200b              MOVS     r0,#0xb               ;83
000068  e7ce              B        |L4.8|
                  |L4.106|
00006a  f5b15f80          CMP      r1,#0x1000            ;84
00006e  d101              BNE      |L4.116|
000070  200c              MOVS     r0,#0xc               ;84
000072  e7c9              B        |L4.8|
                  |L4.116|
000074  f5b15f00          CMP      r1,#0x2000            ;85
000078  d101              BNE      |L4.126|
00007a  200d              MOVS     r0,#0xd               ;85
00007c  e7c4              B        |L4.8|
                  |L4.126|
00007e  f5b14f80          CMP      r1,#0x4000            ;86
000082  d101              BNE      |L4.136|
000084  200e              MOVS     r0,#0xe               ;86
000086  e7bf              B        |L4.8|
                  |L4.136|
000088  200f              MOVS     r0,#0xf               ;87
00008a  e7bd              B        |L4.8|
;;;89     
                          ENDP


                          AREA ||i.bsp_GetRCCofGPIO||, CODE, READONLY, ALIGN=2

                  bsp_GetRCCofGPIO PROC
;;;114    */
;;;115    uint32_t bsp_GetRCCofGPIO(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;116    {
;;;117    	uint32_t rcc = 0;
000002  2000              MOVS     r0,#0
;;;118    
;;;119    	if (GPIOx == GPIOA)
000004  4a11              LDR      r2,|L5.76|
000006  4291              CMP      r1,r2
000008  d101              BNE      |L5.14|
;;;120    	{
;;;121    		rcc = RCC_AHB1Periph_GPIOA;
00000a  2001              MOVS     r0,#1
00000c  e01c              B        |L5.72|
                  |L5.14|
;;;122    	}
;;;123    	else if (GPIOx == GPIOB)
00000e  4a10              LDR      r2,|L5.80|
000010  4291              CMP      r1,r2
000012  d101              BNE      |L5.24|
;;;124    	{
;;;125    		rcc = RCC_AHB1Periph_GPIOB;
000014  2002              MOVS     r0,#2
000016  e017              B        |L5.72|
                  |L5.24|
;;;126    	}
;;;127    	else if (GPIOx == GPIOC)
000018  4a0e              LDR      r2,|L5.84|
00001a  4291              CMP      r1,r2
00001c  d101              BNE      |L5.34|
;;;128    	{
;;;129    		rcc = RCC_AHB1Periph_GPIOC;
00001e  2004              MOVS     r0,#4
000020  e012              B        |L5.72|
                  |L5.34|
;;;130    	}
;;;131    	else if (GPIOx == GPIOD)
000022  4a0d              LDR      r2,|L5.88|
000024  4291              CMP      r1,r2
000026  d101              BNE      |L5.44|
;;;132    	{
;;;133    		rcc = RCC_AHB1Periph_GPIOD;
000028  2008              MOVS     r0,#8
00002a  e00d              B        |L5.72|
                  |L5.44|
;;;134    	}
;;;135    	else if (GPIOx == GPIOE)
00002c  4a0b              LDR      r2,|L5.92|
00002e  4291              CMP      r1,r2
000030  d101              BNE      |L5.54|
;;;136    	{
;;;137    		rcc = RCC_AHB1Periph_GPIOE;
000032  2010              MOVS     r0,#0x10
000034  e008              B        |L5.72|
                  |L5.54|
;;;138    	}
;;;139    	else if (GPIOx == GPIOF)
000036  4a0a              LDR      r2,|L5.96|
000038  4291              CMP      r1,r2
00003a  d101              BNE      |L5.64|
;;;140    	{
;;;141    		rcc = RCC_AHB1Periph_GPIOF;
00003c  2020              MOVS     r0,#0x20
00003e  e003              B        |L5.72|
                  |L5.64|
;;;142    	}
;;;143    	else if (GPIOx == GPIOG)
000040  4a08              LDR      r2,|L5.100|
000042  4291              CMP      r1,r2
000044  d100              BNE      |L5.72|
;;;144    	{
;;;145    		rcc = RCC_AHB1Periph_GPIOG;
000046  2040              MOVS     r0,#0x40
                  |L5.72|
;;;146    	}
;;;147    
;;;148    	return rcc;
;;;149    }
000048  4770              BX       lr
;;;150    
                          ENDP

00004a  0000              DCW      0x0000
                  |L5.76|
                          DCD      0x40020000
                  |L5.80|
                          DCD      0x40020400
                  |L5.84|
                          DCD      0x40020800
                  |L5.88|
                          DCD      0x40020c00
                  |L5.92|
                          DCD      0x40021000
                  |L5.96|
                          DCD      0x40021400
                  |L5.100|
                          DCD      0x40021800

                          AREA ||i.bsp_GetRCCofTIM||, CODE, READONLY, ALIGN=2

                  bsp_GetRCCofTIM PROC
;;;158    */
;;;159    uint32_t bsp_GetRCCofTIM(TIM_TypeDef* TIMx)
000000  4601              MOV      r1,r0
;;;160    {
;;;161    	uint32_t rcc = 0;
000002  2000              MOVS     r0,#0
;;;162    
;;;163    	/*
;;;164    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13, TIM14
;;;165    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;166    	*/
;;;167    	if (TIMx == TIM1)
000004  4a24              LDR      r2,|L6.152|
000006  4291              CMP      r1,r2
000008  d101              BNE      |L6.14|
;;;168    	{
;;;169    		rcc = RCC_APB2Periph_TIM1;
00000a  2001              MOVS     r0,#1
00000c  e042              B        |L6.148|
                  |L6.14|
;;;170    	}
;;;171    	else if (TIMx == TIM8)
00000e  4a23              LDR      r2,|L6.156|
000010  4291              CMP      r1,r2
000012  d101              BNE      |L6.24|
;;;172    	{
;;;173    		rcc = RCC_APB2Periph_TIM8;
000014  2002              MOVS     r0,#2
000016  e03d              B        |L6.148|
                  |L6.24|
;;;174    	}
;;;175    	else if (TIMx == TIM9)
000018  4a21              LDR      r2,|L6.160|
00001a  4291              CMP      r1,r2
00001c  d102              BNE      |L6.36|
;;;176    	{
;;;177    		rcc = RCC_APB2Periph_TIM9;
00001e  f44f3080          MOV      r0,#0x10000
000022  e037              B        |L6.148|
                  |L6.36|
;;;178    	}
;;;179    	else if (TIMx == TIM10)
000024  4a1f              LDR      r2,|L6.164|
000026  4291              CMP      r1,r2
000028  d102              BNE      |L6.48|
;;;180    	{
;;;181    		rcc = RCC_APB2Periph_TIM10;
00002a  f44f3000          MOV      r0,#0x20000
00002e  e031              B        |L6.148|
                  |L6.48|
;;;182    	}
;;;183    	else if (TIMx == TIM11)
000030  4a1d              LDR      r2,|L6.168|
000032  4291              CMP      r1,r2
000034  d102              BNE      |L6.60|
;;;184    	{
;;;185    		rcc = RCC_APB2Periph_TIM11;
000036  f44f2080          MOV      r0,#0x40000
00003a  e02b              B        |L6.148|
                  |L6.60|
;;;186    	}
;;;187    	/* 下面是 APB1时钟 */
;;;188    	else if (TIMx == TIM2)
00003c  f1b14f80          CMP      r1,#0x40000000
000040  d101              BNE      |L6.70|
;;;189    	{
;;;190    		rcc = RCC_APB1Periph_TIM2;
000042  2001              MOVS     r0,#1
000044  e026              B        |L6.148|
                  |L6.70|
;;;191    	}
;;;192    	else if (TIMx == TIM3)
000046  4a19              LDR      r2,|L6.172|
000048  4291              CMP      r1,r2
00004a  d101              BNE      |L6.80|
;;;193    	{
;;;194    		rcc = RCC_APB1Periph_TIM3;
00004c  2002              MOVS     r0,#2
00004e  e021              B        |L6.148|
                  |L6.80|
;;;195    	}
;;;196    	else if (TIMx == TIM4)
000050  4a17              LDR      r2,|L6.176|
000052  4291              CMP      r1,r2
000054  d101              BNE      |L6.90|
;;;197    	{
;;;198    		rcc = RCC_APB1Periph_TIM4;
000056  2004              MOVS     r0,#4
000058  e01c              B        |L6.148|
                  |L6.90|
;;;199    	}
;;;200    	else if (TIMx == TIM5)
00005a  4a16              LDR      r2,|L6.180|
00005c  4291              CMP      r1,r2
00005e  d101              BNE      |L6.100|
;;;201    	{
;;;202    		rcc = RCC_APB1Periph_TIM5;
000060  2008              MOVS     r0,#8
000062  e017              B        |L6.148|
                  |L6.100|
;;;203    	}
;;;204    	else if (TIMx == TIM6)
000064  4a14              LDR      r2,|L6.184|
000066  4291              CMP      r1,r2
000068  d101              BNE      |L6.110|
;;;205    	{
;;;206    		rcc = RCC_APB1Periph_TIM6;
00006a  2010              MOVS     r0,#0x10
00006c  e012              B        |L6.148|
                  |L6.110|
;;;207    	}
;;;208    	else if (TIMx == TIM7)
00006e  4a13              LDR      r2,|L6.188|
000070  4291              CMP      r1,r2
000072  d101              BNE      |L6.120|
;;;209    	{
;;;210    		rcc = RCC_APB1Periph_TIM7;
000074  2020              MOVS     r0,#0x20
000076  e00d              B        |L6.148|
                  |L6.120|
;;;211    	}
;;;212    	else if (TIMx == TIM12)
000078  4a11              LDR      r2,|L6.192|
00007a  4291              CMP      r1,r2
00007c  d101              BNE      |L6.130|
;;;213    	{
;;;214    		rcc = RCC_APB1Periph_TIM12;
00007e  2040              MOVS     r0,#0x40
000080  e008              B        |L6.148|
                  |L6.130|
;;;215    	}
;;;216    	else if (TIMx == TIM13)
000082  4a10              LDR      r2,|L6.196|
000084  4291              CMP      r1,r2
000086  d101              BNE      |L6.140|
;;;217    	{
;;;218    		rcc = RCC_APB1Periph_TIM13;
000088  2080              MOVS     r0,#0x80
00008a  e003              B        |L6.148|
                  |L6.140|
;;;219    	}
;;;220    	else if (TIMx == TIM14)
00008c  4a0e              LDR      r2,|L6.200|
00008e  4291              CMP      r1,r2
000090  d100              BNE      |L6.148|
;;;221    	{
;;;222    		rcc = RCC_APB1Periph_TIM14;
000092  1588              ASRS     r0,r1,#22
                  |L6.148|
;;;223    	}
;;;224    
;;;225    	return rcc;
;;;226    }
000094  4770              BX       lr
;;;227    
                          ENDP

000096  0000              DCW      0x0000
                  |L6.152|
                          DCD      0x40010000
                  |L6.156|
                          DCD      0x40010400
                  |L6.160|
                          DCD      0x40014000
                  |L6.164|
                          DCD      0x40014400
                  |L6.168|
                          DCD      0x40014800
                  |L6.172|
                          DCD      0x40000400
                  |L6.176|
                          DCD      0x40000800
                  |L6.180|
                          DCD      0x40000c00
                  |L6.184|
                          DCD      0x40001000
                  |L6.188|
                          DCD      0x40001400
                  |L6.192|
                          DCD      0x40001800
                  |L6.196|
                          DCD      0x40001c00
                  |L6.200|
                          DCD      0x40002000

                          AREA ||i.bsp_SetTIMOutPWM||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMOutPWM PROC
;;;292    */
;;;293        void bsp_SetTIMOutPWM(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;294                TIM_TypeDef* TIMx, uint8_t _ucChannel,   uint32_t _ulFreq, uint32_t _ulDutyCycle)
;;;295        {
000004  b08b              SUB      sp,sp,#0x2c
000006  4682              MOV      r10,r0
000008  468b              MOV      r11,r1
00000a  4614              MOV      r4,r2
00000c  461d              MOV      r5,r3
00000e  e9dd6914          LDRD     r6,r9,[sp,#0x50]
;;;296            TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;297            TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;298            uint16_t usPeriod;
;;;299            uint16_t usPrescaler = 0;
000012  2000              MOVS     r0,#0
000014  9002              STR      r0,[sp,#8]
;;;300            uint32_t uiTIMxCLK;
;;;301        
;;;302            /* 两个边界值直接以GPIO的模式使出电平值 */
;;;303            if (_ulDutyCycle == 0 || _ulDutyCycle == 100)
000016  f1b90f00          CMP      r9,#0
00001a  d002              BEQ      |L7.34|
00001c  f1b90f64          CMP      r9,#0x64
000020  d115              BNE      |L7.78|
                  |L7.34|
;;;304            {       
;;;305                TIM_Cmd(TIMx, DISABLE);     /* 关闭PWM输出 */
000022  2100              MOVS     r1,#0
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       TIM_Cmd
;;;306                bsp_ConfigGpioOut(GPIOx, GPIO_Pin); /* 配置GPIO为推挽输出 */        
00002a  4659              MOV      r1,r11
00002c  4650              MOV      r0,r10
00002e  f7fffffe          BL       bsp_ConfigGpioOut
;;;307                GPIO_WriteBit(GPIOx, GPIO_Pin, (_ulDutyCycle == 0) ? Bit_SET : Bit_RESET);  /* PWM = 0 : 1*/        
000032  f1b90f00          CMP      r9,#0
000036  d101              BNE      |L7.60|
000038  2001              MOVS     r0,#1
00003a  e000              B        |L7.62|
                  |L7.60|
00003c  2000              MOVS     r0,#0
                  |L7.62|
00003e  4602              MOV      r2,r0
000040  4659              MOV      r1,r11
000042  4650              MOV      r0,r10
000044  f7fffffe          BL       GPIO_WriteBit
                  |L7.72|
;;;308                return;
;;;309            }
;;;310        
;;;311            /* GPIO 配置 */
;;;312            bsp_ConfigTimGpio(GPIOx, GPIO_Pin, TIMx, _ucChannel);   /* 使能GPIO和TIM时钟，并连接TIM通道到GPIO */
;;;313            
;;;314            /*-----------------------------------------------------------------------
;;;315                system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;316        
;;;317                HCLK = SYSCLK / 1     (AHB1Periph)
;;;318                PCLK2 = HCLK / 2      (APB2Periph)
;;;319                PCLK1 = HCLK / 4      (APB1Periph)
;;;320        
;;;321                因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;322                因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;323        
;;;324                APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM6, TIM12, TIM13,TIM14
;;;325                APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;326        
;;;327            ----------------------------------------------------------------------- */
;;;328                /* 使能TIM时钟 */
;;;329            if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;330                RCC_APB2PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
;;;331            else
;;;332                RCC_APB1PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
;;;333         
;;;334            if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;335                uiTIMxCLK = SystemCoreClock / 1; /* APB2 定时器 = AHB进行2分频 */
;;;336            else    
;;;337                uiTIMxCLK = SystemCoreClock / 2;     /* APB1 定时器 = AHB进行4分频 */
;;;338        
;;;339            if (_ulFreq < 100)
;;;340            {
;;;341                usPrescaler = 10000 - 1;                    /* 分频比 = 10000 */
;;;342                usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;     /* 自动重装的值 */
;;;343            }
;;;344            else if (_ulFreq < 3000)
;;;345            {
;;;346                usPrescaler = 100 - 1;                  /* 分频比 = 100 */
;;;347                usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;       /* 自动重装的值 */
;;;348            }
;;;349            else    /* 大于4K的频率，无需分频 */
;;;350            {
;;;351                usPrescaler = 0;                    /* 分频比 = 1 */
;;;352                usPeriod = uiTIMxCLK / _ulFreq - 1; /* 自动重装的值 */
;;;353            }
;;;354         
;;;355            /* Time base configuration */
;;;356            TIM_TimeBaseStructure.TIM_Period = usPeriod;//当定时器从0计数到usPeriod，即为一个定时周期
;;;357            TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler; //设置预分频
;;;358            TIM_TimeBaseStructure.TIM_ClockDivision = 0;//设置时钟分频系数：不分频
;;;359            TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;//向上计数模式
;;;360            
;;;361            if(TIMx == TIM1 || TIMx == TIM8)
;;;362                    TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;    
;;;363            
;;;364            TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;365        
;;;366            /* PWM1 Mode configuration: Channel1 */
;;;367            TIM_OCStructInit(&TIM_OCInitStructure);     /* 初始化结构体成员 */  
;;;368            TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;//配置为PWM模式1
;;;369            TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;       /* 和 bsp_SetTIMOutPWM_N() 不同 */
;;;370            TIM_OCInitStructure.TIM_Pulse = (_ulDutyCycle * usPeriod)  / 100; //设置跳变值，当计数器计数到这个值时，电平发生跳变
;;;371            TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;372        
;;;373                if(TIMx == TIM1 || TIMx == TIM8)
;;;374                 {
;;;375                        TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;     /* only for TIM1 and TIM8. */   
;;;376                        TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;         /* only for TIM1 and TIM8. */       
;;;377                        TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;        /* only for TIM1 and TIM8. */
;;;378                        TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;      /* only for TIM1 and TIM8. */
;;;379                 }
;;;380            if (_ucChannel == 1)
;;;381            {
;;;382                TIM_OC1Init(TIMx, &TIM_OCInitStructure);
;;;383                TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;384            }
;;;385            else if (_ucChannel == 2)
;;;386            {
;;;387                TIM_OC2Init(TIMx, &TIM_OCInitStructure);
;;;388                TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;389            }
;;;390            else if (_ucChannel == 3)
;;;391            {
;;;392                TIM_OC3Init(TIMx, &TIM_OCInitStructure);
;;;393                TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;394            }
;;;395            else if (_ucChannel == 4)
;;;396            {
;;;397                TIM_OC4Init(TIMx, &TIM_OCInitStructure);
;;;398                TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;399            }
;;;400        
;;;401            TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;402        
;;;403                /* TIMx enable counter */
;;;404            TIM_Cmd(TIMx, ENABLE);
;;;405        
;;;406            /* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;407            if ((TIMx == TIM1) || (TIMx == TIM8))
;;;408            {
;;;409                TIM_CtrlPWMOutputs(TIMx, ENABLE);
;;;410            }
;;;411    }
000048  b00b              ADD      sp,sp,#0x2c
00004a  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.78|
00004e  462b              MOV      r3,r5                 ;312
000050  4622              MOV      r2,r4                 ;312
000052  4659              MOV      r1,r11                ;312
000054  4650              MOV      r0,r10                ;312
000056  f7fffffe          BL       bsp_ConfigTimGpio
00005a  4866              LDR      r0,|L7.500|
00005c  4284              CMP      r4,r0                 ;329
00005e  d00b              BEQ      |L7.120|
000060  4865              LDR      r0,|L7.504|
000062  4284              CMP      r4,r0                 ;329
000064  d008              BEQ      |L7.120|
000066  4865              LDR      r0,|L7.508|
000068  4284              CMP      r4,r0                 ;329
00006a  d005              BEQ      |L7.120|
00006c  4864              LDR      r0,|L7.512|
00006e  4284              CMP      r4,r0                 ;329
000070  d002              BEQ      |L7.120|
000072  4864              LDR      r0,|L7.516|
000074  4284              CMP      r4,r0                 ;329
000076  d107              BNE      |L7.136|
                  |L7.120|
000078  4620              MOV      r0,r4                 ;330
00007a  f7fffffe          BL       bsp_GetRCCofTIM
00007e  2101              MOVS     r1,#1                 ;330
000080  9001              STR      r0,[sp,#4]            ;330
000082  f7fffffe          BL       RCC_APB2PeriphClockCmd
000086  e006              B        |L7.150|
                  |L7.136|
000088  4620              MOV      r0,r4                 ;332
00008a  f7fffffe          BL       bsp_GetRCCofTIM
00008e  2101              MOVS     r1,#1                 ;332
000090  9001              STR      r0,[sp,#4]            ;332
000092  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L7.150|
000096  4857              LDR      r0,|L7.500|
000098  4284              CMP      r4,r0                 ;334
00009a  d00b              BEQ      |L7.180|
00009c  4856              LDR      r0,|L7.504|
00009e  4284              CMP      r4,r0                 ;334
0000a0  d008              BEQ      |L7.180|
0000a2  4856              LDR      r0,|L7.508|
0000a4  4284              CMP      r4,r0                 ;334
0000a6  d005              BEQ      |L7.180|
0000a8  4855              LDR      r0,|L7.512|
0000aa  4284              CMP      r4,r0                 ;334
0000ac  d002              BEQ      |L7.180|
0000ae  4855              LDR      r0,|L7.516|
0000b0  4284              CMP      r4,r0                 ;334
0000b2  d103              BNE      |L7.188|
                  |L7.180|
0000b4  4854              LDR      r0,|L7.520|
0000b6  f8d08000          LDR      r8,[r0,#0]            ;335  ; SystemCoreClock
0000ba  e003              B        |L7.196|
                  |L7.188|
0000bc  4852              LDR      r0,|L7.520|
0000be  6800              LDR      r0,[r0,#0]            ;337  ; SystemCoreClock
0000c0  ea4f0850          LSR      r8,r0,#1              ;337
                  |L7.196|
0000c4  2e64              CMP      r6,#0x64              ;339
0000c6  d20a              BCS      |L7.222|
0000c8  f242700f          MOV      r0,#0x270f            ;341
0000cc  9002              STR      r0,[sp,#8]            ;341
0000ce  1c40              ADDS     r0,r0,#1              ;342
0000d0  fbb8f0f0          UDIV     r0,r8,r0              ;342
0000d4  fbb0f0f6          UDIV     r0,r0,r6              ;342
0000d8  1e40              SUBS     r0,r0,#1              ;342
0000da  b287              UXTH     r7,r0                 ;342
0000dc  e013              B        |L7.262|
                  |L7.222|
0000de  f64030b8          MOV      r0,#0xbb8             ;344
0000e2  4286              CMP      r6,r0                 ;344
0000e4  d209              BCS      |L7.250|
0000e6  2063              MOVS     r0,#0x63              ;346
0000e8  9002              STR      r0,[sp,#8]            ;346
0000ea  2064              MOVS     r0,#0x64              ;347
0000ec  fbb8f0f0          UDIV     r0,r8,r0              ;347
0000f0  fbb0f0f6          UDIV     r0,r0,r6              ;347
0000f4  1e40              SUBS     r0,r0,#1              ;347
0000f6  b287              UXTH     r7,r0                 ;347
0000f8  e005              B        |L7.262|
                  |L7.250|
0000fa  2000              MOVS     r0,#0                 ;351
0000fc  9002              STR      r0,[sp,#8]            ;351
0000fe  fbb8f0f6          UDIV     r0,r8,r6              ;352
000102  1e40              SUBS     r0,r0,#1              ;352
000104  b287              UXTH     r7,r0                 ;352
                  |L7.262|
000106  9709              STR      r7,[sp,#0x24]         ;356
000108  9802              LDR      r0,[sp,#8]            ;357
00010a  f8ad0020          STRH     r0,[sp,#0x20]         ;357
00010e  2000              MOVS     r0,#0                 ;358
000110  f8ad0028          STRH     r0,[sp,#0x28]         ;358
000114  f8ad0022          STRH     r0,[sp,#0x22]         ;359
000118  4836              LDR      r0,|L7.500|
00011a  4284              CMP      r4,r0                 ;361
00011c  d002              BEQ      |L7.292|
00011e  4836              LDR      r0,|L7.504|
000120  4284              CMP      r4,r0                 ;361
000122  d102              BNE      |L7.298|
                  |L7.292|
000124  2000              MOVS     r0,#0                 ;362
000126  f88d002a          STRB     r0,[sp,#0x2a]         ;362
                  |L7.298|
00012a  a908              ADD      r1,sp,#0x20           ;364
00012c  4620              MOV      r0,r4                 ;364
00012e  f7fffffe          BL       TIM_TimeBaseInit
000132  a803              ADD      r0,sp,#0xc            ;367
000134  f7fffffe          BL       TIM_OCStructInit
000138  2060              MOVS     r0,#0x60              ;368
00013a  f8ad000c          STRH     r0,[sp,#0xc]          ;368
00013e  2001              MOVS     r0,#1                 ;369
000140  f8ad000e          STRH     r0,[sp,#0xe]          ;369
000144  fb09f007          MUL      r0,r9,r7              ;370
000148  2164              MOVS     r1,#0x64              ;370
00014a  fbb0f0f1          UDIV     r0,r0,r1              ;370
00014e  9005              STR      r0,[sp,#0x14]         ;370
000150  2000              MOVS     r0,#0                 ;371
000152  f8ad0018          STRH     r0,[sp,#0x18]         ;371
000156  4827              LDR      r0,|L7.500|
000158  4284              CMP      r4,r0                 ;373
00015a  d002              BEQ      |L7.354|
00015c  4826              LDR      r0,|L7.504|
00015e  4284              CMP      r4,r0                 ;373
000160  d109              BNE      |L7.374|
                  |L7.354|
000162  2004              MOVS     r0,#4                 ;375
000164  f8ad0010          STRH     r0,[sp,#0x10]         ;375
000168  2000              MOVS     r0,#0                 ;376
00016a  f8ad001a          STRH     r0,[sp,#0x1a]         ;376
00016e  f8ad001c          STRH     r0,[sp,#0x1c]         ;377
000172  f8ad001e          STRH     r0,[sp,#0x1e]         ;378
                  |L7.374|
000176  2d01              CMP      r5,#1                 ;380
000178  d108              BNE      |L7.396|
00017a  a903              ADD      r1,sp,#0xc            ;382
00017c  4620              MOV      r0,r4                 ;382
00017e  f7fffffe          BL       TIM_OC1Init
000182  2108              MOVS     r1,#8                 ;383
000184  4620              MOV      r0,r4                 ;383
000186  f7fffffe          BL       TIM_OC1PreloadConfig
00018a  e01f              B        |L7.460|
                  |L7.396|
00018c  2d02              CMP      r5,#2                 ;385
00018e  d108              BNE      |L7.418|
000190  a903              ADD      r1,sp,#0xc            ;387
000192  4620              MOV      r0,r4                 ;387
000194  f7fffffe          BL       TIM_OC2Init
000198  2108              MOVS     r1,#8                 ;388
00019a  4620              MOV      r0,r4                 ;388
00019c  f7fffffe          BL       TIM_OC2PreloadConfig
0001a0  e014              B        |L7.460|
                  |L7.418|
0001a2  2d03              CMP      r5,#3                 ;390
0001a4  d108              BNE      |L7.440|
0001a6  a903              ADD      r1,sp,#0xc            ;392
0001a8  4620              MOV      r0,r4                 ;392
0001aa  f7fffffe          BL       TIM_OC3Init
0001ae  2108              MOVS     r1,#8                 ;393
0001b0  4620              MOV      r0,r4                 ;393
0001b2  f7fffffe          BL       TIM_OC3PreloadConfig
0001b6  e009              B        |L7.460|
                  |L7.440|
0001b8  2d04              CMP      r5,#4                 ;395
0001ba  d107              BNE      |L7.460|
0001bc  a903              ADD      r1,sp,#0xc            ;397
0001be  4620              MOV      r0,r4                 ;397
0001c0  f7fffffe          BL       TIM_OC4Init
0001c4  2108              MOVS     r1,#8                 ;398
0001c6  4620              MOV      r0,r4                 ;398
0001c8  f7fffffe          BL       TIM_OC4PreloadConfig
                  |L7.460|
0001cc  2101              MOVS     r1,#1                 ;401
0001ce  4620              MOV      r0,r4                 ;401
0001d0  f7fffffe          BL       TIM_ARRPreloadConfig
0001d4  2101              MOVS     r1,#1                 ;404
0001d6  4620              MOV      r0,r4                 ;404
0001d8  f7fffffe          BL       TIM_Cmd
0001dc  4805              LDR      r0,|L7.500|
0001de  4284              CMP      r4,r0                 ;407
0001e0  d002              BEQ      |L7.488|
0001e2  4805              LDR      r0,|L7.504|
0001e4  4284              CMP      r4,r0                 ;407
0001e6  d103              BNE      |L7.496|
                  |L7.488|
0001e8  2101              MOVS     r1,#1                 ;409
0001ea  4620              MOV      r0,r4                 ;409
0001ec  f7fffffe          BL       TIM_CtrlPWMOutputs
                  |L7.496|
0001f0  bf00              NOP      
0001f2  e729              B        |L7.72|
;;;412    
                          ENDP

                  |L7.500|
                          DCD      0x40010000
                  |L7.504|
                          DCD      0x40010400
                  |L7.508|
                          DCD      0x40014000
                  |L7.512|
                          DCD      0x40014400
                  |L7.516|
                          DCD      0x40014800
                  |L7.520|
                          DCD      SystemCoreClock

                          AREA ||i.bsp_SetTIMOutPWM_N||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMOutPWM_N PROC
;;;422    */
;;;423    void bsp_SetTIMOutPWM_N(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;424            TIM_TypeDef* TIMx, uint8_t _ucChannel,	 uint32_t _ulFreq, uint32_t _ulDutyCycle)
;;;425    {
000004  b08b              SUB      sp,sp,#0x2c
000006  4682              MOV      r10,r0
000008  468b              MOV      r11,r1
00000a  4614              MOV      r4,r2
00000c  461d              MOV      r5,r3
00000e  e9dd6914          LDRD     r6,r9,[sp,#0x50]
;;;426    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;427    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;428    	uint16_t usPeriod;
;;;429    	uint16_t usPrescaler = 0;
000012  2000              MOVS     r0,#0
000014  9002              STR      r0,[sp,#8]
;;;430    	uint32_t uiTIMxCLK;
;;;431    
;;;432        /* 两个边界值直接以GPIO的模式使出电平值 */
;;;433    	if (_ulDutyCycle == 0 || _ulDutyCycle == 100)
000016  f1b90f00          CMP      r9,#0
00001a  d002              BEQ      |L8.34|
00001c  f1b90f64          CMP      r9,#0x64
000020  d115              BNE      |L8.78|
                  |L8.34|
;;;434    	{		
;;;435    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
000022  2100              MOVS     r1,#0
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       TIM_Cmd
;;;436    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
00002a  4659              MOV      r1,r11
00002c  4650              MOV      r0,r10
00002e  f7fffffe          BL       bsp_ConfigGpioOut
;;;437    		GPIO_WriteBit(GPIOx, GPIO_Pin, (_ulDutyCycle == 0) ? Bit_SET : Bit_RESET);	/* PWM = 0 : 1*/		
000032  f1b90f00          CMP      r9,#0
000036  d101              BNE      |L8.60|
000038  2001              MOVS     r0,#1
00003a  e000              B        |L8.62|
                  |L8.60|
00003c  2000              MOVS     r0,#0
                  |L8.62|
00003e  4602              MOV      r2,r0
000040  4659              MOV      r1,r11
000042  4650              MOV      r0,r10
000044  f7fffffe          BL       GPIO_WriteBit
                  |L8.72|
;;;438    		return;
;;;439    	}
;;;440    
;;;441        /* GPIO 配置 */
;;;442    	bsp_ConfigTimGpio(GPIOx, GPIO_Pin, TIMx, _ucChannel);	/* 使能GPIO和TIM时钟，并连接TIM通道到GPIO */
;;;443    	
;;;444        /*-----------------------------------------------------------------------
;;;445    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;446    
;;;447    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;448    		PCLK2 = HCLK / 2      (APB2Periph)
;;;449    		PCLK1 = HCLK / 4      (APB1Periph)
;;;450    
;;;451    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;452    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;453    
;;;454    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM6, TIM12, TIM13,TIM14
;;;455    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;456    
;;;457    	----------------------------------------------------------------------- */
;;;458            /* 使能TIM时钟 */
;;;459    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;460    		RCC_APB2PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
;;;461    	else
;;;462    		RCC_APB1PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
;;;463     
;;;464        if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;465    		uiTIMxCLK = SystemCoreClock / 1; /* APB2 定时器 = AHB进行2分频 */
;;;466    	else	
;;;467    		uiTIMxCLK = SystemCoreClock / 2;	 /* APB1 定时器 = AHB进行4分频 */
;;;468    
;;;469    	if (_ulFreq < 100)
;;;470    	{
;;;471    		usPrescaler = 10000 - 1;					/* 分频比 = 10000 */
;;;472    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;473    	}
;;;474    	else if (_ulFreq < 3000)
;;;475    	{
;;;476    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;477    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;478    	}
;;;479    	else	/* 大于4K的频率，无需分频 */
;;;480    	{
;;;481    		usPrescaler = 0;					/* 分频比 = 1 */
;;;482    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;483    	}
;;;484     
;;;485    	/* Time base configuration */
;;;486    	TIM_TimeBaseStructure.TIM_Period = usPeriod;//当定时器从0计数到usPeriod，即为一个定时周期
;;;487    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler; //设置预分频
;;;488    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;//设置时钟分频系数：不分频
;;;489    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;//向上计数模式
;;;490    	
;;;491    	if(TIMx == TIM1 || TIMx == TIM8)
;;;492    		TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;	
;;;493        
;;;494    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;495    
;;;496    	/* PWM1 Mode configuration: Channel1 */
;;;497    	TIM_OCStructInit(&TIM_OCInitStructure);		/* 初始化结构体成员 */	
;;;498    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;//配置为PWM模式1
;;;499    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;		/* 和 bsp_SetTIMOutPWM_N() 不同 */
;;;500    	TIM_OCInitStructure.TIM_Pulse = (_ulDutyCycle * usPeriod)  / 100; //设置跳变值，当计数器计数到这个值时，电平发生跳变
;;;501    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
;;;502    
;;;503            if(TIMx == TIM1 || TIMx == TIM8)
;;;504             {
;;;505                    TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;		/* only for TIM1 and TIM8. */	
;;;506                    TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;			/* only for TIM1 and TIM8. */		
;;;507                    TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;508                    TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;509             }
;;;510    	if (_ucChannel == 1)
;;;511    	{
;;;512    		TIM_OC1Init(TIMx, &TIM_OCInitStructure);
;;;513    		TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;514    	}
;;;515    	else if (_ucChannel == 2)
;;;516    	{
;;;517    		TIM_OC2Init(TIMx, &TIM_OCInitStructure);
;;;518    		TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;519    	}
;;;520    	else if (_ucChannel == 3)
;;;521    	{
;;;522    		TIM_OC3Init(TIMx, &TIM_OCInitStructure);
;;;523    		TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;524    	}
;;;525    	else if (_ucChannel == 4)
;;;526    	{
;;;527    		TIM_OC4Init(TIMx, &TIM_OCInitStructure);
;;;528    		TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;529    	}
;;;530    
;;;531    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;532    
;;;533            /* TIMx enable counter */
;;;534    	TIM_Cmd(TIMx, ENABLE);
;;;535    
;;;536    	/* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;537    	if ((TIMx == TIM1) || (TIMx == TIM8))
;;;538    	{
;;;539    		TIM_CtrlPWMOutputs(TIMx, ENABLE);
;;;540    	}
;;;541    }
000048  b00b              ADD      sp,sp,#0x2c
00004a  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.78|
00004e  462b              MOV      r3,r5                 ;442
000050  4622              MOV      r2,r4                 ;442
000052  4659              MOV      r1,r11                ;442
000054  4650              MOV      r0,r10                ;442
000056  f7fffffe          BL       bsp_ConfigTimGpio
00005a  4866              LDR      r0,|L8.500|
00005c  4284              CMP      r4,r0                 ;459
00005e  d00b              BEQ      |L8.120|
000060  4865              LDR      r0,|L8.504|
000062  4284              CMP      r4,r0                 ;459
000064  d008              BEQ      |L8.120|
000066  4865              LDR      r0,|L8.508|
000068  4284              CMP      r4,r0                 ;459
00006a  d005              BEQ      |L8.120|
00006c  4864              LDR      r0,|L8.512|
00006e  4284              CMP      r4,r0                 ;459
000070  d002              BEQ      |L8.120|
000072  4864              LDR      r0,|L8.516|
000074  4284              CMP      r4,r0                 ;459
000076  d107              BNE      |L8.136|
                  |L8.120|
000078  4620              MOV      r0,r4                 ;460
00007a  f7fffffe          BL       bsp_GetRCCofTIM
00007e  2101              MOVS     r1,#1                 ;460
000080  9001              STR      r0,[sp,#4]            ;460
000082  f7fffffe          BL       RCC_APB2PeriphClockCmd
000086  e006              B        |L8.150|
                  |L8.136|
000088  4620              MOV      r0,r4                 ;462
00008a  f7fffffe          BL       bsp_GetRCCofTIM
00008e  2101              MOVS     r1,#1                 ;462
000090  9001              STR      r0,[sp,#4]            ;462
000092  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L8.150|
000096  4857              LDR      r0,|L8.500|
000098  4284              CMP      r4,r0                 ;464
00009a  d00b              BEQ      |L8.180|
00009c  4856              LDR      r0,|L8.504|
00009e  4284              CMP      r4,r0                 ;464
0000a0  d008              BEQ      |L8.180|
0000a2  4856              LDR      r0,|L8.508|
0000a4  4284              CMP      r4,r0                 ;464
0000a6  d005              BEQ      |L8.180|
0000a8  4855              LDR      r0,|L8.512|
0000aa  4284              CMP      r4,r0                 ;464
0000ac  d002              BEQ      |L8.180|
0000ae  4855              LDR      r0,|L8.516|
0000b0  4284              CMP      r4,r0                 ;464
0000b2  d103              BNE      |L8.188|
                  |L8.180|
0000b4  4854              LDR      r0,|L8.520|
0000b6  f8d08000          LDR      r8,[r0,#0]            ;465  ; SystemCoreClock
0000ba  e003              B        |L8.196|
                  |L8.188|
0000bc  4852              LDR      r0,|L8.520|
0000be  6800              LDR      r0,[r0,#0]            ;467  ; SystemCoreClock
0000c0  ea4f0850          LSR      r8,r0,#1              ;467
                  |L8.196|
0000c4  2e64              CMP      r6,#0x64              ;469
0000c6  d20a              BCS      |L8.222|
0000c8  f242700f          MOV      r0,#0x270f            ;471
0000cc  9002              STR      r0,[sp,#8]            ;471
0000ce  1c40              ADDS     r0,r0,#1              ;472
0000d0  fbb8f0f0          UDIV     r0,r8,r0              ;472
0000d4  fbb0f0f6          UDIV     r0,r0,r6              ;472
0000d8  1e40              SUBS     r0,r0,#1              ;472
0000da  b287              UXTH     r7,r0                 ;472
0000dc  e013              B        |L8.262|
                  |L8.222|
0000de  f64030b8          MOV      r0,#0xbb8             ;474
0000e2  4286              CMP      r6,r0                 ;474
0000e4  d209              BCS      |L8.250|
0000e6  2063              MOVS     r0,#0x63              ;476
0000e8  9002              STR      r0,[sp,#8]            ;476
0000ea  2064              MOVS     r0,#0x64              ;477
0000ec  fbb8f0f0          UDIV     r0,r8,r0              ;477
0000f0  fbb0f0f6          UDIV     r0,r0,r6              ;477
0000f4  1e40              SUBS     r0,r0,#1              ;477
0000f6  b287              UXTH     r7,r0                 ;477
0000f8  e005              B        |L8.262|
                  |L8.250|
0000fa  2000              MOVS     r0,#0                 ;481
0000fc  9002              STR      r0,[sp,#8]            ;481
0000fe  fbb8f0f6          UDIV     r0,r8,r6              ;482
000102  1e40              SUBS     r0,r0,#1              ;482
000104  b287              UXTH     r7,r0                 ;482
                  |L8.262|
000106  9709              STR      r7,[sp,#0x24]         ;486
000108  9802              LDR      r0,[sp,#8]            ;487
00010a  f8ad0020          STRH     r0,[sp,#0x20]         ;487
00010e  2000              MOVS     r0,#0                 ;488
000110  f8ad0028          STRH     r0,[sp,#0x28]         ;488
000114  f8ad0022          STRH     r0,[sp,#0x22]         ;489
000118  4836              LDR      r0,|L8.500|
00011a  4284              CMP      r4,r0                 ;491
00011c  d002              BEQ      |L8.292|
00011e  4836              LDR      r0,|L8.504|
000120  4284              CMP      r4,r0                 ;491
000122  d102              BNE      |L8.298|
                  |L8.292|
000124  2000              MOVS     r0,#0                 ;492
000126  f88d002a          STRB     r0,[sp,#0x2a]         ;492
                  |L8.298|
00012a  a908              ADD      r1,sp,#0x20           ;494
00012c  4620              MOV      r0,r4                 ;494
00012e  f7fffffe          BL       TIM_TimeBaseInit
000132  a803              ADD      r0,sp,#0xc            ;497
000134  f7fffffe          BL       TIM_OCStructInit
000138  2060              MOVS     r0,#0x60              ;498
00013a  f8ad000c          STRH     r0,[sp,#0xc]          ;498
00013e  2001              MOVS     r0,#1                 ;499
000140  f8ad000e          STRH     r0,[sp,#0xe]          ;499
000144  fb09f007          MUL      r0,r9,r7              ;500
000148  2164              MOVS     r1,#0x64              ;500
00014a  fbb0f0f1          UDIV     r0,r0,r1              ;500
00014e  9005              STR      r0,[sp,#0x14]         ;500
000150  2002              MOVS     r0,#2                 ;501
000152  f8ad0018          STRH     r0,[sp,#0x18]         ;501
000156  4827              LDR      r0,|L8.500|
000158  4284              CMP      r4,r0                 ;503
00015a  d002              BEQ      |L8.354|
00015c  4826              LDR      r0,|L8.504|
00015e  4284              CMP      r4,r0                 ;503
000160  d109              BNE      |L8.374|
                  |L8.354|
000162  2004              MOVS     r0,#4                 ;505
000164  f8ad0010          STRH     r0,[sp,#0x10]         ;505
000168  2000              MOVS     r0,#0                 ;506
00016a  f8ad001a          STRH     r0,[sp,#0x1a]         ;506
00016e  f8ad001c          STRH     r0,[sp,#0x1c]         ;507
000172  f8ad001e          STRH     r0,[sp,#0x1e]         ;508
                  |L8.374|
000176  2d01              CMP      r5,#1                 ;510
000178  d108              BNE      |L8.396|
00017a  a903              ADD      r1,sp,#0xc            ;512
00017c  4620              MOV      r0,r4                 ;512
00017e  f7fffffe          BL       TIM_OC1Init
000182  2108              MOVS     r1,#8                 ;513
000184  4620              MOV      r0,r4                 ;513
000186  f7fffffe          BL       TIM_OC1PreloadConfig
00018a  e01f              B        |L8.460|
                  |L8.396|
00018c  2d02              CMP      r5,#2                 ;515
00018e  d108              BNE      |L8.418|
000190  a903              ADD      r1,sp,#0xc            ;517
000192  4620              MOV      r0,r4                 ;517
000194  f7fffffe          BL       TIM_OC2Init
000198  2108              MOVS     r1,#8                 ;518
00019a  4620              MOV      r0,r4                 ;518
00019c  f7fffffe          BL       TIM_OC2PreloadConfig
0001a0  e014              B        |L8.460|
                  |L8.418|
0001a2  2d03              CMP      r5,#3                 ;520
0001a4  d108              BNE      |L8.440|
0001a6  a903              ADD      r1,sp,#0xc            ;522
0001a8  4620              MOV      r0,r4                 ;522
0001aa  f7fffffe          BL       TIM_OC3Init
0001ae  2108              MOVS     r1,#8                 ;523
0001b0  4620              MOV      r0,r4                 ;523
0001b2  f7fffffe          BL       TIM_OC3PreloadConfig
0001b6  e009              B        |L8.460|
                  |L8.440|
0001b8  2d04              CMP      r5,#4                 ;525
0001ba  d107              BNE      |L8.460|
0001bc  a903              ADD      r1,sp,#0xc            ;527
0001be  4620              MOV      r0,r4                 ;527
0001c0  f7fffffe          BL       TIM_OC4Init
0001c4  2108              MOVS     r1,#8                 ;528
0001c6  4620              MOV      r0,r4                 ;528
0001c8  f7fffffe          BL       TIM_OC4PreloadConfig
                  |L8.460|
0001cc  2101              MOVS     r1,#1                 ;531
0001ce  4620              MOV      r0,r4                 ;531
0001d0  f7fffffe          BL       TIM_ARRPreloadConfig
0001d4  2101              MOVS     r1,#1                 ;534
0001d6  4620              MOV      r0,r4                 ;534
0001d8  f7fffffe          BL       TIM_Cmd
0001dc  4805              LDR      r0,|L8.500|
0001de  4284              CMP      r4,r0                 ;537
0001e0  d002              BEQ      |L8.488|
0001e2  4805              LDR      r0,|L8.504|
0001e4  4284              CMP      r4,r0                 ;537
0001e6  d103              BNE      |L8.496|
                  |L8.488|
0001e8  2101              MOVS     r1,#1                 ;539
0001ea  4620              MOV      r0,r4                 ;539
0001ec  f7fffffe          BL       TIM_CtrlPWMOutputs
                  |L8.496|
0001f0  bf00              NOP      
0001f2  e729              B        |L8.72|
;;;542    
                          ENDP

                  |L8.500|
                          DCD      0x40010000
                  |L8.504|
                          DCD      0x40010400
                  |L8.508|
                          DCD      0x40014000
                  |L8.512|
                          DCD      0x40014400
                  |L8.516|
                          DCD      0x40014800
                  |L8.520|
                          DCD      SystemCoreClock

                          AREA ||i.bsp_SetTIMforInt||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMforInt PROC
;;;553    */
;;;554    void bsp_SetTIMforInt(TIM_TypeDef* TIMx, uint32_t _ulFreq, 
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;555                    uint8_t _PreemptionPriority, uint8_t _SubPriority)
;;;556    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;557    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;558    	uint16_t usPeriod;
;;;559    	uint16_t usPrescaler;
;;;560    	uint32_t uiTIMxCLK;
;;;561    
;;;562      	/* 使能TIM时钟 */
;;;563    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
00000c  487c              LDR      r0,|L9.512|
00000e  4284              CMP      r4,r0
000010  d00b              BEQ      |L9.42|
000012  487c              LDR      r0,|L9.516|
000014  4284              CMP      r4,r0
000016  d008              BEQ      |L9.42|
000018  487b              LDR      r0,|L9.520|
00001a  4284              CMP      r4,r0
00001c  d005              BEQ      |L9.42|
00001e  487b              LDR      r0,|L9.524|
000020  4284              CMP      r4,r0
000022  d002              BEQ      |L9.42|
000024  487a              LDR      r0,|L9.528|
000026  4284              CMP      r4,r0
000028  d107              BNE      |L9.58|
                  |L9.42|
;;;564    		RCC_APB2PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       bsp_GetRCCofTIM
000030  4683              MOV      r11,r0
000032  2101              MOVS     r1,#1
000034  f7fffffe          BL       RCC_APB2PeriphClockCmd
000038  e006              B        |L9.72|
                  |L9.58|
;;;565    	else
;;;566    		RCC_APB1PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       bsp_GetRCCofTIM
000040  4683              MOV      r11,r0
000042  2101              MOVS     r1,#1
000044  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L9.72|
;;;567    
;;;568    	if (_ulFreq == 0)
000048  2d00              CMP      r5,#0
00004a  d141              BNE      |L9.208|
;;;569    	{
;;;570    		TIM_Cmd(TIMx, DISABLE);		/* 关闭定时输出 */
00004c  2100              MOVS     r1,#0
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       TIM_Cmd
;;;571    
;;;572    		/* 关闭TIM定时更新中断 (Update) */
;;;573    		{
;;;574    			NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;575    			uint8_t irq = 0;	/* 中断号, 定义在 stm32f4xx.h */
000054  46ab              MOV      r11,r5
;;;576    
;;;577    			if (TIMx == TIM1)
000056  486a              LDR      r0,|L9.512|
000058  4284              CMP      r4,r0
00005a  d102              BNE      |L9.98|
;;;578    				irq = TIM1_UP_TIM10_IRQn;
00005c  f04f0b19          MOV      r11,#0x19
000060  e028              B        |L9.180|
                  |L9.98|
;;;579    			else if (TIMx == TIM2)
000062  f1b44f80          CMP      r4,#0x40000000
000066  d102              BNE      |L9.110|
;;;580    				irq = TIM2_IRQn;
000068  f04f0b1c          MOV      r11,#0x1c
00006c  e022              B        |L9.180|
                  |L9.110|
;;;581    			else if (TIMx == TIM3)
00006e  4869              LDR      r0,|L9.532|
000070  4284              CMP      r4,r0
000072  d102              BNE      |L9.122|
;;;582    				irq = TIM3_IRQn;
000074  f04f0b1d          MOV      r11,#0x1d
000078  e01c              B        |L9.180|
                  |L9.122|
;;;583    			else if (TIMx == TIM4)
00007a  4867              LDR      r0,|L9.536|
00007c  4284              CMP      r4,r0
00007e  d102              BNE      |L9.134|
;;;584    				irq = TIM4_IRQn;
000080  f04f0b1e          MOV      r11,#0x1e
000084  e016              B        |L9.180|
                  |L9.134|
;;;585    			else if (TIMx == TIM5)
000086  4865              LDR      r0,|L9.540|
000088  4284              CMP      r4,r0
00008a  d102              BNE      |L9.146|
;;;586    				irq = TIM5_IRQn;
00008c  f04f0b32          MOV      r11,#0x32
000090  e010              B        |L9.180|
                  |L9.146|
;;;587    			else if (TIMx == TIM6)
000092  4863              LDR      r0,|L9.544|
000094  4284              CMP      r4,r0
000096  d102              BNE      |L9.158|
;;;588    				irq = TIM6_DAC_IRQn;
000098  f04f0b36          MOV      r11,#0x36
00009c  e00a              B        |L9.180|
                  |L9.158|
;;;589    			else if (TIMx == TIM7)
00009e  4861              LDR      r0,|L9.548|
0000a0  4284              CMP      r4,r0
0000a2  d102              BNE      |L9.170|
;;;590    				irq = TIM7_IRQn;
0000a4  f04f0b37          MOV      r11,#0x37
0000a8  e004              B        |L9.180|
                  |L9.170|
;;;591    			else if (TIMx == TIM8)
0000aa  4856              LDR      r0,|L9.516|
0000ac  4284              CMP      r4,r0
0000ae  d101              BNE      |L9.180|
;;;592    				irq = TIM8_UP_TIM13_IRQn;
0000b0  f04f0b2c          MOV      r11,#0x2c
                  |L9.180|
;;;593    
;;;594    			NVIC_InitStructure.NVIC_IRQChannel = irq;
0000b4  f88db000          STRB     r11,[sp,#0]
;;;595    			NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = _PreemptionPriority;
0000b8  f88d9001          STRB     r9,[sp,#1]
;;;596    			NVIC_InitStructure.NVIC_IRQChannelSubPriority = _SubPriority;
0000bc  f88da002          STRB     r10,[sp,#2]
;;;597    			NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
0000c0  2000              MOVS     r0,#0
0000c2  f88d0003          STRB     r0,[sp,#3]
;;;598    			NVIC_Init(&NVIC_InitStructure);
0000c6  4668              MOV      r0,sp
0000c8  f7fffffe          BL       NVIC_Init
                  |L9.204|
;;;599    		}		
;;;600    		return;
;;;601    	}
;;;602    
;;;603        /*-----------------------------------------------------------------------
;;;604    		system_stm32f4xx.c 文件中 static void SetSysClockToHSE(void) 函数对时钟的配置如下：
;;;605    
;;;606    			//HCLK = SYSCLK 
;;;607    			RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
;;;608    			  
;;;609    			//PCLK2 = HCLK
;;;610    			RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
;;;611    			
;;;612    			//PCLK1 = HCLK
;;;613    			RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
;;;614    
;;;615    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13,TIM14
;;;616    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;617    
;;;618    	----------------------------------------------------------------------- */
;;;619    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;620    	{
;;;621    		/* APB2 定时器 */
;;;622    		uiTIMxCLK = SystemCoreClock;
;;;623    	}
;;;624    	else	/* APB1 定时器 .  */
;;;625    	{
;;;626    		uiTIMxCLK = SystemCoreClock /2;	// SystemCoreClock / 2;
;;;627    	}
;;;628    
;;;629    	if (_ulFreq < 100)
;;;630    	{
;;;631    		usPrescaler = 10000 - 1;					/* 分频比 = 1000 */
;;;632    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;633    	}
;;;634    	else if (_ulFreq < 3000)
;;;635    	{
;;;636    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;637    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;638    	}
;;;639    	else	/* 大于4K的频率，无需分频 */
;;;640    	{
;;;641    		usPrescaler = 0;					/* 分频比 = 1 */
;;;642    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;643    	}
;;;644    
;;;645    	/* Time base configuration */
;;;646    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;647    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;648    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;649    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;650    
;;;651    	if(TIMx == TIM1 || TIMx == TIM8)
;;;652    		TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;	
;;;653        
;;;654    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;655    
;;;656    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;657    
;;;658    	/* TIM Interrupts enable */
;;;659    	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
;;;660    
;;;661    	/* TIMx enable counter */
;;;662    	TIM_Cmd(TIMx, ENABLE);
;;;663    
;;;664    	/* 配置TIM定时更新中断 (Update) */
;;;665    	{
;;;666    		NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;667    		uint8_t irq = 0;	/* 中断号, 定义在 stm32f4xx.h */
;;;668    
;;;669    		if (TIMx == TIM1)
;;;670    			irq = TIM1_UP_TIM10_IRQn;
;;;671    		else if (TIMx == TIM2)
;;;672    			irq = TIM2_IRQn;
;;;673    		else if (TIMx == TIM3)
;;;674    			irq = TIM3_IRQn;
;;;675    		else if (TIMx == TIM4)
;;;676    			irq = TIM4_IRQn;
;;;677    		else if (TIMx == TIM5)
;;;678    			irq = TIM5_IRQn;
;;;679    		else if (TIMx == TIM6)
;;;680    			irq = TIM6_DAC_IRQn;
;;;681    		else if (TIMx == TIM7)
;;;682    			irq = TIM7_IRQn;
;;;683    		else if (TIMx == TIM8)
;;;684    			irq = TIM8_UP_TIM13_IRQn;
;;;685    
;;;686    		NVIC_InitStructure.NVIC_IRQChannel = irq;
;;;687    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = _PreemptionPriority;
;;;688    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = _SubPriority;
;;;689    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;690    		NVIC_Init(&NVIC_InitStructure);
;;;691    	}
;;;692    }
0000cc  e8bd9fff          POP      {r0-r12,pc}
                  |L9.208|
0000d0  484b              LDR      r0,|L9.512|
0000d2  4284              CMP      r4,r0                 ;619
0000d4  d00b              BEQ      |L9.238|
0000d6  484b              LDR      r0,|L9.516|
0000d8  4284              CMP      r4,r0                 ;619
0000da  d008              BEQ      |L9.238|
0000dc  484a              LDR      r0,|L9.520|
0000de  4284              CMP      r4,r0                 ;619
0000e0  d005              BEQ      |L9.238|
0000e2  484a              LDR      r0,|L9.524|
0000e4  4284              CMP      r4,r0                 ;619
0000e6  d002              BEQ      |L9.238|
0000e8  4849              LDR      r0,|L9.528|
0000ea  4284              CMP      r4,r0                 ;619
0000ec  d102              BNE      |L9.244|
                  |L9.238|
0000ee  484e              LDR      r0,|L9.552|
0000f0  6806              LDR      r6,[r0,#0]            ;622  ; SystemCoreClock
0000f2  e002              B        |L9.250|
                  |L9.244|
0000f4  484c              LDR      r0,|L9.552|
0000f6  6800              LDR      r0,[r0,#0]            ;626  ; SystemCoreClock
0000f8  0846              LSRS     r6,r0,#1              ;626
                  |L9.250|
0000fa  2d64              CMP      r5,#0x64              ;629
0000fc  d20a              BCS      |L9.276|
0000fe  f242780f          MOV      r8,#0x270f            ;631
000102  f2427010          MOV      r0,#0x2710            ;632
000106  fbb6f0f0          UDIV     r0,r6,r0              ;632
00010a  fbb0f0f5          UDIV     r0,r0,r5              ;632
00010e  1e40              SUBS     r0,r0,#1              ;632
000110  b287              UXTH     r7,r0                 ;632
000112  e013              B        |L9.316|
                  |L9.276|
000114  f64030b8          MOV      r0,#0xbb8             ;634
000118  4285              CMP      r5,r0                 ;634
00011a  d209              BCS      |L9.304|
00011c  f04f0863          MOV      r8,#0x63              ;636
000120  2064              MOVS     r0,#0x64              ;637
000122  fbb6f0f0          UDIV     r0,r6,r0              ;637
000126  fbb0f0f5          UDIV     r0,r0,r5              ;637
00012a  1e40              SUBS     r0,r0,#1              ;637
00012c  b287              UXTH     r7,r0                 ;637
00012e  e005              B        |L9.316|
                  |L9.304|
000130  f04f0800          MOV      r8,#0                 ;641
000134  fbb6f0f5          UDIV     r0,r6,r5              ;642
000138  1e40              SUBS     r0,r0,#1              ;642
00013a  b287              UXTH     r7,r0                 ;642
                  |L9.316|
00013c  9702              STR      r7,[sp,#8]            ;646
00013e  f8ad8004          STRH     r8,[sp,#4]            ;647
000142  2000              MOVS     r0,#0                 ;648
000144  f8ad000c          STRH     r0,[sp,#0xc]          ;648
000148  f8ad0006          STRH     r0,[sp,#6]            ;649
00014c  482c              LDR      r0,|L9.512|
00014e  4284              CMP      r4,r0                 ;651
000150  d002              BEQ      |L9.344|
000152  482c              LDR      r0,|L9.516|
000154  4284              CMP      r4,r0                 ;651
000156  d102              BNE      |L9.350|
                  |L9.344|
000158  2000              MOVS     r0,#0                 ;652
00015a  f88d000e          STRB     r0,[sp,#0xe]          ;652
                  |L9.350|
00015e  a901              ADD      r1,sp,#4              ;654
000160  4620              MOV      r0,r4                 ;654
000162  f7fffffe          BL       TIM_TimeBaseInit
000166  2101              MOVS     r1,#1                 ;656
000168  4620              MOV      r0,r4                 ;656
00016a  f7fffffe          BL       TIM_ARRPreloadConfig
00016e  2201              MOVS     r2,#1                 ;659
000170  4611              MOV      r1,r2                 ;659
000172  4620              MOV      r0,r4                 ;659
000174  f7fffffe          BL       TIM_ITConfig
000178  2101              MOVS     r1,#1                 ;662
00017a  4620              MOV      r0,r4                 ;662
00017c  f7fffffe          BL       TIM_Cmd
000180  f04f0b00          MOV      r11,#0                ;667
000184  481e              LDR      r0,|L9.512|
000186  4284              CMP      r4,r0                 ;669
000188  d102              BNE      |L9.400|
00018a  f04f0b19          MOV      r11,#0x19             ;670
00018e  e028              B        |L9.482|
                  |L9.400|
000190  f1b44f80          CMP      r4,#0x40000000        ;671
000194  d102              BNE      |L9.412|
000196  f04f0b1c          MOV      r11,#0x1c             ;672
00019a  e022              B        |L9.482|
                  |L9.412|
00019c  481d              LDR      r0,|L9.532|
00019e  4284              CMP      r4,r0                 ;673
0001a0  d102              BNE      |L9.424|
0001a2  f04f0b1d          MOV      r11,#0x1d             ;674
0001a6  e01c              B        |L9.482|
                  |L9.424|
0001a8  481b              LDR      r0,|L9.536|
0001aa  4284              CMP      r4,r0                 ;675
0001ac  d102              BNE      |L9.436|
0001ae  f04f0b1e          MOV      r11,#0x1e             ;676
0001b2  e016              B        |L9.482|
                  |L9.436|
0001b4  4819              LDR      r0,|L9.540|
0001b6  4284              CMP      r4,r0                 ;677
0001b8  d102              BNE      |L9.448|
0001ba  f04f0b32          MOV      r11,#0x32             ;678
0001be  e010              B        |L9.482|
                  |L9.448|
0001c0  4817              LDR      r0,|L9.544|
0001c2  4284              CMP      r4,r0                 ;679
0001c4  d102              BNE      |L9.460|
0001c6  f04f0b36          MOV      r11,#0x36             ;680
0001ca  e00a              B        |L9.482|
                  |L9.460|
0001cc  4815              LDR      r0,|L9.548|
0001ce  4284              CMP      r4,r0                 ;681
0001d0  d102              BNE      |L9.472|
0001d2  f04f0b37          MOV      r11,#0x37             ;682
0001d6  e004              B        |L9.482|
                  |L9.472|
0001d8  480a              LDR      r0,|L9.516|
0001da  4284              CMP      r4,r0                 ;683
0001dc  d101              BNE      |L9.482|
0001de  f04f0b2c          MOV      r11,#0x2c             ;684
                  |L9.482|
0001e2  f88db000          STRB     r11,[sp,#0]           ;686
0001e6  f88d9001          STRB     r9,[sp,#1]            ;687
0001ea  f88da002          STRB     r10,[sp,#2]           ;688
0001ee  2001              MOVS     r0,#1                 ;689
0001f0  f88d0003          STRB     r0,[sp,#3]            ;689
0001f4  4668              MOV      r0,sp                 ;690
0001f6  f7fffffe          BL       NVIC_Init
0001fa  bf00              NOP      
0001fc  e766              B        |L9.204|
;;;693    
                          ENDP

0001fe  0000              DCW      0x0000
                  |L9.512|
                          DCD      0x40010000
                  |L9.516|
                          DCD      0x40010400
                  |L9.520|
                          DCD      0x40014000
                  |L9.524|
                          DCD      0x40014400
                  |L9.528|
                          DCD      0x40014800
                  |L9.532|
                          DCD      0x40000400
                  |L9.536|
                          DCD      0x40000800
                  |L9.540|
                          DCD      0x40000c00
                  |L9.544|
                          DCD      0x40001000
                  |L9.548|
                          DCD      0x40001400
                  |L9.552|
                          DCD      SystemCoreClock

;*** Start embedded assembler ***

#line 1 "..\\User\\bsp\\bsp_tim_pwm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_94af553a____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_bsp_tim_pwm_c_94af553a____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_94af553a____REVSH|
#line 402
|__asm___13_bsp_tim_pwm_c_94af553a____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_94af553a____RRX|
#line 587
|__asm___13_bsp_tim_pwm_c_94af553a____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
