; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f2xx_pwr.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f2xx_pwr.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\User\bsp -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\FatFS\src -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\stm32f2xx_pwr.crf ..\Libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_pwr.c]
                          THUMB

                          AREA ||i.PWR_BackupAccessCmd||, CODE, READONLY, ALIGN=2

                  PWR_BackupAccessCmd PROC
;;;135      */
;;;136    void PWR_BackupAccessCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L1.8|
;;;137    {
;;;138      /* Check the parameters */
;;;139      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;140      
;;;141      *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
000002  6208              STR      r0,[r1,#0x20]
;;;142    }
000004  4770              BX       lr
;;;143    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_BackupRegulatorCmd||, CODE, READONLY, ALIGN=2

                  PWR_BackupRegulatorCmd PROC
;;;290      */
;;;291    void PWR_BackupRegulatorCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L2.8|
;;;292    {
;;;293      /* Check the parameters */
;;;294      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;295    
;;;296      *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;297    }
000004  4770              BX       lr
;;;298    
                          ENDP

000006  0000              DCW      0x0000
                  |L2.8|
                          DCD      0x420e00a4

                          AREA ||i.PWR_ClearFlag||, CODE, READONLY, ALIGN=2

                  PWR_ClearFlag PROC
;;;595      */
;;;596    void PWR_ClearFlag(uint32_t PWR_FLAG)
000000  4903              LDR      r1,|L3.16|
;;;597    {
;;;598      /* Check the parameters */
;;;599      assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
;;;600             
;;;601      PWR->CR |=  PWR_FLAG << 2;
000002  6809              LDR      r1,[r1,#0]
000004  ea410180          ORR      r1,r1,r0,LSL #2
000008  4a01              LDR      r2,|L3.16|
00000a  6011              STR      r1,[r2,#0]
;;;602    }
00000c  4770              BX       lr
;;;603    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40007000

                          AREA ||i.PWR_DeInit||, CODE, READONLY, ALIGN=1

                  PWR_DeInit PROC
;;;120      */
;;;121    void PWR_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;122    {
;;;123      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
000002  2101              MOVS     r1,#1
000004  0708              LSLS     r0,r1,#28
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;124      RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f5080          MOV      r0,#0x10000000
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;125    }
000014  bd10              POP      {r4,pc}
;;;126    
                          ENDP


                          AREA ||i.PWR_EnterSTANDBYMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTANDBYMode PROC
;;;513      */
;;;514    void PWR_EnterSTANDBYMode(void)
000000  480a              LDR      r0,|L5.44|
;;;515    {
;;;516      /* Clear Wakeup flag */
;;;517      PWR->CR |= PWR_CR_CWUF;
000002  6800              LDR      r0,[r0,#0]
000004  f0400004          ORR      r0,r0,#4
000008  4908              LDR      r1,|L5.44|
00000a  6008              STR      r0,[r1,#0]
;;;518      
;;;519      /* Select STANDBY mode */
;;;520      PWR->CR |= PWR_CR_PDDS;
00000c  4608              MOV      r0,r1
00000e  6800              LDR      r0,[r0,#0]
000010  f0400002          ORR      r0,r0,#2
000014  6008              STR      r0,[r1,#0]
;;;521      
;;;522      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;523      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000016  4806              LDR      r0,|L5.48|
000018  6800              LDR      r0,[r0,#0]
00001a  f0400004          ORR      r0,r0,#4
00001e  4904              LDR      r1,|L5.48|
000020  6008              STR      r0,[r1,#0]
;;;524      
;;;525    /* This option is used to ensure that store operations are completed */
;;;526    #if defined ( __CC_ARM   )
;;;527      __force_stores();
000022  bf00              NOP      
000024  bf00              NOP      
;;;528    #endif
;;;529      /* Request Wait For Interrupt */
;;;530      __WFI();
000026  bf30              WFI      
;;;531    }
000028  4770              BX       lr
;;;532    
                          ENDP

00002a  0000              DCW      0x0000
                  |L5.44|
                          DCD      0x40007000
                  |L5.48|
                          DCD      0xe000ed10

                          AREA ||i.PWR_EnterSTOPMode||, CODE, READONLY, ALIGN=2

                  PWR_EnterSTOPMode PROC
;;;465      */
;;;466    void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
000000  b510              PUSH     {r4,lr}
;;;467    {
000002  4602              MOV      r2,r0
;;;468      uint32_t tmpreg = 0;
000004  2000              MOVS     r0,#0
;;;469      
;;;470      /* Check the parameters */
;;;471      assert_param(IS_PWR_REGULATOR(PWR_Regulator));
;;;472      assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
;;;473      
;;;474      /* Select the regulator state in STOP mode ---------------------------------*/
;;;475      tmpreg = PWR->CR;
000006  4b0c              LDR      r3,|L6.56|
000008  6818              LDR      r0,[r3,#0]
;;;476      /* Clear PDDS and LPDSR bits */
;;;477      tmpreg &= CR_DS_MASK;
00000a  f0200003          BIC      r0,r0,#3
;;;478      
;;;479      /* Set LPDSR bit according to PWR_Regulator value */
;;;480      tmpreg |= PWR_Regulator;
00000e  4310              ORRS     r0,r0,r2
;;;481      
;;;482      /* Store the new value */
;;;483      PWR->CR = tmpreg;
000010  6018              STR      r0,[r3,#0]
;;;484      
;;;485      /* Set SLEEPDEEP bit of Cortex System Control Register */
;;;486      SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000012  4b0a              LDR      r3,|L6.60|
000014  681b              LDR      r3,[r3,#0]
000016  f0430304          ORR      r3,r3,#4
00001a  4c08              LDR      r4,|L6.60|
00001c  6023              STR      r3,[r4,#0]
;;;487      
;;;488      /* Select STOP mode entry --------------------------------------------------*/
;;;489      if(PWR_STOPEntry == PWR_STOPEntry_WFI)
00001e  2901              CMP      r1,#1
000020  d101              BNE      |L6.38|
;;;490      {   
;;;491        /* Request Wait For Interrupt */
;;;492        __WFI();
000022  bf30              WFI      
000024  e000              B        |L6.40|
                  |L6.38|
;;;493      }
;;;494      else
;;;495      {
;;;496        /* Request Wait For Event */
;;;497        __WFE();
000026  bf20              WFE      
                  |L6.40|
;;;498      }
;;;499      /* Reset SLEEPDEEP bit of Cortex System Control Register */
;;;500      SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
000028  4b04              LDR      r3,|L6.60|
00002a  681b              LDR      r3,[r3,#0]
00002c  f0230304          BIC      r3,r3,#4
000030  4c02              LDR      r4,|L6.60|
000032  6023              STR      r3,[r4,#0]
;;;501    }
000034  bd10              POP      {r4,pc}
;;;502    
                          ENDP

000036  0000              DCW      0x0000
                  |L6.56|
                          DCD      0x40007000
                  |L6.60|
                          DCD      0xe000ed10

                          AREA ||i.PWR_FlashPowerDownCmd||, CODE, READONLY, ALIGN=2

                  PWR_FlashPowerDownCmd PROC
;;;325      */
;;;326    void PWR_FlashPowerDownCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L7.8|
;;;327    {
;;;328      /* Check the parameters */
;;;329      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;330    
;;;331      *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
000002  6248              STR      r0,[r1,#0x24]
;;;332    }
000004  4770              BX       lr
;;;333    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  PWR_GetFlagStatus PROC
;;;568      */
;;;569    FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
000000  4601              MOV      r1,r0
;;;570    {
;;;571      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;572      
;;;573      /* Check the parameters */
;;;574      assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
;;;575      
;;;576      if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
000004  4a03              LDR      r2,|L8.20|
000006  6852              LDR      r2,[r2,#4]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L8.16|
;;;577      {
;;;578        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L8.18|
                  |L8.16|
;;;579      }
;;;580      else
;;;581      {
;;;582        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L8.18|
;;;583      }
;;;584      /* Return the flag status */
;;;585      return bitstatus;
;;;586    }
000012  4770              BX       lr
;;;587    
                          ENDP

                  |L8.20|
                          DCD      0x40007000

                          AREA ||i.PWR_PVDCmd||, CODE, READONLY, ALIGN=2

                  PWR_PVDCmd PROC
;;;208      */
;;;209    void PWR_PVDCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L9.8|
;;;210    {
;;;211      /* Check the parameters */
;;;212      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;213      
;;;214      *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
000002  6108              STR      r0,[r1,#0x10]
;;;215    }
000004  4770              BX       lr
;;;216    
                          ENDP

000006  0000              DCW      0x0000
                  |L9.8|
                          DCD      0x420e0000

                          AREA ||i.PWR_PVDLevelConfig||, CODE, READONLY, ALIGN=2

                  PWR_PVDLevelConfig PROC
;;;183      */
;;;184    void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
000000  4601              MOV      r1,r0
;;;185    {
;;;186      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;187      
;;;188      /* Check the parameters */
;;;189      assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
;;;190      
;;;191      tmpreg = PWR->CR;
000004  4a03              LDR      r2,|L10.20|
000006  6810              LDR      r0,[r2,#0]
;;;192      
;;;193      /* Clear PLS[7:5] bits */
;;;194      tmpreg &= CR_PLS_MASK;
000008  f02000e0          BIC      r0,r0,#0xe0
;;;195      
;;;196      /* Set PLS[7:5] bits according to PWR_PVDLevel value */
;;;197      tmpreg |= PWR_PVDLevel;
00000c  4308              ORRS     r0,r0,r1
;;;198      
;;;199      /* Store the new value */
;;;200      PWR->CR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;201    }
000010  4770              BX       lr
;;;202    
                          ENDP

000012  0000              DCW      0x0000
                  |L10.20|
                          DCD      0x40007000

                          AREA ||i.PWR_WakeUpPinCmd||, CODE, READONLY, ALIGN=2

                  PWR_WakeUpPinCmd PROC
;;;242      */
;;;243    void PWR_WakeUpPinCmd(FunctionalState NewState)
000000  4901              LDR      r1,|L11.8|
;;;244    {
;;;245      /* Check the parameters */  
;;;246      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;247    
;;;248      *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
000002  6008              STR      r0,[r1,#0]
;;;249    }
000004  4770              BX       lr
;;;250    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      0x420e00a0

;*** Start embedded assembler ***

#line 1 "..\\Libraries\\STM32F2xx_StdPeriph_Driver\\src\\stm32f2xx_pwr.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f2xx_pwr_c_0c2a8b75____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_stm32f2xx_pwr_c_0c2a8b75____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f2xx_pwr_c_0c2a8b75____REVSH|
#line 402
|__asm___15_stm32f2xx_pwr_c_0c2a8b75____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f2xx_pwr_c_0c2a8b75____RRX|
#line 587
|__asm___15_stm32f2xx_pwr_c_0c2a8b75____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
