; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\queue.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\queue.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\User -I..\User\bsp -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\FatFS\src -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\queue.crf ..\FreeRTOS\queue.c]
                          THUMB

                          AREA ||i.prvCopyDataFromQueue||, CODE, READONLY, ALIGN=1

                  prvCopyDataFromQueue PROC
;;;1775   
;;;1776   static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
000000  b570              PUSH     {r4-r6,lr}
;;;1777   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1778   	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
000006  6c20              LDR      r0,[r4,#0x40]
000008  b170              CBZ      r0,|L1.40|
;;;1779   	{
;;;1780   		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
00000a  6c21              LDR      r1,[r4,#0x40]
00000c  68e0              LDR      r0,[r4,#0xc]
00000e  4408              ADD      r0,r0,r1
000010  60e0              STR      r0,[r4,#0xc]
;;;1781   		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
000012  6861              LDR      r1,[r4,#4]
000014  68e0              LDR      r0,[r4,#0xc]
000016  4288              CMP      r0,r1
000018  d301              BCC      |L1.30|
;;;1782   		{
;;;1783   			pxQueue->u.pcReadFrom = pxQueue->pcHead;
00001a  6820              LDR      r0,[r4,#0]
00001c  60e0              STR      r0,[r4,#0xc]
                  |L1.30|
;;;1784   		}
;;;1785   		else
;;;1786   		{
;;;1787   			mtCOVERAGE_TEST_MARKER();
;;;1788   		}
;;;1789   		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
00001e  4628              MOV      r0,r5
000020  6c22              LDR      r2,[r4,#0x40]
000022  68e1              LDR      r1,[r4,#0xc]
000024  f7fffffe          BL       __aeabi_memcpy
                  |L1.40|
;;;1790   	}
;;;1791   }
000028  bd70              POP      {r4-r6,pc}
;;;1792   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvCopyDataToQueue||, CODE, READONLY, ALIGN=1

                  prvCopyDataToQueue PROC
;;;1696   
;;;1697   static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1698   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;1699   BaseType_t xReturn = pdFALSE;
00000a  f04f0800          MOV      r8,#0
;;;1700   UBaseType_t uxMessagesWaiting;
;;;1701   
;;;1702   	/* This function is called from a critical section. */
;;;1703   
;;;1704   	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
00000e  6ba6              LDR      r6,[r4,#0x38]
;;;1705   
;;;1706   	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
000010  6c20              LDR      r0,[r4,#0x40]
000012  b940              CBNZ     r0,|L2.38|
;;;1707   	{
;;;1708   		#if ( configUSE_MUTEXES == 1 )
;;;1709   		{
;;;1710   			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
000014  6820              LDR      r0,[r4,#0]
000016  bb60              CBNZ     r0,|L2.114|
;;;1711   			{
;;;1712   				/* The mutex is no longer being held. */
;;;1713   				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
000018  6860              LDR      r0,[r4,#4]
00001a  f7fffffe          BL       xTaskPriorityDisinherit
00001e  4680              MOV      r8,r0
;;;1714   				pxQueue->pxMutexHolder = NULL;
000020  2000              MOVS     r0,#0
000022  6060              STR      r0,[r4,#4]
000024  e025              B        |L2.114|
                  |L2.38|
;;;1715   			}
;;;1716   			else
;;;1717   			{
;;;1718   				mtCOVERAGE_TEST_MARKER();
;;;1719   			}
;;;1720   		}
;;;1721   		#endif /* configUSE_MUTEXES */
;;;1722   	}
;;;1723   	else if( xPosition == queueSEND_TO_BACK )
000026  b97d              CBNZ     r5,|L2.72|
;;;1724   	{
;;;1725   		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
000028  4639              MOV      r1,r7
00002a  6c22              LDR      r2,[r4,#0x40]
00002c  68a0              LDR      r0,[r4,#8]
00002e  f7fffffe          BL       __aeabi_memcpy
;;;1726   		pxQueue->pcWriteTo += pxQueue->uxItemSize;
000032  6c21              LDR      r1,[r4,#0x40]
000034  68a0              LDR      r0,[r4,#8]
000036  4408              ADD      r0,r0,r1
000038  60a0              STR      r0,[r4,#8]
;;;1727   		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
00003a  e9d41001          LDRD     r1,r0,[r4,#4]
00003e  4288              CMP      r0,r1
000040  d317              BCC      |L2.114|
;;;1728   		{
;;;1729   			pxQueue->pcWriteTo = pxQueue->pcHead;
000042  6820              LDR      r0,[r4,#0]
000044  60a0              STR      r0,[r4,#8]
000046  e014              B        |L2.114|
                  |L2.72|
;;;1730   		}
;;;1731   		else
;;;1732   		{
;;;1733   			mtCOVERAGE_TEST_MARKER();
;;;1734   		}
;;;1735   	}
;;;1736   	else
;;;1737   	{
;;;1738   		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000048  4639              MOV      r1,r7
00004a  6c22              LDR      r2,[r4,#0x40]
00004c  68e0              LDR      r0,[r4,#0xc]
00004e  f7fffffe          BL       __aeabi_memcpy
;;;1739   		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
000052  6c21              LDR      r1,[r4,#0x40]
000054  68e0              LDR      r0,[r4,#0xc]
000056  1a40              SUBS     r0,r0,r1
000058  60e0              STR      r0,[r4,#0xc]
;;;1740   		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
00005a  6821              LDR      r1,[r4,#0]
00005c  68e0              LDR      r0,[r4,#0xc]
00005e  4288              CMP      r0,r1
000060  d203              BCS      |L2.106|
;;;1741   		{
;;;1742   			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
000062  6c21              LDR      r1,[r4,#0x40]
000064  6860              LDR      r0,[r4,#4]
000066  1a40              SUBS     r0,r0,r1
000068  60e0              STR      r0,[r4,#0xc]
                  |L2.106|
;;;1743   		}
;;;1744   		else
;;;1745   		{
;;;1746   			mtCOVERAGE_TEST_MARKER();
;;;1747   		}
;;;1748   
;;;1749   		if( xPosition == queueOVERWRITE )
00006a  2d02              CMP      r5,#2
00006c  d101              BNE      |L2.114|
;;;1750   		{
;;;1751   			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
00006e  b106              CBZ      r6,|L2.114|
;;;1752   			{
;;;1753   				/* An item is not being added but overwritten, so subtract
;;;1754   				one from the recorded number of items in the queue so when
;;;1755   				one is added again below the number of recorded items remains
;;;1756   				correct. */
;;;1757   				--uxMessagesWaiting;
000070  1e76              SUBS     r6,r6,#1
                  |L2.114|
;;;1758   			}
;;;1759   			else
;;;1760   			{
;;;1761   				mtCOVERAGE_TEST_MARKER();
;;;1762   			}
;;;1763   		}
;;;1764   		else
;;;1765   		{
;;;1766   			mtCOVERAGE_TEST_MARKER();
;;;1767   		}
;;;1768   	}
;;;1769   
;;;1770   	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
000072  1c70              ADDS     r0,r6,#1
000074  63a0              STR      r0,[r4,#0x38]
;;;1771   
;;;1772   	return xReturn;
000076  4640              MOV      r0,r8
;;;1773   }
000078  e8bd81f0          POP      {r4-r8,pc}
;;;1774   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvInitialiseMutex||, CODE, READONLY, ALIGN=1

                  prvInitialiseMutex PROC
;;;475    
;;;476    	static void prvInitialiseMutex( Queue_t *pxNewQueue )
000000  b510              PUSH     {r4,lr}
;;;477    	{
000002  4604              MOV      r4,r0
;;;478    		if( pxNewQueue != NULL )
000004  b14c              CBZ      r4,|L3.26|
;;;479    		{
;;;480    			/* The queue create function will set all the queue structure members
;;;481    			correctly for a generic queue, but this function is creating a
;;;482    			mutex.  Overwrite those members that need to be set differently -
;;;483    			in particular the information required for priority inheritance. */
;;;484    			pxNewQueue->pxMutexHolder = NULL;
000006  2000              MOVS     r0,#0
000008  6060              STR      r0,[r4,#4]
;;;485    			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
00000a  6020              STR      r0,[r4,#0]
;;;486    
;;;487    			/* In case this is a recursive mutex. */
;;;488    			pxNewQueue->u.uxRecursiveCallCount = 0;
00000c  60e0              STR      r0,[r4,#0xc]
;;;489    
;;;490    			traceCREATE_MUTEX( pxNewQueue );
;;;491    
;;;492    			/* Start with the semaphore in the expected state. */
;;;493    			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
00000e  2300              MOVS     r3,#0
000010  461a              MOV      r2,r3
000012  4619              MOV      r1,r3
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       xQueueGenericSend
                  |L3.26|
;;;494    		}
;;;495    		else
;;;496    		{
;;;497    			traceCREATE_MUTEX_FAILED();
;;;498    		}
;;;499    	}
00001a  bd10              POP      {r4,pc}
;;;500    
                          ENDP


                          AREA ||i.prvInitialiseNewQueue||, CODE, READONLY, ALIGN=1

                  prvInitialiseNewQueue PROC
;;;431    
;;;432    static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;433    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  9c06              LDR      r4,[sp,#0x18]
;;;434    	/* Remove compiler warnings about unused parameters should
;;;435    	configUSE_TRACE_FACILITY not be set to 1. */
;;;436    	( void ) ucQueueType;
;;;437    
;;;438    	if( uxItemSize == ( UBaseType_t ) 0 )
00000e  b90d              CBNZ     r5,|L4.20|
;;;439    	{
;;;440    		/* No RAM was allocated for the queue storage area, but PC head cannot
;;;441    		be set to NULL because NULL is used as a key to say the queue is used as
;;;442    		a mutex.  Therefore just set pcHead to point to the queue as a benign
;;;443    		value that is known to be within the memory map. */
;;;444    		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
000010  6024              STR      r4,[r4,#0]
000012  e000              B        |L4.22|
                  |L4.20|
;;;445    	}
;;;446    	else
;;;447    	{
;;;448    		/* Set the head to the start of the queue storage area. */
;;;449    		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
000014  6027              STR      r7,[r4,#0]
                  |L4.22|
;;;450    	}
;;;451    
;;;452    	/* Initialise the queue members as described where the queue type is
;;;453    	defined. */
;;;454    	pxNewQueue->uxLength = uxQueueLength;
000016  63e6              STR      r6,[r4,#0x3c]
;;;455    	pxNewQueue->uxItemSize = uxItemSize;
000018  6425              STR      r5,[r4,#0x40]
;;;456    	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
00001a  2101              MOVS     r1,#1
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       xQueueGenericReset
;;;457    
;;;458    	#if ( configUSE_TRACE_FACILITY == 1 )
;;;459    	{
;;;460    		pxNewQueue->ucQueueType = ucQueueType;
000022  f884804c          STRB     r8,[r4,#0x4c]
;;;461    	}
;;;462    	#endif /* configUSE_TRACE_FACILITY */
;;;463    
;;;464    	#if( configUSE_QUEUE_SETS == 1 )
;;;465    	{
;;;466    		pxNewQueue->pxQueueSetContainer = NULL;
;;;467    	}
;;;468    	#endif /* configUSE_QUEUE_SETS */
;;;469    
;;;470    	traceQUEUE_CREATE( pxNewQueue );
;;;471    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;472    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvIsQueueEmpty||, CODE, READONLY, ALIGN=1

                  prvIsQueueEmpty PROC
;;;1913   
;;;1914   static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
000000  b570              PUSH     {r4-r6,lr}
;;;1915   {
000002  4605              MOV      r5,r0
;;;1916   BaseType_t xReturn;
;;;1917   
;;;1918   	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1919   	{
;;;1920   		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
000008  6ba8              LDR      r0,[r5,#0x38]
00000a  b908              CBNZ     r0,|L5.16|
;;;1921   		{
;;;1922   			xReturn = pdTRUE;
00000c  2401              MOVS     r4,#1
00000e  e000              B        |L5.18|
                  |L5.16|
;;;1923   		}
;;;1924   		else
;;;1925   		{
;;;1926   			xReturn = pdFALSE;
000010  2400              MOVS     r4,#0
                  |L5.18|
;;;1927   		}
;;;1928   	}
;;;1929   	taskEXIT_CRITICAL();
000012  f7fffffe          BL       vPortExitCritical
;;;1930   
;;;1931   	return xReturn;
000016  4620              MOV      r0,r4
;;;1932   }
000018  bd70              POP      {r4-r6,pc}
;;;1933   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvIsQueueFull||, CODE, READONLY, ALIGN=1

                  prvIsQueueFull PROC
;;;1952   
;;;1953   static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
000000  b570              PUSH     {r4-r6,lr}
;;;1954   {
000002  4605              MOV      r5,r0
;;;1955   BaseType_t xReturn;
;;;1956   
;;;1957   	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1958   	{
;;;1959   		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
000008  6ba8              LDR      r0,[r5,#0x38]
00000a  6be9              LDR      r1,[r5,#0x3c]
00000c  4288              CMP      r0,r1
00000e  d101              BNE      |L6.20|
;;;1960   		{
;;;1961   			xReturn = pdTRUE;
000010  2401              MOVS     r4,#1
000012  e000              B        |L6.22|
                  |L6.20|
;;;1962   		}
;;;1963   		else
;;;1964   		{
;;;1965   			xReturn = pdFALSE;
000014  2400              MOVS     r4,#0
                  |L6.22|
;;;1966   		}
;;;1967   	}
;;;1968   	taskEXIT_CRITICAL();
000016  f7fffffe          BL       vPortExitCritical
;;;1969   
;;;1970   	return xReturn;
00001a  4620              MOV      r0,r4
;;;1971   }
00001c  bd70              POP      {r4-r6,pc}
;;;1972   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvUnlockQueue||, CODE, READONLY, ALIGN=1

                  prvUnlockQueue PROC
;;;1793   
;;;1794   static void prvUnlockQueue( Queue_t * const pxQueue )
000000  b570              PUSH     {r4-r6,lr}
;;;1795   {
000002  4604              MOV      r4,r0
;;;1796   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
;;;1797   
;;;1798   	/* The lock counts contains the number of extra data items placed or
;;;1799   	removed from the queue while the queue was locked.  When a queue is
;;;1800   	locked items can be added or removed, but the event lists cannot be
;;;1801   	updated. */
;;;1802   	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1803   	{
;;;1804   		int8_t cTxLock = pxQueue->cTxLock;
000008  f9945045          LDRSB    r5,[r4,#0x45]
;;;1805   
;;;1806   		/* See if data was added to the queue while it was locked. */
;;;1807   		while( cTxLock > queueLOCKED_UNMODIFIED )
00000c  e010              B        |L7.48|
                  |L7.14|
;;;1808   		{
;;;1809   			/* Data was posted while the queue was locked.  Are any tasks
;;;1810   			blocked waiting for data to become available? */
;;;1811   			#if ( configUSE_QUEUE_SETS == 1 )
;;;1812   			{
;;;1813   				if( pxQueue->pxQueueSetContainer != NULL )
;;;1814   				{
;;;1815   					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
;;;1816   					{
;;;1817   						/* The queue is a member of a queue set, and posting to
;;;1818   						the queue set caused a higher priority task to unblock.
;;;1819   						A context switch is required. */
;;;1820   						vTaskMissedYield();
;;;1821   					}
;;;1822   					else
;;;1823   					{
;;;1824   						mtCOVERAGE_TEST_MARKER();
;;;1825   					}
;;;1826   				}
;;;1827   				else
;;;1828   				{
;;;1829   					/* Tasks that are removed from the event list will get
;;;1830   					added to the pending ready list as the scheduler is still
;;;1831   					suspended. */
;;;1832   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1833   					{
;;;1834   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1835   						{
;;;1836   							/* The task waiting has a higher priority so record that a
;;;1837   							context	switch is required. */
;;;1838   							vTaskMissedYield();
;;;1839   						}
;;;1840   						else
;;;1841   						{
;;;1842   							mtCOVERAGE_TEST_MARKER();
;;;1843   						}
;;;1844   					}
;;;1845   					else
;;;1846   					{
;;;1847   						break;
;;;1848   					}
;;;1849   				}
;;;1850   			}
;;;1851   			#else /* configUSE_QUEUE_SETS */
;;;1852   			{
;;;1853   				/* Tasks that are removed from the event list will get added to
;;;1854   				the pending ready list as the scheduler is still suspended. */
;;;1855   				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
00000e  6a60              LDR      r0,[r4,#0x24]
000010  b908              CBNZ     r0,|L7.22|
000012  2001              MOVS     r0,#1
000014  e000              B        |L7.24|
                  |L7.22|
000016  2000              MOVS     r0,#0
                  |L7.24|
000018  b938              CBNZ     r0,|L7.42|
;;;1856   				{
;;;1857   					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
00001a  f1040024          ADD      r0,r4,#0x24
00001e  f7fffffe          BL       xTaskRemoveFromEventList
000022  b118              CBZ      r0,|L7.44|
;;;1858   					{
;;;1859   						/* The task waiting has a higher priority so record that
;;;1860   						a context switch is required. */
;;;1861   						vTaskMissedYield();
000024  f7fffffe          BL       vTaskMissedYield
000028  e000              B        |L7.44|
                  |L7.42|
;;;1862   					}
;;;1863   					else
;;;1864   					{
;;;1865   						mtCOVERAGE_TEST_MARKER();
;;;1866   					}
;;;1867   				}
;;;1868   				else
;;;1869   				{
;;;1870   					break;
00002a  e003              B        |L7.52|
                  |L7.44|
;;;1871   				}
;;;1872   			}
;;;1873   			#endif /* configUSE_QUEUE_SETS */
;;;1874   
;;;1875   			--cTxLock;
00002c  1e68              SUBS     r0,r5,#1
00002e  b245              SXTB     r5,r0
                  |L7.48|
000030  2d00              CMP      r5,#0                 ;1807
000032  dcec              BGT      |L7.14|
                  |L7.52|
000034  bf00              NOP                            ;1870
;;;1876   		}
;;;1877   
;;;1878   		pxQueue->cTxLock = queueUNLOCKED;
000036  20ff              MOVS     r0,#0xff
000038  f8840045          STRB     r0,[r4,#0x45]
;;;1879   	}
;;;1880   	taskEXIT_CRITICAL();
00003c  f7fffffe          BL       vPortExitCritical
;;;1881   
;;;1882   	/* Do the same for the Rx lock. */
;;;1883   	taskENTER_CRITICAL();
000040  f7fffffe          BL       vPortEnterCritical
;;;1884   	{
;;;1885   		int8_t cRxLock = pxQueue->cRxLock;
000044  f9945044          LDRSB    r5,[r4,#0x44]
;;;1886   
;;;1887   		while( cRxLock > queueLOCKED_UNMODIFIED )
000048  e010              B        |L7.108|
                  |L7.74|
;;;1888   		{
;;;1889   			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
00004a  6920              LDR      r0,[r4,#0x10]
00004c  b908              CBNZ     r0,|L7.82|
00004e  2001              MOVS     r0,#1
000050  e000              B        |L7.84|
                  |L7.82|
000052  2000              MOVS     r0,#0
                  |L7.84|
000054  b948              CBNZ     r0,|L7.106|
;;;1890   			{
;;;1891   				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
000056  f1040010          ADD      r0,r4,#0x10
00005a  f7fffffe          BL       xTaskRemoveFromEventList
00005e  b108              CBZ      r0,|L7.100|
;;;1892   				{
;;;1893   					vTaskMissedYield();
000060  f7fffffe          BL       vTaskMissedYield
                  |L7.100|
;;;1894   				}
;;;1895   				else
;;;1896   				{
;;;1897   					mtCOVERAGE_TEST_MARKER();
;;;1898   				}
;;;1899   
;;;1900   				--cRxLock;
000064  1e68              SUBS     r0,r5,#1
000066  b245              SXTB     r5,r0
000068  e000              B        |L7.108|
                  |L7.106|
;;;1901   			}
;;;1902   			else
;;;1903   			{
;;;1904   				break;
00006a  e001              B        |L7.112|
                  |L7.108|
00006c  2d00              CMP      r5,#0                 ;1887
00006e  dcec              BGT      |L7.74|
                  |L7.112|
000070  bf00              NOP      
;;;1905   			}
;;;1906   		}
;;;1907   
;;;1908   		pxQueue->cRxLock = queueUNLOCKED;
000072  20ff              MOVS     r0,#0xff
000074  f8840044          STRB     r0,[r4,#0x44]
;;;1909   	}
;;;1910   	taskEXIT_CRITICAL();
000078  f7fffffe          BL       vPortExitCritical
;;;1911   }
00007c  bd70              POP      {r4-r6,pc}
;;;1912   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.ucQueueGetQueueType||, CODE, READONLY, ALIGN=1

                  ucQueueGetQueueType PROC
;;;1688   
;;;1689   	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
000000  4601              MOV      r1,r0
;;;1690   	{
;;;1691   		return ( ( Queue_t * ) xQueue )->ucQueueType;
000002  f891004c          LDRB     r0,[r1,#0x4c]
;;;1692   	}
000006  4770              BX       lr
;;;1693   
                          ENDP


                          AREA ||i.uxQueueGetQueueNumber||, CODE, READONLY, ALIGN=1

                  uxQueueGetQueueNumber PROC
;;;1668   
;;;1669   	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
000000  4601              MOV      r1,r0
;;;1670   	{
;;;1671   		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
000002  6c88              LDR      r0,[r1,#0x48]
;;;1672   	}
000004  4770              BX       lr
;;;1673   
                          ENDP


                          AREA ||i.uxQueueMessagesWaiting||, CODE, READONLY, ALIGN=1

                  uxQueueMessagesWaiting PROC
;;;1578   
;;;1579   UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
000000  b570              PUSH     {r4-r6,lr}
;;;1580   {
000002  4604              MOV      r4,r0
;;;1581   UBaseType_t uxReturn;
;;;1582   
;;;1583   	configASSERT( xQueue );
000004  b954              CBNZ     r4,|L10.28|
000006  bf00              NOP      
000008  2010              MOVS     r0,#0x10
00000a  f3808811          MSR      BASEPRI,r0
00000e  f3bf8f4f          DSB      
000012  f3bf8f6f          ISB      
000016  bf00              NOP      
000018  bf00              NOP      
                  |L10.26|
00001a  e7fe              B        |L10.26|
                  |L10.28|
;;;1584   
;;;1585   	taskENTER_CRITICAL();
00001c  f7fffffe          BL       vPortEnterCritical
;;;1586   	{
;;;1587   		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
000020  6ba5              LDR      r5,[r4,#0x38]
;;;1588   	}
;;;1589   	taskEXIT_CRITICAL();
000022  f7fffffe          BL       vPortExitCritical
;;;1590   
;;;1591   	return uxReturn;
000026  4628              MOV      r0,r5
;;;1592   } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
000028  bd70              POP      {r4-r6,pc}
;;;1593   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.uxQueueMessagesWaitingFromISR||, CODE, READONLY, ALIGN=1

                  uxQueueMessagesWaitingFromISR PROC
;;;1612   
;;;1613   UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
000000  4601              MOV      r1,r0
;;;1614   {
;;;1615   UBaseType_t uxReturn;
;;;1616   
;;;1617   	configASSERT( xQueue );
000002  b951              CBNZ     r1,|L11.26|
000004  bf00              NOP      
000006  2210              MOVS     r2,#0x10
000008  f3828811          MSR      BASEPRI,r2
00000c  f3bf8f4f          DSB      
000010  f3bf8f6f          ISB      
000014  bf00              NOP      
000016  bf00              NOP      
                  |L11.24|
000018  e7fe              B        |L11.24|
                  |L11.26|
;;;1618   
;;;1619   	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
00001a  6b88              LDR      r0,[r1,#0x38]
;;;1620   
;;;1621   	return uxReturn;
;;;1622   } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
00001c  4770              BX       lr
;;;1623   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.uxQueueSpacesAvailable||, CODE, READONLY, ALIGN=1

                  uxQueueSpacesAvailable PROC
;;;1594   
;;;1595   UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
000000  b570              PUSH     {r4-r6,lr}
;;;1596   {
000002  4604              MOV      r4,r0
;;;1597   UBaseType_t uxReturn;
;;;1598   Queue_t *pxQueue;
;;;1599   
;;;1600   	pxQueue = ( Queue_t * ) xQueue;
000004  4625              MOV      r5,r4
;;;1601   	configASSERT( pxQueue );
000006  b955              CBNZ     r5,|L12.30|
000008  bf00              NOP      
00000a  2010              MOVS     r0,#0x10
00000c  f3808811          MSR      BASEPRI,r0
000010  f3bf8f4f          DSB      
000014  f3bf8f6f          ISB      
000018  bf00              NOP      
00001a  bf00              NOP      
                  |L12.28|
00001c  e7fe              B        |L12.28|
                  |L12.30|
;;;1602   
;;;1603   	taskENTER_CRITICAL();
00001e  f7fffffe          BL       vPortEnterCritical
;;;1604   	{
;;;1605   		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
000022  e9d5100e          LDRD     r1,r0,[r5,#0x38]
000026  1a46              SUBS     r6,r0,r1
;;;1606   	}
;;;1607   	taskEXIT_CRITICAL();
000028  f7fffffe          BL       vPortExitCritical
;;;1608   
;;;1609   	return uxReturn;
00002c  4630              MOV      r0,r6
;;;1610   } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
00002e  bd70              POP      {r4-r6,pc}
;;;1611   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vQueueDelete||, CODE, READONLY, ALIGN=1

                  vQueueDelete PROC
;;;1624   
;;;1625   void vQueueDelete( QueueHandle_t xQueue )
000000  b570              PUSH     {r4-r6,lr}
;;;1626   {
000002  4604              MOV      r4,r0
;;;1627   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
000004  4625              MOV      r5,r4
;;;1628   
;;;1629   	configASSERT( pxQueue );
000006  b955              CBNZ     r5,|L13.30|
000008  bf00              NOP      
00000a  2010              MOVS     r0,#0x10
00000c  f3808811          MSR      BASEPRI,r0
000010  f3bf8f4f          DSB      
000014  f3bf8f6f          ISB      
000018  bf00              NOP      
00001a  bf00              NOP      
                  |L13.28|
00001c  e7fe              B        |L13.28|
                  |L13.30|
;;;1630   	traceQUEUE_DELETE( pxQueue );
;;;1631   
;;;1632   	#if ( configQUEUE_REGISTRY_SIZE > 0 )
;;;1633   	{
;;;1634   		vQueueUnregisterQueue( pxQueue );
;;;1635   	}
;;;1636   	#endif
;;;1637   
;;;1638   	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
;;;1639   	{
;;;1640   		/* The queue can only have been allocated dynamically - free it
;;;1641   		again. */
;;;1642   		vPortFree( pxQueue );
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       vPortFree
;;;1643   	}
;;;1644   	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
;;;1645   	{
;;;1646   		/* The queue could have been allocated statically or dynamically, so
;;;1647   		check before attempting to free the memory. */
;;;1648   		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
;;;1649   		{
;;;1650   			vPortFree( pxQueue );
;;;1651   		}
;;;1652   		else
;;;1653   		{
;;;1654   			mtCOVERAGE_TEST_MARKER();
;;;1655   		}
;;;1656   	}
;;;1657   	#else
;;;1658   	{
;;;1659   		/* The queue must have been statically allocated, so is not going to be
;;;1660   		deleted.  Avoid compiler warnings about the unused parameter. */
;;;1661   		( void ) pxQueue;
;;;1662   	}
;;;1663   	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;1664   }
000024  bd70              POP      {r4-r6,pc}
;;;1665   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vQueueSetQueueNumber||, CODE, READONLY, ALIGN=1

                  vQueueSetQueueNumber PROC
;;;1678   
;;;1679   	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
000000  6481              STR      r1,[r0,#0x48]
;;;1680   	{
;;;1681   		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
;;;1682   	}
000002  4770              BX       lr
;;;1683   
                          ENDP


                          AREA ||i.xQueueCreateMutex||, CODE, READONLY, ALIGN=1

                  xQueueCreateMutex PROC
;;;505    
;;;506    	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;507    	{
000004  4604              MOV      r4,r0
;;;508    	Queue_t *pxNewQueue;
;;;509    	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
000006  2601              MOVS     r6,#1
000008  2700              MOVS     r7,#0
;;;510    
;;;511    		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
00000a  4622              MOV      r2,r4
00000c  2100              MOVS     r1,#0
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       xQueueGenericCreate
000014  4605              MOV      r5,r0
;;;512    		prvInitialiseMutex( pxNewQueue );
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       prvInitialiseMutex
;;;513    
;;;514    		return pxNewQueue;
00001c  4628              MOV      r0,r5
;;;515    	}
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;516    
                          ENDP


                          AREA ||i.xQueueGenericCreate||, CODE, READONLY, ALIGN=1

                  xQueueGenericCreate PROC
;;;385    
;;;386    	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;387    	{
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4690              MOV      r8,r2
;;;388    	Queue_t *pxNewQueue;
;;;389    	size_t xQueueSizeInBytes;
;;;390    	uint8_t *pucQueueStorage;
;;;391    
;;;392    		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
00000a  b10d              CBZ      r5,|L16.16|
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L16.18|
                  |L16.16|
000010  2000              MOVS     r0,#0
                  |L16.18|
000012  b950              CBNZ     r0,|L16.42|
000014  bf00              NOP      
000016  2010              MOVS     r0,#0x10
000018  f3808811          MSR      BASEPRI,r0
00001c  f3bf8f4f          DSB      
000020  f3bf8f6f          ISB      
000024  bf00              NOP      
000026  bf00              NOP      
                  |L16.40|
000028  e7fe              B        |L16.40|
                  |L16.42|
;;;393    
;;;394    		if( uxItemSize == ( UBaseType_t ) 0 )
00002a  b90e              CBNZ     r6,|L16.48|
;;;395    		{
;;;396    			/* There is not going to be a queue storage area. */
;;;397    			xQueueSizeInBytes = ( size_t ) 0;
00002c  2700              MOVS     r7,#0
00002e  e001              B        |L16.52|
                  |L16.48|
;;;398    		}
;;;399    		else
;;;400    		{
;;;401    			/* Allocate enough space to hold the maximum number of items that
;;;402    			can be in the queue at any time. */
;;;403    			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000030  fb05f706          MUL      r7,r5,r6
                  |L16.52|
;;;404    		}
;;;405    
;;;406    		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
000034  f1070050          ADD      r0,r7,#0x50
000038  f7fffffe          BL       pvPortMalloc
00003c  4604              MOV      r4,r0
;;;407    
;;;408    		if( pxNewQueue != NULL )
00003e  b144              CBZ      r4,|L16.82|
;;;409    		{
;;;410    			/* Jump past the queue structure to find the location of the queue
;;;411    			storage area. */
;;;412    			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
000040  f1040950          ADD      r9,r4,#0x50
;;;413    
;;;414    			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;415    			{
;;;416    				/* Queues can be created either statically or dynamically, so
;;;417    				note this task was created dynamically in case it is later
;;;418    				deleted. */
;;;419    				pxNewQueue->ucStaticallyAllocated = pdFALSE;
;;;420    			}
;;;421    			#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;422    
;;;423    			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
000044  4643              MOV      r3,r8
000046  464a              MOV      r2,r9
000048  4631              MOV      r1,r6
00004a  4628              MOV      r0,r5
00004c  9400              STR      r4,[sp,#0]
00004e  f7fffffe          BL       prvInitialiseNewQueue
                  |L16.82|
;;;424    		}
;;;425    
;;;426    		return pxNewQueue;
000052  4620              MOV      r0,r4
;;;427    	}
000054  e8bd83f8          POP      {r3-r9,pc}
;;;428    
                          ENDP


                          AREA ||i.xQueueGenericReceive||, CODE, READONLY, ALIGN=2

                  xQueueGenericReceive PROC
;;;1236   
;;;1237   BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;1238   {
000004  b082              SUB      sp,sp,#8
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  461f              MOV      r7,r3
;;;1239   BaseType_t xEntryTimeSet = pdFALSE;
00000c  f04f0a00          MOV      r10,#0
;;;1240   TimeOut_t xTimeOut;
;;;1241   int8_t *pcOriginalReadPosition;
;;;1242   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
000010  462c              MOV      r4,r5
;;;1243   
;;;1244   	configASSERT( pxQueue );
000012  b954              CBNZ     r4,|L17.42|
000014  bf00              NOP      
000016  2010              MOVS     r0,#0x10
000018  f3808811          MSR      BASEPRI,r0
00001c  f3bf8f4f          DSB      
000020  f3bf8f6f          ISB      
000024  bf00              NOP      
000026  bf00              NOP      
                  |L17.40|
000028  e7fe              B        |L17.40|
                  |L17.42|
;;;1245   	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
00002a  b90e              CBNZ     r6,|L17.48|
00002c  6c20              LDR      r0,[r4,#0x40]
00002e  b908              CBNZ     r0,|L17.52|
                  |L17.48|
000030  2001              MOVS     r0,#1
000032  e000              B        |L17.54|
                  |L17.52|
000034  2000              MOVS     r0,#0
                  |L17.54|
000036  b950              CBNZ     r0,|L17.78|
000038  bf00              NOP      
00003a  2010              MOVS     r0,#0x10
00003c  f3808811          MSR      BASEPRI,r0
000040  f3bf8f4f          DSB      
000044  f3bf8f6f          ISB      
000048  bf00              NOP      
00004a  bf00              NOP      
                  |L17.76|
00004c  e7fe              B        |L17.76|
                  |L17.78|
;;;1246   	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;1247   	{
;;;1248   		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;1249   	}
;;;1250   	#endif
;;;1251   
;;;1252   	/* This function relaxes the coding standard somewhat to allow return
;;;1253   	statements within the function itself.  This is done in the interest
;;;1254   	of execution time efficiency. */
;;;1255   
;;;1256   	for( ;; )
00004e  bf00              NOP      
                  |L17.80|
;;;1257   	{
;;;1258   		taskENTER_CRITICAL();
000050  f7fffffe          BL       vPortEnterCritical
;;;1259   		{
;;;1260   			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
000054  f8d49038          LDR      r9,[r4,#0x38]
;;;1261   
;;;1262   			/* Is there data in the queue now?  To be running the calling task
;;;1263   			must be the highest priority task wanting to access the queue. */
;;;1264   			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
000058  f1b90f00          CMP      r9,#0
00005c  d03d              BEQ      |L17.218|
;;;1265   			{
;;;1266   				/* Remember the read position in case the queue is only being
;;;1267   				peeked. */
;;;1268   				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
00005e  f8d4800c          LDR      r8,[r4,#0xc]
;;;1269   
;;;1270   				prvCopyDataFromQueue( pxQueue, pvBuffer );
000062  4631              MOV      r1,r6
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       prvCopyDataFromQueue
;;;1271   
;;;1272   				if( xJustPeeking == pdFALSE )
00006a  b9df              CBNZ     r7,|L17.164|
;;;1273   				{
;;;1274   					traceQUEUE_RECEIVE( pxQueue );
;;;1275   
;;;1276   					/* Actually removing data, not just peeking. */
;;;1277   					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
00006c  f1a90001          SUB      r0,r9,#1
000070  63a0              STR      r0,[r4,#0x38]
;;;1278   
;;;1279   					#if ( configUSE_MUTEXES == 1 )
;;;1280   					{
;;;1281   						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
000072  6820              LDR      r0,[r4,#0]
000074  b910              CBNZ     r0,|L17.124|
;;;1282   						{
;;;1283   							/* Record the information required to implement
;;;1284   							priority inheritance should it become necessary. */
;;;1285   							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
000076  f7fffffe          BL       pvTaskIncrementMutexHeldCount
00007a  6060              STR      r0,[r4,#4]
                  |L17.124|
;;;1286   						}
;;;1287   						else
;;;1288   						{
;;;1289   							mtCOVERAGE_TEST_MARKER();
;;;1290   						}
;;;1291   					}
;;;1292   					#endif /* configUSE_MUTEXES */
;;;1293   
;;;1294   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
00007c  6920              LDR      r0,[r4,#0x10]
00007e  b908              CBNZ     r0,|L17.132|
000080  2001              MOVS     r0,#1
000082  e000              B        |L17.134|
                  |L17.132|
000084  2000              MOVS     r0,#0
                  |L17.134|
000086  bb10              CBNZ     r0,|L17.206|
;;;1295   					{
;;;1296   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
000088  f1040010          ADD      r0,r4,#0x10
00008c  f7fffffe          BL       xTaskRemoveFromEventList
000090  b1e8              CBZ      r0,|L17.206|
;;;1297   						{
;;;1298   							queueYIELD_IF_USING_PREEMPTION();
000092  f04f5080          MOV      r0,#0x10000000
000096  4940              LDR      r1,|L17.408|
000098  6008              STR      r0,[r1,#0]
00009a  f3bf8f4f          DSB      
00009e  f3bf8f6f          ISB      
0000a2  e014              B        |L17.206|
                  |L17.164|
;;;1299   						}
;;;1300   						else
;;;1301   						{
;;;1302   							mtCOVERAGE_TEST_MARKER();
;;;1303   						}
;;;1304   					}
;;;1305   					else
;;;1306   					{
;;;1307   						mtCOVERAGE_TEST_MARKER();
;;;1308   					}
;;;1309   				}
;;;1310   				else
;;;1311   				{
;;;1312   					traceQUEUE_PEEK( pxQueue );
;;;1313   
;;;1314   					/* The data is not being removed, so reset the read
;;;1315   					pointer. */
;;;1316   					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
0000a4  f8c4800c          STR      r8,[r4,#0xc]
;;;1317   
;;;1318   					/* The data is being left in the queue, so see if there are
;;;1319   					any other tasks waiting for the data. */
;;;1320   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
0000a8  6a60              LDR      r0,[r4,#0x24]
0000aa  b908              CBNZ     r0,|L17.176|
0000ac  2001              MOVS     r0,#1
0000ae  e000              B        |L17.178|
                  |L17.176|
0000b0  2000              MOVS     r0,#0
                  |L17.178|
0000b2  b960              CBNZ     r0,|L17.206|
;;;1321   					{
;;;1322   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
0000b4  f1040024          ADD      r0,r4,#0x24
0000b8  f7fffffe          BL       xTaskRemoveFromEventList
0000bc  b138              CBZ      r0,|L17.206|
;;;1323   						{
;;;1324   							/* The task waiting has a higher priority than this task. */
;;;1325   							queueYIELD_IF_USING_PREEMPTION();
0000be  f04f5080          MOV      r0,#0x10000000
0000c2  4935              LDR      r1,|L17.408|
0000c4  6008              STR      r0,[r1,#0]
0000c6  f3bf8f4f          DSB      
0000ca  f3bf8f6f          ISB      
                  |L17.206|
;;;1326   						}
;;;1327   						else
;;;1328   						{
;;;1329   							mtCOVERAGE_TEST_MARKER();
;;;1330   						}
;;;1331   					}
;;;1332   					else
;;;1333   					{
;;;1334   						mtCOVERAGE_TEST_MARKER();
;;;1335   					}
;;;1336   				}
;;;1337   
;;;1338   				taskEXIT_CRITICAL();
0000ce  f7fffffe          BL       vPortExitCritical
;;;1339   				return pdPASS;
0000d2  2001              MOVS     r0,#1
                  |L17.212|
;;;1340   			}
;;;1341   			else
;;;1342   			{
;;;1343   				if( xTicksToWait == ( TickType_t ) 0 )
;;;1344   				{
;;;1345   					/* The queue was empty and no block time is specified (or
;;;1346   					the block time has expired) so leave now. */
;;;1347   					taskEXIT_CRITICAL();
;;;1348   					traceQUEUE_RECEIVE_FAILED( pxQueue );
;;;1349   					return errQUEUE_EMPTY;
;;;1350   				}
;;;1351   				else if( xEntryTimeSet == pdFALSE )
;;;1352   				{
;;;1353   					/* The queue was empty and a block time was specified so
;;;1354   					configure the timeout structure. */
;;;1355   					vTaskSetTimeOutState( &xTimeOut );
;;;1356   					xEntryTimeSet = pdTRUE;
;;;1357   				}
;;;1358   				else
;;;1359   				{
;;;1360   					/* Entry time was already set. */
;;;1361   					mtCOVERAGE_TEST_MARKER();
;;;1362   				}
;;;1363   			}
;;;1364   		}
;;;1365   		taskEXIT_CRITICAL();
;;;1366   
;;;1367   		/* Interrupts and other tasks can send to and receive from the queue
;;;1368   		now the critical section has been exited. */
;;;1369   
;;;1370   		vTaskSuspendAll();
;;;1371   		prvLockQueue( pxQueue );
;;;1372   
;;;1373   		/* Update the timeout state to see if it has expired yet. */
;;;1374   		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
;;;1375   		{
;;;1376   			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
;;;1377   			{
;;;1378   				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
;;;1379   
;;;1380   				#if ( configUSE_MUTEXES == 1 )
;;;1381   				{
;;;1382   					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
;;;1383   					{
;;;1384   						taskENTER_CRITICAL();
;;;1385   						{
;;;1386   							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
;;;1387   						}
;;;1388   						taskEXIT_CRITICAL();
;;;1389   					}
;;;1390   					else
;;;1391   					{
;;;1392   						mtCOVERAGE_TEST_MARKER();
;;;1393   					}
;;;1394   				}
;;;1395   				#endif
;;;1396   
;;;1397   				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
;;;1398   				prvUnlockQueue( pxQueue );
;;;1399   				if( xTaskResumeAll() == pdFALSE )
;;;1400   				{
;;;1401   					portYIELD_WITHIN_API();
;;;1402   				}
;;;1403   				else
;;;1404   				{
;;;1405   					mtCOVERAGE_TEST_MARKER();
;;;1406   				}
;;;1407   			}
;;;1408   			else
;;;1409   			{
;;;1410   				/* Try again. */
;;;1411   				prvUnlockQueue( pxQueue );
;;;1412   				( void ) xTaskResumeAll();
;;;1413   			}
;;;1414   		}
;;;1415   		else
;;;1416   		{
;;;1417   			prvUnlockQueue( pxQueue );
;;;1418   			( void ) xTaskResumeAll();
;;;1419   
;;;1420   			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
;;;1421   			{
;;;1422   				traceQUEUE_RECEIVE_FAILED( pxQueue );
;;;1423   				return errQUEUE_EMPTY;
;;;1424   			}
;;;1425   			else
;;;1426   			{
;;;1427   				mtCOVERAGE_TEST_MARKER();
;;;1428   			}
;;;1429   		}
;;;1430   	}
;;;1431   }
0000d4  b006              ADD      sp,sp,#0x18
0000d6  e8bd87f0          POP      {r4-r10,pc}
                  |L17.218|
0000da  9804              LDR      r0,[sp,#0x10]         ;1343
0000dc  b918              CBNZ     r0,|L17.230|
0000de  f7fffffe          BL       vPortExitCritical
0000e2  2000              MOVS     r0,#0                 ;1349
0000e4  e7f6              B        |L17.212|
                  |L17.230|
0000e6  f1ba0f00          CMP      r10,#0                ;1351
0000ea  d104              BNE      |L17.246|
0000ec  4668              MOV      r0,sp                 ;1355
0000ee  f7fffffe          BL       vTaskSetTimeOutState
0000f2  f04f0a01          MOV      r10,#1                ;1356
                  |L17.246|
0000f6  f7fffffe          BL       vPortExitCritical
0000fa  f7fffffe          BL       vTaskSuspendAll
0000fe  f7fffffe          BL       vPortEnterCritical
000102  f9940044          LDRSB    r0,[r4,#0x44]         ;1371
000106  1c40              ADDS     r0,r0,#1              ;1371
000108  b910              CBNZ     r0,|L17.272|
00010a  2000              MOVS     r0,#0                 ;1371
00010c  f8840044          STRB     r0,[r4,#0x44]         ;1371
                  |L17.272|
000110  f9940045          LDRSB    r0,[r4,#0x45]         ;1371
000114  1c40              ADDS     r0,r0,#1              ;1371
000116  b910              CBNZ     r0,|L17.286|
000118  2000              MOVS     r0,#0                 ;1371
00011a  f8840045          STRB     r0,[r4,#0x45]         ;1371
                  |L17.286|
00011e  f7fffffe          BL       vPortExitCritical
000122  a904              ADD      r1,sp,#0x10           ;1374
000124  4668              MOV      r0,sp                 ;1374
000126  f7fffffe          BL       xTaskCheckForTimeOut
00012a  bb40              CBNZ     r0,|L17.382|
00012c  4620              MOV      r0,r4                 ;1376
00012e  f7fffffe          BL       prvIsQueueEmpty
000132  b1f0              CBZ      r0,|L17.370|
000134  6820              LDR      r0,[r4,#0]            ;1382
000136  b930              CBNZ     r0,|L17.326|
000138  f7fffffe          BL       vPortEnterCritical
00013c  6860              LDR      r0,[r4,#4]            ;1386
00013e  f7fffffe          BL       vTaskPriorityInherit
000142  f7fffffe          BL       vPortExitCritical
                  |L17.326|
000146  f1040024          ADD      r0,r4,#0x24           ;1397
00014a  9904              LDR      r1,[sp,#0x10]         ;1397
00014c  f7fffffe          BL       vTaskPlaceOnEventList
000150  4620              MOV      r0,r4                 ;1398
000152  f7fffffe          BL       prvUnlockQueue
000156  f7fffffe          BL       xTaskResumeAll
00015a  2800              CMP      r0,#0                 ;1399
00015c  f47faf78          BNE      |L17.80|
000160  f04f5080          MOV      r0,#0x10000000        ;1401
000164  490c              LDR      r1,|L17.408|
000166  6008              STR      r0,[r1,#0]            ;1401
000168  f3bf8f4f          DSB                            ;1401
00016c  f3bf8f6f          ISB                            ;1401
                  |L17.368|
000170  e76e              B        |L17.80|
                  |L17.370|
000172  4620              MOV      r0,r4                 ;1411
000174  f7fffffe          BL       prvUnlockQueue
000178  f7fffffe          BL       xTaskResumeAll
00017c  e768              B        |L17.80|
                  |L17.382|
00017e  4620              MOV      r0,r4                 ;1417
000180  f7fffffe          BL       prvUnlockQueue
000184  f7fffffe          BL       xTaskResumeAll
000188  4620              MOV      r0,r4                 ;1420
00018a  f7fffffe          BL       prvIsQueueEmpty
00018e  2800              CMP      r0,#0                 ;1420
000190  d0ee              BEQ      |L17.368|
000192  2000              MOVS     r0,#0                 ;1423
000194  e79e              B        |L17.212|
;;;1432   /*-----------------------------------------------------------*/
                          ENDP

000196  0000              DCW      0x0000
                  |L17.408|
                          DCD      0xe000ed04

                          AREA ||i.xQueueGenericReset||, CODE, READONLY, ALIGN=2

                  xQueueGenericReset PROC
;;;278    
;;;279    BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
000000  b570              PUSH     {r4-r6,lr}
;;;280    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;281    Queue_t * const pxQueue = ( Queue_t * ) xQueue;
000006  462c              MOV      r4,r5
;;;282    
;;;283    	configASSERT( pxQueue );
000008  b954              CBNZ     r4,|L18.32|
00000a  bf00              NOP      
00000c  2010              MOVS     r0,#0x10
00000e  f3808811          MSR      BASEPRI,r0
000012  f3bf8f4f          DSB      
000016  f3bf8f6f          ISB      
00001a  bf00              NOP      
00001c  bf00              NOP      
                  |L18.30|
00001e  e7fe              B        |L18.30|
                  |L18.32|
;;;284    
;;;285    	taskENTER_CRITICAL();
000020  f7fffffe          BL       vPortEnterCritical
;;;286    	{
;;;287    		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
000024  e9d4120f          LDRD     r1,r2,[r4,#0x3c]
000028  6820              LDR      r0,[r4,#0]
00002a  fb010002          MLA      r0,r1,r2,r0
00002e  6060              STR      r0,[r4,#4]
;;;288    		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
000030  2000              MOVS     r0,#0
000032  63a0              STR      r0,[r4,#0x38]
;;;289    		pxQueue->pcWriteTo = pxQueue->pcHead;
000034  6820              LDR      r0,[r4,#0]
000036  60a0              STR      r0,[r4,#8]
;;;290    		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
000038  6be0              LDR      r0,[r4,#0x3c]
00003a  1e40              SUBS     r0,r0,#1
00003c  6c22              LDR      r2,[r4,#0x40]
00003e  6821              LDR      r1,[r4,#0]
000040  fb001002          MLA      r0,r0,r2,r1
000044  60e0              STR      r0,[r4,#0xc]
;;;291    		pxQueue->cRxLock = queueUNLOCKED;
000046  20ff              MOVS     r0,#0xff
000048  f8840044          STRB     r0,[r4,#0x44]
;;;292    		pxQueue->cTxLock = queueUNLOCKED;
00004c  f8840045          STRB     r0,[r4,#0x45]
;;;293    
;;;294    		if( xNewQueue == pdFALSE )
000050  b99e              CBNZ     r6,|L18.122|
;;;295    		{
;;;296    			/* If there are tasks blocked waiting to read from the queue, then
;;;297    			the tasks will remain blocked as after this function exits the queue
;;;298    			will still be empty.  If there are tasks blocked waiting to write to
;;;299    			the queue, then one should be unblocked as after this function exits
;;;300    			it will be possible to write to it. */
;;;301    			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
000052  6920              LDR      r0,[r4,#0x10]
000054  b908              CBNZ     r0,|L18.90|
000056  2001              MOVS     r0,#1
000058  e000              B        |L18.92|
                  |L18.90|
00005a  2000              MOVS     r0,#0
                  |L18.92|
00005c  b9a8              CBNZ     r0,|L18.138|
;;;302    			{
;;;303    				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
00005e  f1040010          ADD      r0,r4,#0x10
000062  f7fffffe          BL       xTaskRemoveFromEventList
000066  b180              CBZ      r0,|L18.138|
;;;304    				{
;;;305    					queueYIELD_IF_USING_PREEMPTION();
000068  f04f5080          MOV      r0,#0x10000000
00006c  4909              LDR      r1,|L18.148|
00006e  6008              STR      r0,[r1,#0]
000070  f3bf8f4f          DSB      
000074  f3bf8f6f          ISB      
000078  e007              B        |L18.138|
                  |L18.122|
;;;306    				}
;;;307    				else
;;;308    				{
;;;309    					mtCOVERAGE_TEST_MARKER();
;;;310    				}
;;;311    			}
;;;312    			else
;;;313    			{
;;;314    				mtCOVERAGE_TEST_MARKER();
;;;315    			}
;;;316    		}
;;;317    		else
;;;318    		{
;;;319    			/* Ensure the event queues start in the correct state. */
;;;320    			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
00007a  f1040010          ADD      r0,r4,#0x10
00007e  f7fffffe          BL       vListInitialise
;;;321    			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
000082  f1040024          ADD      r0,r4,#0x24
000086  f7fffffe          BL       vListInitialise
                  |L18.138|
;;;322    		}
;;;323    	}
;;;324    	taskEXIT_CRITICAL();
00008a  f7fffffe          BL       vPortExitCritical
;;;325    
;;;326    	/* A value is returned for calling semantic consistency with previous
;;;327    	versions. */
;;;328    	return pdPASS;
00008e  2001              MOVS     r0,#1
;;;329    }
000090  bd70              POP      {r4-r6,pc}
;;;330    /*-----------------------------------------------------------*/
                          ENDP

000092  0000              DCW      0x0000
                  |L18.148|
                          DCD      0xe000ed04

                          AREA ||i.xQueueGenericSend||, CODE, READONLY, ALIGN=2

                  xQueueGenericSend PROC
;;;722    
;;;723    BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
000000  e92d43ff          PUSH     {r0-r9,lr}
;;;724    {
000004  b083              SUB      sp,sp,#0xc
000006  4606              MOV      r6,r0
000008  4688              MOV      r8,r1
00000a  461d              MOV      r5,r3
;;;725    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
00000c  f04f0900          MOV      r9,#0
;;;726    TimeOut_t xTimeOut;
;;;727    Queue_t * const pxQueue = ( Queue_t * ) xQueue;
000010  4634              MOV      r4,r6
;;;728    
;;;729    	configASSERT( pxQueue );
000012  b954              CBNZ     r4,|L19.42|
000014  bf00              NOP      
000016  2010              MOVS     r0,#0x10
000018  f3808811          MSR      BASEPRI,r0
00001c  f3bf8f4f          DSB      
000020  f3bf8f6f          ISB      
000024  bf00              NOP      
000026  bf00              NOP      
                  |L19.40|
000028  e7fe              B        |L19.40|
                  |L19.42|
;;;730    	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
00002a  f1b80f00          CMP      r8,#0
00002e  d101              BNE      |L19.52|
000030  6c20              LDR      r0,[r4,#0x40]
000032  b908              CBNZ     r0,|L19.56|
                  |L19.52|
000034  2001              MOVS     r0,#1
000036  e000              B        |L19.58|
                  |L19.56|
000038  2000              MOVS     r0,#0
                  |L19.58|
00003a  b950              CBNZ     r0,|L19.82|
00003c  bf00              NOP      
00003e  2010              MOVS     r0,#0x10
000040  f3808811          MSR      BASEPRI,r0
000044  f3bf8f4f          DSB      
000048  f3bf8f6f          ISB      
00004c  bf00              NOP      
00004e  bf00              NOP      
                  |L19.80|
000050  e7fe              B        |L19.80|
                  |L19.82|
;;;731    	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
000052  2d02              CMP      r5,#2
000054  d102              BNE      |L19.92|
000056  6be0              LDR      r0,[r4,#0x3c]
000058  2801              CMP      r0,#1
00005a  d101              BNE      |L19.96|
                  |L19.92|
00005c  2001              MOVS     r0,#1
00005e  e000              B        |L19.98|
                  |L19.96|
000060  2000              MOVS     r0,#0
                  |L19.98|
000062  b950              CBNZ     r0,|L19.122|
000064  bf00              NOP      
000066  2010              MOVS     r0,#0x10
000068  f3808811          MSR      BASEPRI,r0
00006c  f3bf8f4f          DSB      
000070  f3bf8f6f          ISB      
000074  bf00              NOP      
000076  bf00              NOP      
                  |L19.120|
000078  e7fe              B        |L19.120|
                  |L19.122|
;;;732    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;733    	{
;;;734    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;735    	}
;;;736    	#endif
;;;737    
;;;738    
;;;739    	/* This function relaxes the coding standard somewhat to allow return
;;;740    	statements within the function itself.  This is done in the interest
;;;741    	of execution time efficiency. */
;;;742    	for( ;; )
00007a  bf00              NOP      
                  |L19.124|
;;;743    	{
;;;744    		taskENTER_CRITICAL();
00007c  f7fffffe          BL       vPortEnterCritical
;;;745    		{
;;;746    			/* Is there room on the queue now?  The running task must be the
;;;747    			highest priority task wanting to access the queue.  If the head item
;;;748    			in the queue is to be overwritten then it does not matter if the
;;;749    			queue is full. */
;;;750    			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
000080  6ba0              LDR      r0,[r4,#0x38]
000082  6be1              LDR      r1,[r4,#0x3c]
000084  4288              CMP      r0,r1
000086  d301              BCC      |L19.140|
000088  2d02              CMP      r5,#2
00008a  d128              BNE      |L19.222|
                  |L19.140|
;;;751    			{
;;;752    				traceQUEUE_SEND( pxQueue );
;;;753    				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
00008c  462a              MOV      r2,r5
00008e  4641              MOV      r1,r8
000090  4620              MOV      r0,r4
000092  f7fffffe          BL       prvCopyDataToQueue
000096  4607              MOV      r7,r0
;;;754    
;;;755    				#if ( configUSE_QUEUE_SETS == 1 )
;;;756    				{
;;;757    					if( pxQueue->pxQueueSetContainer != NULL )
;;;758    					{
;;;759    						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
;;;760    						{
;;;761    							/* The queue is a member of a queue set, and posting
;;;762    							to the queue set caused a higher priority task to
;;;763    							unblock. A context switch is required. */
;;;764    							queueYIELD_IF_USING_PREEMPTION();
;;;765    						}
;;;766    						else
;;;767    						{
;;;768    							mtCOVERAGE_TEST_MARKER();
;;;769    						}
;;;770    					}
;;;771    					else
;;;772    					{
;;;773    						/* If there was a task waiting for data to arrive on the
;;;774    						queue then unblock it now. */
;;;775    						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;776    						{
;;;777    							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;778    							{
;;;779    								/* The unblocked task has a priority higher than
;;;780    								our own so yield immediately.  Yes it is ok to
;;;781    								do this from within the critical section - the
;;;782    								kernel takes care of that. */
;;;783    								queueYIELD_IF_USING_PREEMPTION();
;;;784    							}
;;;785    							else
;;;786    							{
;;;787    								mtCOVERAGE_TEST_MARKER();
;;;788    							}
;;;789    						}
;;;790    						else if( xYieldRequired != pdFALSE )
;;;791    						{
;;;792    							/* This path is a special case that will only get
;;;793    							executed if the task was holding multiple mutexes
;;;794    							and the mutexes were given back in an order that is
;;;795    							different to that in which they were taken. */
;;;796    							queueYIELD_IF_USING_PREEMPTION();
;;;797    						}
;;;798    						else
;;;799    						{
;;;800    							mtCOVERAGE_TEST_MARKER();
;;;801    						}
;;;802    					}
;;;803    				}
;;;804    				#else /* configUSE_QUEUE_SETS */
;;;805    				{
;;;806    					/* If there was a task waiting for data to arrive on the
;;;807    					queue then unblock it now. */
;;;808    					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
000098  6a60              LDR      r0,[r4,#0x24]
00009a  b908              CBNZ     r0,|L19.160|
00009c  2001              MOVS     r0,#1
00009e  e000              B        |L19.162|
                  |L19.160|
0000a0  2000              MOVS     r0,#0
                  |L19.162|
0000a2  b968              CBNZ     r0,|L19.192|
;;;809    					{
;;;810    						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
0000a4  f1040024          ADD      r0,r4,#0x24
0000a8  f7fffffe          BL       xTaskRemoveFromEventList
0000ac  b188              CBZ      r0,|L19.210|
;;;811    						{
;;;812    							/* The unblocked task has a priority higher than
;;;813    							our own so yield immediately.  Yes it is ok to do
;;;814    							this from within the critical section - the kernel
;;;815    							takes care of that. */
;;;816    							queueYIELD_IF_USING_PREEMPTION();
0000ae  f04f5080          MOV      r0,#0x10000000
0000b2  4932              LDR      r1,|L19.380|
0000b4  6008              STR      r0,[r1,#0]
0000b6  f3bf8f4f          DSB      
0000ba  f3bf8f6f          ISB      
0000be  e008              B        |L19.210|
                  |L19.192|
;;;817    						}
;;;818    						else
;;;819    						{
;;;820    							mtCOVERAGE_TEST_MARKER();
;;;821    						}
;;;822    					}
;;;823    					else if( xYieldRequired != pdFALSE )
0000c0  b13f              CBZ      r7,|L19.210|
;;;824    					{
;;;825    						/* This path is a special case that will only get
;;;826    						executed if the task was holding multiple mutexes and
;;;827    						the mutexes were given back in an order that is
;;;828    						different to that in which they were taken. */
;;;829    						queueYIELD_IF_USING_PREEMPTION();
0000c2  f04f5080          MOV      r0,#0x10000000
0000c6  492d              LDR      r1,|L19.380|
0000c8  6008              STR      r0,[r1,#0]
0000ca  f3bf8f4f          DSB      
0000ce  f3bf8f6f          ISB      
                  |L19.210|
;;;830    					}
;;;831    					else
;;;832    					{
;;;833    						mtCOVERAGE_TEST_MARKER();
;;;834    					}
;;;835    				}
;;;836    				#endif /* configUSE_QUEUE_SETS */
;;;837    
;;;838    				taskEXIT_CRITICAL();
0000d2  f7fffffe          BL       vPortExitCritical
;;;839    				return pdPASS;
0000d6  2001              MOVS     r0,#1
                  |L19.216|
;;;840    			}
;;;841    			else
;;;842    			{
;;;843    				if( xTicksToWait == ( TickType_t ) 0 )
;;;844    				{
;;;845    					/* The queue was full and no block time is specified (or
;;;846    					the block time has expired) so leave now. */
;;;847    					taskEXIT_CRITICAL();
;;;848    
;;;849    					/* Return to the original privilege level before exiting
;;;850    					the function. */
;;;851    					traceQUEUE_SEND_FAILED( pxQueue );
;;;852    					return errQUEUE_FULL;
;;;853    				}
;;;854    				else if( xEntryTimeSet == pdFALSE )
;;;855    				{
;;;856    					/* The queue was full and a block time was specified so
;;;857    					configure the timeout structure. */
;;;858    					vTaskSetTimeOutState( &xTimeOut );
;;;859    					xEntryTimeSet = pdTRUE;
;;;860    				}
;;;861    				else
;;;862    				{
;;;863    					/* Entry time was already set. */
;;;864    					mtCOVERAGE_TEST_MARKER();
;;;865    				}
;;;866    			}
;;;867    		}
;;;868    		taskEXIT_CRITICAL();
;;;869    
;;;870    		/* Interrupts and other tasks can send to and receive from the queue
;;;871    		now the critical section has been exited. */
;;;872    
;;;873    		vTaskSuspendAll();
;;;874    		prvLockQueue( pxQueue );
;;;875    
;;;876    		/* Update the timeout state to see if it has expired yet. */
;;;877    		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
;;;878    		{
;;;879    			if( prvIsQueueFull( pxQueue ) != pdFALSE )
;;;880    			{
;;;881    				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
;;;882    				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
;;;883    
;;;884    				/* Unlocking the queue means queue events can effect the
;;;885    				event list.  It is possible	that interrupts occurring now
;;;886    				remove this task from the event	list again - but as the
;;;887    				scheduler is suspended the task will go onto the pending
;;;888    				ready last instead of the actual ready list. */
;;;889    				prvUnlockQueue( pxQueue );
;;;890    
;;;891    				/* Resuming the scheduler will move tasks from the pending
;;;892    				ready list into the ready list - so it is feasible that this
;;;893    				task is already in a ready list before it yields - in which
;;;894    				case the yield will not cause a context switch unless there
;;;895    				is also a higher priority task in the pending ready list. */
;;;896    				if( xTaskResumeAll() == pdFALSE )
;;;897    				{
;;;898    					portYIELD_WITHIN_API();
;;;899    				}
;;;900    			}
;;;901    			else
;;;902    			{
;;;903    				/* Try again. */
;;;904    				prvUnlockQueue( pxQueue );
;;;905    				( void ) xTaskResumeAll();
;;;906    			}
;;;907    		}
;;;908    		else
;;;909    		{
;;;910    			/* The timeout has expired. */
;;;911    			prvUnlockQueue( pxQueue );
;;;912    			( void ) xTaskResumeAll();
;;;913    
;;;914    			traceQUEUE_SEND_FAILED( pxQueue );
;;;915    			return errQUEUE_FULL;
;;;916    		}
;;;917    	}
;;;918    }
0000d8  b007              ADD      sp,sp,#0x1c
0000da  e8bd83f0          POP      {r4-r9,pc}
                  |L19.222|
0000de  9805              LDR      r0,[sp,#0x14]         ;843
0000e0  b918              CBNZ     r0,|L19.234|
0000e2  f7fffffe          BL       vPortExitCritical
0000e6  2000              MOVS     r0,#0                 ;852
0000e8  e7f6              B        |L19.216|
                  |L19.234|
0000ea  f1b90f00          CMP      r9,#0                 ;854
0000ee  d104              BNE      |L19.250|
0000f0  a801              ADD      r0,sp,#4              ;858
0000f2  f7fffffe          BL       vTaskSetTimeOutState
0000f6  f04f0901          MOV      r9,#1                 ;859
                  |L19.250|
0000fa  f7fffffe          BL       vPortExitCritical
0000fe  f7fffffe          BL       vTaskSuspendAll
000102  f7fffffe          BL       vPortEnterCritical
000106  f9940044          LDRSB    r0,[r4,#0x44]         ;874
00010a  1c40              ADDS     r0,r0,#1              ;874
00010c  b910              CBNZ     r0,|L19.276|
00010e  2000              MOVS     r0,#0                 ;874
000110  f8840044          STRB     r0,[r4,#0x44]         ;874
                  |L19.276|
000114  f9940045          LDRSB    r0,[r4,#0x45]         ;874
000118  1c40              ADDS     r0,r0,#1              ;874
00011a  b910              CBNZ     r0,|L19.290|
00011c  2000              MOVS     r0,#0                 ;874
00011e  f8840045          STRB     r0,[r4,#0x45]         ;874
                  |L19.290|
000122  f7fffffe          BL       vPortExitCritical
000126  a905              ADD      r1,sp,#0x14           ;877
000128  a801              ADD      r0,sp,#4              ;877
00012a  f7fffffe          BL       xTaskCheckForTimeOut
00012e  b9f0              CBNZ     r0,|L19.366|
000130  4620              MOV      r0,r4                 ;879
000132  f7fffffe          BL       prvIsQueueFull
000136  b1a0              CBZ      r0,|L19.354|
000138  f1040010          ADD      r0,r4,#0x10           ;882
00013c  9905              LDR      r1,[sp,#0x14]         ;882
00013e  f7fffffe          BL       vTaskPlaceOnEventList
000142  4620              MOV      r0,r4                 ;889
000144  f7fffffe          BL       prvUnlockQueue
000148  f7fffffe          BL       xTaskResumeAll
00014c  2800              CMP      r0,#0                 ;896
00014e  d195              BNE      |L19.124|
000150  f04f5080          MOV      r0,#0x10000000        ;898
000154  4909              LDR      r1,|L19.380|
000156  6008              STR      r0,[r1,#0]            ;898
000158  f3bf8f4f          DSB                            ;898
00015c  f3bf8f6f          ISB                            ;898
000160  e78c              B        |L19.124|
                  |L19.354|
000162  4620              MOV      r0,r4                 ;904
000164  f7fffffe          BL       prvUnlockQueue
000168  f7fffffe          BL       xTaskResumeAll
00016c  e786              B        |L19.124|
                  |L19.366|
00016e  4620              MOV      r0,r4                 ;911
000170  f7fffffe          BL       prvUnlockQueue
000174  f7fffffe          BL       xTaskResumeAll
000178  2000              MOVS     r0,#0                 ;915
00017a  e7ad              B        |L19.216|
;;;919    /*-----------------------------------------------------------*/
                          ENDP

                  |L19.380|
                          DCD      0xe000ed04

                          AREA ||i.xQueueGenericSendFromISR||, CODE, READONLY, ALIGN=1

                  xQueueGenericSendFromISR PROC
;;;920    
;;;921    BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;922    {
000004  4607              MOV      r7,r0
000006  468a              MOV      r10,r1
000008  4690              MOV      r8,r2
00000a  461e              MOV      r6,r3
;;;923    BaseType_t xReturn;
;;;924    UBaseType_t uxSavedInterruptStatus;
;;;925    Queue_t * const pxQueue = ( Queue_t * ) xQueue;
00000c  463c              MOV      r4,r7
;;;926    
;;;927    	configASSERT( pxQueue );
00000e  b954              CBNZ     r4,|L20.38|
000010  bf00              NOP      
000012  2010              MOVS     r0,#0x10
000014  f3808811          MSR      BASEPRI,r0
000018  f3bf8f4f          DSB      
00001c  f3bf8f6f          ISB      
000020  bf00              NOP      
000022  bf00              NOP      
                  |L20.36|
000024  e7fe              B        |L20.36|
                  |L20.38|
;;;928    	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
000026  f1ba0f00          CMP      r10,#0
00002a  d101              BNE      |L20.48|
00002c  6c20              LDR      r0,[r4,#0x40]
00002e  b908              CBNZ     r0,|L20.52|
                  |L20.48|
000030  2001              MOVS     r0,#1
000032  e000              B        |L20.54|
                  |L20.52|
000034  2000              MOVS     r0,#0
                  |L20.54|
000036  b950              CBNZ     r0,|L20.78|
000038  bf00              NOP      
00003a  2010              MOVS     r0,#0x10
00003c  f3808811          MSR      BASEPRI,r0
000040  f3bf8f4f          DSB      
000044  f3bf8f6f          ISB      
000048  bf00              NOP      
00004a  bf00              NOP      
                  |L20.76|
00004c  e7fe              B        |L20.76|
                  |L20.78|
;;;929    	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
00004e  2e02              CMP      r6,#2
000050  d102              BNE      |L20.88|
000052  6be0              LDR      r0,[r4,#0x3c]
000054  2801              CMP      r0,#1
000056  d101              BNE      |L20.92|
                  |L20.88|
000058  2001              MOVS     r0,#1
00005a  e000              B        |L20.94|
                  |L20.92|
00005c  2000              MOVS     r0,#0
                  |L20.94|
00005e  b950              CBNZ     r0,|L20.118|
000060  bf00              NOP      
000062  2010              MOVS     r0,#0x10
000064  f3808811          MSR      BASEPRI,r0
000068  f3bf8f4f          DSB      
00006c  f3bf8f6f          ISB      
000070  bf00              NOP      
000072  bf00              NOP      
                  |L20.116|
000074  e7fe              B        |L20.116|
                  |L20.118|
;;;930    
;;;931    	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;932    	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;933    	above the maximum system call priority are kept permanently enabled, even
;;;934    	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;935    	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;936    	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;937    	failure if a FreeRTOS API function is called from an interrupt that has been
;;;938    	assigned a priority above the configured maximum system call priority.
;;;939    	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;940    	that have been assigned a priority at or (logically) below the maximum
;;;941    	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;942    	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;943    	More information (albeit Cortex-M specific) is provided on the following
;;;944    	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;945    	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
000076  f7fffffe          BL       vPortValidateInterruptPriority
;;;946    
;;;947    	/* Similar to xQueueGenericSend, except without blocking if there is no room
;;;948    	in the queue.  Also don't directly wake a task that was blocked on a queue
;;;949    	read, instead return a flag to say whether a context switch is required or
;;;950    	not (i.e. has a task with a higher priority than us been woken by this
;;;951    	post). */
;;;952    	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
00007a  bf00              NOP      
00007c  2110              MOVS     r1,#0x10
00007e  f3ef8011          MRS      r0,BASEPRI
000082  f3818811          MSR      BASEPRI,r1
000086  f3bf8f4f          DSB      
00008a  f3bf8f6f          ISB      
00008e  bf00              NOP      
000090  4605              MOV      r5,r0
;;;953    	{
;;;954    		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
000092  6ba0              LDR      r0,[r4,#0x38]
000094  6be1              LDR      r1,[r4,#0x3c]
000096  4288              CMP      r0,r1
000098  d301              BCC      |L20.158|
00009a  2e02              CMP      r6,#2
00009c  d123              BNE      |L20.230|
                  |L20.158|
;;;955    		{
;;;956    			const int8_t cTxLock = pxQueue->cTxLock;
00009e  f994b045          LDRSB    r11,[r4,#0x45]
;;;957    
;;;958    			traceQUEUE_SEND_FROM_ISR( pxQueue );
;;;959    
;;;960    			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
;;;961    			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
;;;962    			in a task disinheriting a priority and prvCopyDataToQueue() can be
;;;963    			called here even though the disinherit function does not check if
;;;964    			the scheduler is suspended before accessing the ready lists. */
;;;965    			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
0000a2  4632              MOV      r2,r6
0000a4  4651              MOV      r1,r10
0000a6  4620              MOV      r0,r4
0000a8  f7fffffe          BL       prvCopyDataToQueue
;;;966    
;;;967    			/* The event list is not altered if the queue is locked.  This will
;;;968    			be done when the queue is unlocked later. */
;;;969    			if( cTxLock == queueUNLOCKED )
0000ac  f10b0001          ADD      r0,r11,#1
0000b0  b988              CBNZ     r0,|L20.214|
;;;970    			{
;;;971    				#if ( configUSE_QUEUE_SETS == 1 )
;;;972    				{
;;;973    					if( pxQueue->pxQueueSetContainer != NULL )
;;;974    					{
;;;975    						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
;;;976    						{
;;;977    							/* The queue is a member of a queue set, and posting
;;;978    							to the queue set caused a higher priority task to
;;;979    							unblock.  A context switch is required. */
;;;980    							if( pxHigherPriorityTaskWoken != NULL )
;;;981    							{
;;;982    								*pxHigherPriorityTaskWoken = pdTRUE;
;;;983    							}
;;;984    							else
;;;985    							{
;;;986    								mtCOVERAGE_TEST_MARKER();
;;;987    							}
;;;988    						}
;;;989    						else
;;;990    						{
;;;991    							mtCOVERAGE_TEST_MARKER();
;;;992    						}
;;;993    					}
;;;994    					else
;;;995    					{
;;;996    						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;997    						{
;;;998    							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;999    							{
;;;1000   								/* The task waiting has a higher priority so
;;;1001   								record that a context switch is required. */
;;;1002   								if( pxHigherPriorityTaskWoken != NULL )
;;;1003   								{
;;;1004   									*pxHigherPriorityTaskWoken = pdTRUE;
;;;1005   								}
;;;1006   								else
;;;1007   								{
;;;1008   									mtCOVERAGE_TEST_MARKER();
;;;1009   								}
;;;1010   							}
;;;1011   							else
;;;1012   							{
;;;1013   								mtCOVERAGE_TEST_MARKER();
;;;1014   							}
;;;1015   						}
;;;1016   						else
;;;1017   						{
;;;1018   							mtCOVERAGE_TEST_MARKER();
;;;1019   						}
;;;1020   					}
;;;1021   				}
;;;1022   				#else /* configUSE_QUEUE_SETS */
;;;1023   				{
;;;1024   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
0000b2  6a60              LDR      r0,[r4,#0x24]
0000b4  b908              CBNZ     r0,|L20.186|
0000b6  2001              MOVS     r0,#1
0000b8  e000              B        |L20.188|
                  |L20.186|
0000ba  2000              MOVS     r0,#0
                  |L20.188|
0000bc  b980              CBNZ     r0,|L20.224|
;;;1025   					{
;;;1026   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
0000be  f1040024          ADD      r0,r4,#0x24
0000c2  f7fffffe          BL       xTaskRemoveFromEventList
0000c6  b158              CBZ      r0,|L20.224|
;;;1027   						{
;;;1028   							/* The task waiting has a higher priority so record that a
;;;1029   							context	switch is required. */
;;;1030   							if( pxHigherPriorityTaskWoken != NULL )
0000c8  f1b80f00          CMP      r8,#0
0000cc  d008              BEQ      |L20.224|
;;;1031   							{
;;;1032   								*pxHigherPriorityTaskWoken = pdTRUE;
0000ce  2001              MOVS     r0,#1
0000d0  f8c80000          STR      r0,[r8,#0]
0000d4  e004              B        |L20.224|
                  |L20.214|
;;;1033   							}
;;;1034   							else
;;;1035   							{
;;;1036   								mtCOVERAGE_TEST_MARKER();
;;;1037   							}
;;;1038   						}
;;;1039   						else
;;;1040   						{
;;;1041   							mtCOVERAGE_TEST_MARKER();
;;;1042   						}
;;;1043   					}
;;;1044   					else
;;;1045   					{
;;;1046   						mtCOVERAGE_TEST_MARKER();
;;;1047   					}
;;;1048   				}
;;;1049   				#endif /* configUSE_QUEUE_SETS */
;;;1050   			}
;;;1051   			else
;;;1052   			{
;;;1053   				/* Increment the lock count so the task that unlocks the queue
;;;1054   				knows that data was posted while it was locked. */
;;;1055   				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
0000d6  f10b0001          ADD      r0,r11,#1
0000da  b240              SXTB     r0,r0
0000dc  f8840045          STRB     r0,[r4,#0x45]
                  |L20.224|
;;;1056   			}
;;;1057   
;;;1058   			xReturn = pdPASS;
0000e0  f04f0901          MOV      r9,#1
;;;1059   		}
0000e4  e001              B        |L20.234|
                  |L20.230|
;;;1060   		else
;;;1061   		{
;;;1062   			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
;;;1063   			xReturn = errQUEUE_FULL;
0000e6  f04f0900          MOV      r9,#0
                  |L20.234|
;;;1064   		}
;;;1065   	}
;;;1066   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
0000ea  bf00              NOP      
0000ec  f3858811          MSR      BASEPRI,r5
0000f0  bf00              NOP      
;;;1067   
;;;1068   	return xReturn;
0000f2  4648              MOV      r0,r9
;;;1069   }
0000f4  e8bd9ff0          POP      {r4-r12,pc}
;;;1070   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueGiveFromISR||, CODE, READONLY, ALIGN=1

                  xQueueGiveFromISR PROC
;;;1071   
;;;1072   BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1073   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;1074   BaseType_t xReturn;
;;;1075   UBaseType_t uxSavedInterruptStatus;
;;;1076   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
000008  4634              MOV      r4,r6
;;;1077   
;;;1078   	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
;;;1079   	item size is 0.  Don't directly wake a task that was blocked on a queue
;;;1080   	read, instead return a flag to say whether a context switch is required or
;;;1081   	not (i.e. has a task with a higher priority than us been woken by this
;;;1082   	post). */
;;;1083   
;;;1084   	configASSERT( pxQueue );
00000a  b954              CBNZ     r4,|L21.34|
00000c  bf00              NOP      
00000e  2010              MOVS     r0,#0x10
000010  f3808811          MSR      BASEPRI,r0
000014  f3bf8f4f          DSB      
000018  f3bf8f6f          ISB      
00001c  bf00              NOP      
00001e  bf00              NOP      
                  |L21.32|
000020  e7fe              B        |L21.32|
                  |L21.34|
;;;1085   
;;;1086   	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
;;;1087   	if the item size is not 0. */
;;;1088   	configASSERT( pxQueue->uxItemSize == 0 );
000022  6c20              LDR      r0,[r4,#0x40]
000024  b908              CBNZ     r0,|L21.42|
000026  2001              MOVS     r0,#1
000028  e000              B        |L21.44|
                  |L21.42|
00002a  2000              MOVS     r0,#0
                  |L21.44|
00002c  b950              CBNZ     r0,|L21.68|
00002e  bf00              NOP      
000030  2010              MOVS     r0,#0x10
000032  f3808811          MSR      BASEPRI,r0
000036  f3bf8f4f          DSB      
00003a  f3bf8f6f          ISB      
00003e  bf00              NOP      
000040  bf00              NOP      
                  |L21.66|
000042  e7fe              B        |L21.66|
                  |L21.68|
;;;1089   
;;;1090   	/* Normally a mutex would not be given from an interrupt, especially if
;;;1091   	there is a mutex holder, as priority inheritance makes no sense for an
;;;1092   	interrupts, only tasks. */
;;;1093   	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
000044  6820              LDR      r0,[r4,#0]
000046  b908              CBNZ     r0,|L21.76|
000048  6860              LDR      r0,[r4,#4]
00004a  b908              CBNZ     r0,|L21.80|
                  |L21.76|
00004c  2001              MOVS     r0,#1
00004e  e000              B        |L21.82|
                  |L21.80|
000050  2000              MOVS     r0,#0
                  |L21.82|
000052  b950              CBNZ     r0,|L21.106|
000054  bf00              NOP      
000056  2010              MOVS     r0,#0x10
000058  f3808811          MSR      BASEPRI,r0
00005c  f3bf8f4f          DSB      
000060  f3bf8f6f          ISB      
000064  bf00              NOP      
000066  bf00              NOP      
                  |L21.104|
000068  e7fe              B        |L21.104|
                  |L21.106|
;;;1094   
;;;1095   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1096   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1097   	above the maximum system call priority are kept permanently enabled, even
;;;1098   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1099   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1100   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1101   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1102   	assigned a priority above the configured maximum system call priority.
;;;1103   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1104   	that have been assigned a priority at or (logically) below the maximum
;;;1105   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1106   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1107   	More information (albeit Cortex-M specific) is provided on the following
;;;1108   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1109   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
00006a  f7fffffe          BL       vPortValidateInterruptPriority
;;;1110   
;;;1111   	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
00006e  bf00              NOP      
000070  2110              MOVS     r1,#0x10
000072  f3ef8011          MRS      r0,BASEPRI
000076  f3818811          MSR      BASEPRI,r1
00007a  f3bf8f4f          DSB      
00007e  f3bf8f6f          ISB      
000082  bf00              NOP      
000084  4605              MOV      r5,r0
;;;1112   	{
;;;1113   		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
000086  f8d49038          LDR      r9,[r4,#0x38]
;;;1114   
;;;1115   		/* When the queue is used to implement a semaphore no data is ever
;;;1116   		moved through the queue but it is still valid to see if the queue 'has
;;;1117   		space'. */
;;;1118   		if( uxMessagesWaiting < pxQueue->uxLength )
00008a  6be0              LDR      r0,[r4,#0x3c]
00008c  4548              CMP      r0,r9
00008e  d91e              BLS      |L21.206|
;;;1119   		{
;;;1120   			const int8_t cTxLock = pxQueue->cTxLock;
000090  f994a045          LDRSB    r10,[r4,#0x45]
;;;1121   
;;;1122   			traceQUEUE_SEND_FROM_ISR( pxQueue );
;;;1123   
;;;1124   			/* A task can only have an inherited priority if it is a mutex
;;;1125   			holder - and if there is a mutex holder then the mutex cannot be
;;;1126   			given from an ISR.  As this is the ISR version of the function it
;;;1127   			can be assumed there is no mutex holder and no need to determine if
;;;1128   			priority disinheritance is needed.  Simply increase the count of
;;;1129   			messages (semaphores) available. */
;;;1130   			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
000094  f1090001          ADD      r0,r9,#1
000098  63a0              STR      r0,[r4,#0x38]
;;;1131   
;;;1132   			/* The event list is not altered if the queue is locked.  This will
;;;1133   			be done when the queue is unlocked later. */
;;;1134   			if( cTxLock == queueUNLOCKED )
00009a  f10a0001          ADD      r0,r10,#1
00009e  b970              CBNZ     r0,|L21.190|
;;;1135   			{
;;;1136   				#if ( configUSE_QUEUE_SETS == 1 )
;;;1137   				{
;;;1138   					if( pxQueue->pxQueueSetContainer != NULL )
;;;1139   					{
;;;1140   						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
;;;1141   						{
;;;1142   							/* The semaphore is a member of a queue set, and
;;;1143   							posting	to the queue set caused a higher priority
;;;1144   							task to	unblock.  A context switch is required. */
;;;1145   							if( pxHigherPriorityTaskWoken != NULL )
;;;1146   							{
;;;1147   								*pxHigherPriorityTaskWoken = pdTRUE;
;;;1148   							}
;;;1149   							else
;;;1150   							{
;;;1151   								mtCOVERAGE_TEST_MARKER();
;;;1152   							}
;;;1153   						}
;;;1154   						else
;;;1155   						{
;;;1156   							mtCOVERAGE_TEST_MARKER();
;;;1157   						}
;;;1158   					}
;;;1159   					else
;;;1160   					{
;;;1161   						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1162   						{
;;;1163   							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1164   							{
;;;1165   								/* The task waiting has a higher priority so
;;;1166   								record that a context switch is required. */
;;;1167   								if( pxHigherPriorityTaskWoken != NULL )
;;;1168   								{
;;;1169   									*pxHigherPriorityTaskWoken = pdTRUE;
;;;1170   								}
;;;1171   								else
;;;1172   								{
;;;1173   									mtCOVERAGE_TEST_MARKER();
;;;1174   								}
;;;1175   							}
;;;1176   							else
;;;1177   							{
;;;1178   								mtCOVERAGE_TEST_MARKER();
;;;1179   							}
;;;1180   						}
;;;1181   						else
;;;1182   						{
;;;1183   							mtCOVERAGE_TEST_MARKER();
;;;1184   						}
;;;1185   					}
;;;1186   				}
;;;1187   				#else /* configUSE_QUEUE_SETS */
;;;1188   				{
;;;1189   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
0000a0  6a60              LDR      r0,[r4,#0x24]
0000a2  b908              CBNZ     r0,|L21.168|
0000a4  2001              MOVS     r0,#1
0000a6  e000              B        |L21.170|
                  |L21.168|
0000a8  2000              MOVS     r0,#0
                  |L21.170|
0000aa  b968              CBNZ     r0,|L21.200|
;;;1190   					{
;;;1191   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
0000ac  f1040024          ADD      r0,r4,#0x24
0000b0  f7fffffe          BL       xTaskRemoveFromEventList
0000b4  b140              CBZ      r0,|L21.200|
;;;1192   						{
;;;1193   							/* The task waiting has a higher priority so record that a
;;;1194   							context	switch is required. */
;;;1195   							if( pxHigherPriorityTaskWoken != NULL )
0000b6  b13f              CBZ      r7,|L21.200|
;;;1196   							{
;;;1197   								*pxHigherPriorityTaskWoken = pdTRUE;
0000b8  2001              MOVS     r0,#1
0000ba  6038              STR      r0,[r7,#0]
0000bc  e004              B        |L21.200|
                  |L21.190|
;;;1198   							}
;;;1199   							else
;;;1200   							{
;;;1201   								mtCOVERAGE_TEST_MARKER();
;;;1202   							}
;;;1203   						}
;;;1204   						else
;;;1205   						{
;;;1206   							mtCOVERAGE_TEST_MARKER();
;;;1207   						}
;;;1208   					}
;;;1209   					else
;;;1210   					{
;;;1211   						mtCOVERAGE_TEST_MARKER();
;;;1212   					}
;;;1213   				}
;;;1214   				#endif /* configUSE_QUEUE_SETS */
;;;1215   			}
;;;1216   			else
;;;1217   			{
;;;1218   				/* Increment the lock count so the task that unlocks the queue
;;;1219   				knows that data was posted while it was locked. */
;;;1220   				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
0000be  f10a0001          ADD      r0,r10,#1
0000c2  b240              SXTB     r0,r0
0000c4  f8840045          STRB     r0,[r4,#0x45]
                  |L21.200|
;;;1221   			}
;;;1222   
;;;1223   			xReturn = pdPASS;
0000c8  f04f0801          MOV      r8,#1
;;;1224   		}
0000cc  e001              B        |L21.210|
                  |L21.206|
;;;1225   		else
;;;1226   		{
;;;1227   			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
;;;1228   			xReturn = errQUEUE_FULL;
0000ce  f04f0800          MOV      r8,#0
                  |L21.210|
;;;1229   		}
;;;1230   	}
;;;1231   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
0000d2  bf00              NOP      
0000d4  f3858811          MSR      BASEPRI,r5
0000d8  bf00              NOP      
;;;1232   
;;;1233   	return xReturn;
0000da  4640              MOV      r0,r8
;;;1234   }
0000dc  e8bd87f0          POP      {r4-r10,pc}
;;;1235   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueIsQueueEmptyFromISR||, CODE, READONLY, ALIGN=1

                  xQueueIsQueueEmptyFromISR PROC
;;;1934   
;;;1935   BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
000000  4601              MOV      r1,r0
;;;1936   {
;;;1937   BaseType_t xReturn;
;;;1938   
;;;1939   	configASSERT( xQueue );
000002  b951              CBNZ     r1,|L22.26|
000004  bf00              NOP      
000006  2210              MOVS     r2,#0x10
000008  f3828811          MSR      BASEPRI,r2
00000c  f3bf8f4f          DSB      
000010  f3bf8f6f          ISB      
000014  bf00              NOP      
000016  bf00              NOP      
                  |L22.24|
000018  e7fe              B        |L22.24|
                  |L22.26|
;;;1940   	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
00001a  6b8a              LDR      r2,[r1,#0x38]
00001c  b90a              CBNZ     r2,|L22.34|
;;;1941   	{
;;;1942   		xReturn = pdTRUE;
00001e  2001              MOVS     r0,#1
000020  e000              B        |L22.36|
                  |L22.34|
;;;1943   	}
;;;1944   	else
;;;1945   	{
;;;1946   		xReturn = pdFALSE;
000022  2000              MOVS     r0,#0
                  |L22.36|
;;;1947   	}
;;;1948   
;;;1949   	return xReturn;
;;;1950   } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
000024  4770              BX       lr
;;;1951   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueIsQueueFullFromISR||, CODE, READONLY, ALIGN=1

                  xQueueIsQueueFullFromISR PROC
;;;1973   
;;;1974   BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
000000  4601              MOV      r1,r0
;;;1975   {
;;;1976   BaseType_t xReturn;
;;;1977   
;;;1978   	configASSERT( xQueue );
000002  b951              CBNZ     r1,|L23.26|
000004  bf00              NOP      
000006  2210              MOVS     r2,#0x10
000008  f3828811          MSR      BASEPRI,r2
00000c  f3bf8f4f          DSB      
000010  f3bf8f6f          ISB      
000014  bf00              NOP      
000016  bf00              NOP      
                  |L23.24|
000018  e7fe              B        |L23.24|
                  |L23.26|
;;;1979   	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
00001a  6b8a              LDR      r2,[r1,#0x38]
00001c  6bcb              LDR      r3,[r1,#0x3c]
00001e  429a              CMP      r2,r3
000020  d101              BNE      |L23.38|
;;;1980   	{
;;;1981   		xReturn = pdTRUE;
000022  2001              MOVS     r0,#1
000024  e000              B        |L23.40|
                  |L23.38|
;;;1982   	}
;;;1983   	else
;;;1984   	{
;;;1985   		xReturn = pdFALSE;
000026  2000              MOVS     r0,#0
                  |L23.40|
;;;1986   	}
;;;1987   
;;;1988   	return xReturn;
;;;1989   } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
000028  4770              BX       lr
;;;1990   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueuePeekFromISR||, CODE, READONLY, ALIGN=1

                  xQueuePeekFromISR PROC
;;;1524   
;;;1525   BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1526   {
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
;;;1527   BaseType_t xReturn;
;;;1528   UBaseType_t uxSavedInterruptStatus;
;;;1529   int8_t *pcOriginalReadPosition;
;;;1530   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
000008  4634              MOV      r4,r6
;;;1531   
;;;1532   	configASSERT( pxQueue );
00000a  b954              CBNZ     r4,|L24.34|
00000c  bf00              NOP      
00000e  2010              MOVS     r0,#0x10
000010  f3808811          MSR      BASEPRI,r0
000014  f3bf8f4f          DSB      
000018  f3bf8f6f          ISB      
00001c  bf00              NOP      
00001e  bf00              NOP      
                  |L24.32|
000020  e7fe              B        |L24.32|
                  |L24.34|
;;;1533   	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
000022  f1b80f00          CMP      r8,#0
000026  d101              BNE      |L24.44|
000028  6c20              LDR      r0,[r4,#0x40]
00002a  b908              CBNZ     r0,|L24.48|
                  |L24.44|
00002c  2001              MOVS     r0,#1
00002e  e000              B        |L24.50|
                  |L24.48|
000030  2000              MOVS     r0,#0
                  |L24.50|
000032  b950              CBNZ     r0,|L24.74|
000034  bf00              NOP      
000036  2010              MOVS     r0,#0x10
000038  f3808811          MSR      BASEPRI,r0
00003c  f3bf8f4f          DSB      
000040  f3bf8f6f          ISB      
000044  bf00              NOP      
000046  bf00              NOP      
                  |L24.72|
000048  e7fe              B        |L24.72|
                  |L24.74|
;;;1534   	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
00004a  6c20              LDR      r0,[r4,#0x40]
00004c  b108              CBZ      r0,|L24.82|
00004e  2001              MOVS     r0,#1
000050  e000              B        |L24.84|
                  |L24.82|
000052  2000              MOVS     r0,#0
                  |L24.84|
000054  b950              CBNZ     r0,|L24.108|
000056  bf00              NOP      
000058  2010              MOVS     r0,#0x10
00005a  f3808811          MSR      BASEPRI,r0
00005e  f3bf8f4f          DSB      
000062  f3bf8f6f          ISB      
000066  bf00              NOP      
000068  bf00              NOP      
                  |L24.106|
00006a  e7fe              B        |L24.106|
                  |L24.108|
;;;1535   
;;;1536   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1537   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1538   	above the maximum system call priority are kept permanently enabled, even
;;;1539   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1540   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1541   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1542   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1543   	assigned a priority above the configured maximum system call priority.
;;;1544   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1545   	that have been assigned a priority at or (logically) below the maximum
;;;1546   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1547   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1548   	More information (albeit Cortex-M specific) is provided on the following
;;;1549   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1550   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
00006c  f7fffffe          BL       vPortValidateInterruptPriority
;;;1551   
;;;1552   	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000070  bf00              NOP      
000072  2110              MOVS     r1,#0x10
000074  f3ef8011          MRS      r0,BASEPRI
000078  f3818811          MSR      BASEPRI,r1
00007c  f3bf8f4f          DSB      
000080  f3bf8f6f          ISB      
000084  bf00              NOP      
000086  4605              MOV      r5,r0
;;;1553   	{
;;;1554   		/* Cannot block in an ISR, so check there is data available. */
;;;1555   		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
000088  6ba0              LDR      r0,[r4,#0x38]
00008a  b148              CBZ      r0,|L24.160|
;;;1556   		{
;;;1557   			traceQUEUE_PEEK_FROM_ISR( pxQueue );
;;;1558   
;;;1559   			/* Remember the read position so it can be reset as nothing is
;;;1560   			actually being removed from the queue. */
;;;1561   			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
00008c  f8d4900c          LDR      r9,[r4,#0xc]
;;;1562   			prvCopyDataFromQueue( pxQueue, pvBuffer );
000090  4641              MOV      r1,r8
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       prvCopyDataFromQueue
;;;1563   			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
000098  f8c4900c          STR      r9,[r4,#0xc]
;;;1564   
;;;1565   			xReturn = pdPASS;
00009c  2701              MOVS     r7,#1
00009e  e000              B        |L24.162|
                  |L24.160|
;;;1566   		}
;;;1567   		else
;;;1568   		{
;;;1569   			xReturn = pdFAIL;
0000a0  2700              MOVS     r7,#0
                  |L24.162|
;;;1570   			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
;;;1571   		}
;;;1572   	}
;;;1573   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
0000a2  bf00              NOP      
0000a4  f3858811          MSR      BASEPRI,r5
0000a8  bf00              NOP      
;;;1574   
;;;1575   	return xReturn;
0000aa  4638              MOV      r0,r7
;;;1576   }
0000ac  e8bd87f0          POP      {r4-r10,pc}
;;;1577   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueReceiveFromISR||, CODE, READONLY, ALIGN=1

                  xQueueReceiveFromISR PROC
;;;1433   
;;;1434   BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1435   {
000004  4606              MOV      r6,r0
000006  4689              MOV      r9,r1
000008  4617              MOV      r7,r2
;;;1436   BaseType_t xReturn;
;;;1437   UBaseType_t uxSavedInterruptStatus;
;;;1438   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
00000a  4634              MOV      r4,r6
;;;1439   
;;;1440   	configASSERT( pxQueue );
00000c  b954              CBNZ     r4,|L25.36|
00000e  bf00              NOP      
000010  2010              MOVS     r0,#0x10
000012  f3808811          MSR      BASEPRI,r0
000016  f3bf8f4f          DSB      
00001a  f3bf8f6f          ISB      
00001e  bf00              NOP      
000020  bf00              NOP      
                  |L25.34|
000022  e7fe              B        |L25.34|
                  |L25.36|
;;;1441   	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
000024  f1b90f00          CMP      r9,#0
000028  d101              BNE      |L25.46|
00002a  6c20              LDR      r0,[r4,#0x40]
00002c  b908              CBNZ     r0,|L25.50|
                  |L25.46|
00002e  2001              MOVS     r0,#1
000030  e000              B        |L25.52|
                  |L25.50|
000032  2000              MOVS     r0,#0
                  |L25.52|
000034  b950              CBNZ     r0,|L25.76|
000036  bf00              NOP      
000038  2010              MOVS     r0,#0x10
00003a  f3808811          MSR      BASEPRI,r0
00003e  f3bf8f4f          DSB      
000042  f3bf8f6f          ISB      
000046  bf00              NOP      
000048  bf00              NOP      
                  |L25.74|
00004a  e7fe              B        |L25.74|
                  |L25.76|
;;;1442   
;;;1443   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1444   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1445   	above the maximum system call priority are kept permanently enabled, even
;;;1446   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1447   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1448   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1449   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1450   	assigned a priority above the configured maximum system call priority.
;;;1451   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1452   	that have been assigned a priority at or (logically) below the maximum
;;;1453   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1454   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1455   	More information (albeit Cortex-M specific) is provided on the following
;;;1456   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1457   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
00004c  f7fffffe          BL       vPortValidateInterruptPriority
;;;1458   
;;;1459   	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000050  bf00              NOP      
000052  2110              MOVS     r1,#0x10
000054  f3ef8011          MRS      r0,BASEPRI
000058  f3818811          MSR      BASEPRI,r1
00005c  f3bf8f4f          DSB      
000060  f3bf8f6f          ISB      
000064  bf00              NOP      
000066  4605              MOV      r5,r0
;;;1460   	{
;;;1461   		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
000068  f8d4a038          LDR      r10,[r4,#0x38]
;;;1462   
;;;1463   		/* Cannot block in an ISR, so check there is data available. */
;;;1464   		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
00006c  f1ba0f00          CMP      r10,#0
000070  d022              BEQ      |L25.184|
;;;1465   		{
;;;1466   			const int8_t cRxLock = pxQueue->cRxLock;
000072  f994b044          LDRSB    r11,[r4,#0x44]
;;;1467   
;;;1468   			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
;;;1469   
;;;1470   			prvCopyDataFromQueue( pxQueue, pvBuffer );
000076  4649              MOV      r1,r9
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       prvCopyDataFromQueue
;;;1471   			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
00007e  f1aa0001          SUB      r0,r10,#1
000082  63a0              STR      r0,[r4,#0x38]
;;;1472   
;;;1473   			/* If the queue is locked the event list will not be modified.
;;;1474   			Instead update the lock count so the task that unlocks the queue
;;;1475   			will know that an ISR has removed data while the queue was
;;;1476   			locked. */
;;;1477   			if( cRxLock == queueUNLOCKED )
000084  f10b0001          ADD      r0,r11,#1
000088  b970              CBNZ     r0,|L25.168|
;;;1478   			{
;;;1479   				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
00008a  6920              LDR      r0,[r4,#0x10]
00008c  b908              CBNZ     r0,|L25.146|
00008e  2001              MOVS     r0,#1
000090  e000              B        |L25.148|
                  |L25.146|
000092  2000              MOVS     r0,#0
                  |L25.148|
000094  b968              CBNZ     r0,|L25.178|
;;;1480   				{
;;;1481   					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
000096  f1040010          ADD      r0,r4,#0x10
00009a  f7fffffe          BL       xTaskRemoveFromEventList
00009e  b140              CBZ      r0,|L25.178|
;;;1482   					{
;;;1483   						/* The task waiting has a higher priority than us so
;;;1484   						force a context switch. */
;;;1485   						if( pxHigherPriorityTaskWoken != NULL )
0000a0  b13f              CBZ      r7,|L25.178|
;;;1486   						{
;;;1487   							*pxHigherPriorityTaskWoken = pdTRUE;
0000a2  2001              MOVS     r0,#1
0000a4  6038              STR      r0,[r7,#0]
0000a6  e004              B        |L25.178|
                  |L25.168|
;;;1488   						}
;;;1489   						else
;;;1490   						{
;;;1491   							mtCOVERAGE_TEST_MARKER();
;;;1492   						}
;;;1493   					}
;;;1494   					else
;;;1495   					{
;;;1496   						mtCOVERAGE_TEST_MARKER();
;;;1497   					}
;;;1498   				}
;;;1499   				else
;;;1500   				{
;;;1501   					mtCOVERAGE_TEST_MARKER();
;;;1502   				}
;;;1503   			}
;;;1504   			else
;;;1505   			{
;;;1506   				/* Increment the lock count so the task that unlocks the queue
;;;1507   				knows that data was removed while it was locked. */
;;;1508   				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
0000a8  f10b0001          ADD      r0,r11,#1
0000ac  b240              SXTB     r0,r0
0000ae  f8840044          STRB     r0,[r4,#0x44]
                  |L25.178|
;;;1509   			}
;;;1510   
;;;1511   			xReturn = pdPASS;
0000b2  f04f0801          MOV      r8,#1
;;;1512   		}
0000b6  e001              B        |L25.188|
                  |L25.184|
;;;1513   		else
;;;1514   		{
;;;1515   			xReturn = pdFAIL;
0000b8  f04f0800          MOV      r8,#0
                  |L25.188|
;;;1516   			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
;;;1517   		}
;;;1518   	}
;;;1519   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
0000bc  bf00              NOP      
0000be  f3858811          MSR      BASEPRI,r5
0000c2  bf00              NOP      
;;;1520   
;;;1521   	return xReturn;
0000c4  4640              MOV      r0,r8
;;;1522   }
0000c6  e8bd9ff0          POP      {r4-r12,pc}
;;;1523   /*-----------------------------------------------------------*/
                          ENDP

