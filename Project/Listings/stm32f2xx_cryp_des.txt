; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f2xx_cryp_des.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f2xx_cryp_des.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FatFS\src -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\User -I..\User\bsp -I..\User\emWinTask -I..\STemWin\Config -I..\STemWin\DisplayDriver -I..\STemWin\inc -I..\STemWin\OS -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\stm32f2xx_cryp_des.crf ..\Libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_cryp_des.c]
                          THUMB

                          AREA ||i.CRYP_DES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_DES_CBC PROC
;;;194      */
;;;195    ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;196                             uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;197    {
000004  b093              SUB      sp,sp,#0x4c
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  469b              MOV      r11,r3
;;;198      CRYP_InitTypeDef DES_CRYP_InitStructure;
;;;199      CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
;;;200      CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
;;;201      __IO uint32_t counter = 0;
00000e  2000              MOVS     r0,#0
000010  9004              STR      r0,[sp,#0x10]
;;;202      uint32_t busystatus = 0;
000012  9003              STR      r0,[sp,#0xc]
;;;203      ErrorStatus status = SUCCESS;
000014  2001              MOVS     r0,#1
000016  9002              STR      r0,[sp,#8]
;;;204      uint32_t keyaddr    = (uint32_t)Key;
000018  464e              MOV      r6,r9
;;;205      uint32_t inputaddr  = (uint32_t)Input;
00001a  465c              MOV      r4,r11
;;;206      uint32_t outputaddr = (uint32_t)Output;
00001c  9d1d              LDR      r5,[sp,#0x74]
;;;207      uint32_t ivaddr     = (uint32_t)InitVectors;
00001e  4657              MOV      r7,r10
;;;208      uint32_t i = 0;
000020  2000              MOVS     r0,#0
000022  9001              STR      r0,[sp,#4]
;;;209    
;;;210      /* Crypto structures initialisation*/
;;;211      CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
000024  a809              ADD      r0,sp,#0x24
000026  f7fffffe          BL       CRYP_KeyStructInit
;;;212    
;;;213      /* Crypto Init for Encryption process */
;;;214      if(Mode == MODE_ENCRYPT) /* DES encryption */
00002a  f1b80f01          CMP      r8,#1
00002e  d103              BNE      |L1.56|
;;;215      {
;;;216         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
000030  2000              MOVS     r0,#0
000032  f8ad0044          STRH     r0,[sp,#0x44]
000036  e002              B        |L1.62|
                  |L1.56|
;;;217      }
;;;218      else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
;;;219      {
;;;220         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
000038  2004              MOVS     r0,#4
00003a  f8ad0044          STRH     r0,[sp,#0x44]
                  |L1.62|
;;;221      }
;;;222    
;;;223      DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
00003e  2018              MOVS     r0,#0x18
000040  f8ad0046          STRH     r0,[sp,#0x46]
;;;224      DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000044  2080              MOVS     r0,#0x80
000046  f8ad0048          STRH     r0,[sp,#0x48]
;;;225      CRYP_Init(&DES_CRYP_InitStructure);
00004a  a811              ADD      r0,sp,#0x44
00004c  f7fffffe          BL       CRYP_Init
;;;226    
;;;227      /* Key Initialisation */
;;;228      DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000050  6830              LDR      r0,[r6,#0]
000052  ba00              REV      r0,r0
000054  900b              STR      r0,[sp,#0x2c]
;;;229      keyaddr+=4;
000056  1d36              ADDS     r6,r6,#4
;;;230      DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000058  6830              LDR      r0,[r6,#0]
00005a  ba00              REV      r0,r0
00005c  900c              STR      r0,[sp,#0x30]
;;;231      CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
00005e  a809              ADD      r0,sp,#0x24
000060  f7fffffe          BL       CRYP_KeyInit
;;;232    
;;;233      /* Initialization Vectors */
;;;234      DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
000064  6838              LDR      r0,[r7,#0]
000066  ba00              REV      r0,r0
000068  9005              STR      r0,[sp,#0x14]
;;;235      ivaddr+=4;
00006a  1d3f              ADDS     r7,r7,#4
;;;236      DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
00006c  6838              LDR      r0,[r7,#0]
00006e  ba00              REV      r0,r0
000070  9006              STR      r0,[sp,#0x18]
;;;237      CRYP_IVInit(&DES_CRYP_IVInitStructure);
000072  a805              ADD      r0,sp,#0x14
000074  f7fffffe          BL       CRYP_IVInit
;;;238    
;;;239      /* Flush IN/OUT FIFO */
;;;240      CRYP_FIFOFlush();
000078  f7fffffe          BL       CRYP_FIFOFlush
;;;241      
;;;242      /* Enable Crypto processor */
;;;243      CRYP_Cmd(ENABLE);
00007c  2001              MOVS     r0,#1
00007e  f7fffffe          BL       CRYP_Cmd
;;;244    
;;;245      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
000082  2000              MOVS     r0,#0
000084  9001              STR      r0,[sp,#4]
000086  e028              B        |L1.218|
                  |L1.136|
;;;246      {
;;;247        /* Write the Input block in the Input FIFO */
;;;248        CRYP_DataIn(*(uint32_t*)(inputaddr));
000088  6820              LDR      r0,[r4,#0]
00008a  f7fffffe          BL       CRYP_DataIn
;;;249        inputaddr+=4;
00008e  1d24              ADDS     r4,r4,#4
;;;250        CRYP_DataIn(*(uint32_t*)(inputaddr));
000090  6820              LDR      r0,[r4,#0]
000092  f7fffffe          BL       CRYP_DataIn
;;;251        inputaddr+=4;
000096  1d24              ADDS     r4,r4,#4
;;;252    
;;;253        /* Wait until the complete message has been processed */
;;;254        counter = 0;
000098  2000              MOVS     r0,#0
00009a  9004              STR      r0,[sp,#0x10]
;;;255        do
00009c  bf00              NOP      
                  |L1.158|
;;;256        {
;;;257          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
00009e  2010              MOVS     r0,#0x10
0000a0  f7fffffe          BL       CRYP_GetFlagStatus
0000a4  9003              STR      r0,[sp,#0xc]
;;;258          counter++;
0000a6  9804              LDR      r0,[sp,#0x10]
0000a8  1c40              ADDS     r0,r0,#1
0000aa  9004              STR      r0,[sp,#0x10]
;;;259        }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
0000ac  9804              LDR      r0,[sp,#0x10]
0000ae  f5b03f80          CMP      r0,#0x10000
0000b2  d002              BEQ      |L1.186|
0000b4  9803              LDR      r0,[sp,#0xc]
0000b6  2800              CMP      r0,#0
0000b8  d1f1              BNE      |L1.158|
                  |L1.186|
;;;260    
;;;261        if (busystatus != RESET)
0000ba  9803              LDR      r0,[sp,#0xc]
0000bc  b110              CBZ      r0,|L1.196|
;;;262       {
;;;263           status = ERROR;
0000be  2000              MOVS     r0,#0
0000c0  9002              STR      r0,[sp,#8]
0000c2  e007              B        |L1.212|
                  |L1.196|
;;;264        }
;;;265        else
;;;266        {
;;;267          /* Read the Output block from the Output FIFO */
;;;268          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000c4  f7fffffe          BL       CRYP_DataOut
0000c8  6028              STR      r0,[r5,#0]
;;;269          outputaddr+=4;
0000ca  1d2d              ADDS     r5,r5,#4
;;;270          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000cc  f7fffffe          BL       CRYP_DataOut
0000d0  6028              STR      r0,[r5,#0]
;;;271          outputaddr+=4;
0000d2  1d2d              ADDS     r5,r5,#4
                  |L1.212|
0000d4  9801              LDR      r0,[sp,#4]            ;245
0000d6  3008              ADDS     r0,r0,#8              ;245
0000d8  9001              STR      r0,[sp,#4]            ;245
                  |L1.218|
0000da  991c              LDR      r1,[sp,#0x70]         ;245
0000dc  9801              LDR      r0,[sp,#4]            ;245
0000de  4288              CMP      r0,r1                 ;245
0000e0  d202              BCS      |L1.232|
0000e2  9802              LDR      r0,[sp,#8]            ;245
0000e4  2800              CMP      r0,#0                 ;245
0000e6  d1cf              BNE      |L1.136|
                  |L1.232|
;;;272        }
;;;273      }
;;;274    
;;;275      /* Disable Crypto */
;;;276      CRYP_Cmd(DISABLE);
0000e8  2000              MOVS     r0,#0
0000ea  f7fffffe          BL       CRYP_Cmd
;;;277    
;;;278      return status; 
0000ee  9802              LDR      r0,[sp,#8]
;;;279    }
0000f0  b013              ADD      sp,sp,#0x4c
0000f2  e8bd8ff0          POP      {r4-r11,pc}
;;;280    
                          ENDP


                          AREA ||i.CRYP_DES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_DES_ECB PROC
;;;99       */
;;;100    ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;101                             uint32_t Ilength, uint8_t *Output)
;;;102    {
000004  b08d              SUB      sp,sp,#0x34
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
00000c  469a              MOV      r10,r3
;;;103      CRYP_InitTypeDef DES_CRYP_InitStructure;
;;;104      CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
;;;105      __IO uint32_t counter = 0;
00000e  2000              MOVS     r0,#0
000010  9002              STR      r0,[sp,#8]
;;;106      uint32_t busystatus = 0;
000012  4683              MOV      r11,r0
;;;107      ErrorStatus status = SUCCESS;
000014  2001              MOVS     r0,#1
000016  9001              STR      r0,[sp,#4]
;;;108      uint32_t keyaddr    = (uint32_t)Key;
000018  4646              MOV      r6,r8
;;;109      uint32_t inputaddr  = (uint32_t)Input;
00001a  464c              MOV      r4,r9
;;;110      uint32_t outputaddr = (uint32_t)Output;
00001c  9d16              LDR      r5,[sp,#0x58]
;;;111      uint32_t i = 0;
00001e  2000              MOVS     r0,#0
000020  9000              STR      r0,[sp,#0]
;;;112    
;;;113      /* Crypto structures initialisation*/
;;;114      CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
000022  a803              ADD      r0,sp,#0xc
000024  f7fffffe          BL       CRYP_KeyStructInit
;;;115    
;;;116      /* Crypto Init for Encryption process */
;;;117      if( Mode == MODE_ENCRYPT ) /* DES encryption */
000028  2f01              CMP      r7,#1
00002a  d103              BNE      |L2.52|
;;;118      {
;;;119         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
00002c  2000              MOVS     r0,#0
00002e  f8ad002c          STRH     r0,[sp,#0x2c]
000032  e002              B        |L2.58|
                  |L2.52|
;;;120      }
;;;121      else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
;;;122      {      
;;;123         DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
000034  2004              MOVS     r0,#4
000036  f8ad002c          STRH     r0,[sp,#0x2c]
                  |L2.58|
;;;124      }
;;;125    
;;;126      DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
00003a  2010              MOVS     r0,#0x10
00003c  f8ad002e          STRH     r0,[sp,#0x2e]
;;;127      DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000040  2080              MOVS     r0,#0x80
000042  f8ad0030          STRH     r0,[sp,#0x30]
;;;128      CRYP_Init(&DES_CRYP_InitStructure);
000046  a80b              ADD      r0,sp,#0x2c
000048  f7fffffe          BL       CRYP_Init
;;;129    
;;;130      /* Key Initialisation */
;;;131      DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00004c  6830              LDR      r0,[r6,#0]
00004e  ba00              REV      r0,r0
000050  9005              STR      r0,[sp,#0x14]
;;;132      keyaddr+=4;
000052  1d36              ADDS     r6,r6,#4
;;;133      DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000054  6830              LDR      r0,[r6,#0]
000056  ba00              REV      r0,r0
000058  9006              STR      r0,[sp,#0x18]
;;;134      CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
00005a  a803              ADD      r0,sp,#0xc
00005c  f7fffffe          BL       CRYP_KeyInit
;;;135    
;;;136      /* Flush IN/OUT FIFO */
;;;137      CRYP_FIFOFlush();
000060  f7fffffe          BL       CRYP_FIFOFlush
;;;138    
;;;139      /* Enable Crypto processor */
;;;140      CRYP_Cmd(ENABLE);
000064  2001              MOVS     r0,#1
000066  f7fffffe          BL       CRYP_Cmd
;;;141    
;;;142      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
00006a  2000              MOVS     r0,#0
00006c  9000              STR      r0,[sp,#0]
00006e  e029              B        |L2.196|
                  |L2.112|
;;;143      {
;;;144    
;;;145        /* Write the Input block in the Input FIFO */
;;;146        CRYP_DataIn(*(uint32_t*)(inputaddr));
000070  6820              LDR      r0,[r4,#0]
000072  f7fffffe          BL       CRYP_DataIn
;;;147        inputaddr+=4;
000076  1d24              ADDS     r4,r4,#4
;;;148        CRYP_DataIn(*(uint32_t*)(inputaddr));
000078  6820              LDR      r0,[r4,#0]
00007a  f7fffffe          BL       CRYP_DataIn
;;;149        inputaddr+=4;
00007e  1d24              ADDS     r4,r4,#4
;;;150    
;;;151    /* Wait until the complete message has been processed */
;;;152        counter = 0;
000080  2000              MOVS     r0,#0
000082  9002              STR      r0,[sp,#8]
;;;153        do
000084  bf00              NOP      
                  |L2.134|
;;;154        {
;;;155          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
000086  2010              MOVS     r0,#0x10
000088  f7fffffe          BL       CRYP_GetFlagStatus
00008c  4683              MOV      r11,r0
;;;156          counter++;
00008e  9802              LDR      r0,[sp,#8]
000090  1c40              ADDS     r0,r0,#1
000092  9002              STR      r0,[sp,#8]
;;;157        }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
000094  9802              LDR      r0,[sp,#8]
000096  f5b03f80          CMP      r0,#0x10000
00009a  d002              BEQ      |L2.162|
00009c  f1bb0f00          CMP      r11,#0
0000a0  d1f1              BNE      |L2.134|
                  |L2.162|
;;;158    
;;;159        if (busystatus != RESET)
0000a2  f1bb0f00          CMP      r11,#0
0000a6  d002              BEQ      |L2.174|
;;;160       {
;;;161           status = ERROR;
0000a8  2000              MOVS     r0,#0
0000aa  9001              STR      r0,[sp,#4]
0000ac  e007              B        |L2.190|
                  |L2.174|
;;;162        }
;;;163        else
;;;164        {
;;;165    
;;;166          /* Read the Output block from the Output FIFO */
;;;167          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000ae  f7fffffe          BL       CRYP_DataOut
0000b2  6028              STR      r0,[r5,#0]
;;;168          outputaddr+=4;
0000b4  1d2d              ADDS     r5,r5,#4
;;;169          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000b6  f7fffffe          BL       CRYP_DataOut
0000ba  6028              STR      r0,[r5,#0]
;;;170          outputaddr+=4;
0000bc  1d2d              ADDS     r5,r5,#4
                  |L2.190|
0000be  9800              LDR      r0,[sp,#0]            ;142
0000c0  3008              ADDS     r0,r0,#8              ;142
0000c2  9000              STR      r0,[sp,#0]            ;142
                  |L2.196|
0000c4  9800              LDR      r0,[sp,#0]            ;142
0000c6  4550              CMP      r0,r10                ;142
0000c8  d202              BCS      |L2.208|
0000ca  9801              LDR      r0,[sp,#4]            ;142
0000cc  2800              CMP      r0,#0                 ;142
0000ce  d1cf              BNE      |L2.112|
                  |L2.208|
;;;171        }
;;;172      }
;;;173    
;;;174      /* Disable Crypto */
;;;175      CRYP_Cmd(DISABLE);
0000d0  2000              MOVS     r0,#0
0000d2  f7fffffe          BL       CRYP_Cmd
;;;176    
;;;177      return status; 
0000d6  9801              LDR      r0,[sp,#4]
;;;178    }
0000d8  b00d              ADD      sp,sp,#0x34
0000da  e8bd8ff0          POP      {r4-r11,pc}
;;;179    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\STM32F2xx_StdPeriph_Driver\\src\\stm32f2xx_cryp_des.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f2xx_cryp_des_c_9174d91f____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f2xx_cryp_des_c_9174d91f____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f2xx_cryp_des_c_9174d91f____REVSH|
#line 402
|__asm___20_stm32f2xx_cryp_des_c_9174d91f____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f2xx_cryp_des_c_9174d91f____RRX|
#line 587
|__asm___20_stm32f2xx_cryp_des_c_9174d91f____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
