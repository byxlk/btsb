; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\bsp_lcd_st7789v.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\bsp_lcd_st7789v.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FatFS\src -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\User -I..\User\bsp -I..\User\emWinTask -I..\STemWin\Config -I..\STemWin\DisplayDriver -I..\STemWin\inc -I..\STemWin\OS -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\bsp_lcd_st7789v.crf ..\User\bsp\bsp_lcd_st7789v.c]
                          THUMB

                          AREA ||i.Init_7789||, CODE, READONLY, ALIGN=2

                  Init_7789 PROC
;;;171    */
;;;172    static void Init_7789(void)
000000  b510              PUSH     {r4,lr}
;;;173    {
;;;174    	/* 初始化LCD，写LCD寄存器进行配置 */
;;;175    
;;;176    	//************* Start Initial Sequence **********//
;;;177            //-------------------------------- SOFTWARE RESET --------------------------------------------------------//
;;;178            
;;;179            //---------------------------------------------------------------------------------------------------//
;;;180            ST7789V_WriteCmd(0x11);     //Sleep out
000002  2011              MOVS     r0,#0x11
000004  f7fffffe          BL       ST7789V_WriteCmd
;;;181            bsp_DelayMS(120); //Delay 120ms
000008  2078              MOVS     r0,#0x78
00000a  f7fffffe          BL       bsp_DelayMS
;;;182            //--------------------------------Display and color format setting-------------------
;;;183            ST7789V_WriteCmd(0x36); //Memory data access contro (MADCTL)
00000e  2036              MOVS     r0,#0x36
000010  f7fffffe          BL       ST7789V_WriteCmd
;;;184            ST7789V_WriteParam(0x00);
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       ST7789V_WriteParam
;;;185            ST7789V_WriteCmd(0x3a);  //Interface pixel format (COLMOD)
00001a  203a              MOVS     r0,#0x3a
00001c  f7fffffe          BL       ST7789V_WriteCmd
;;;186            ST7789V_WriteParam(0x55);//16bit/pix 565
000020  2055              MOVS     r0,#0x55
000022  f7fffffe          BL       ST7789V_WriteParam
;;;187            //--------------------------------ST7789S Frame rate setting----------------------------------//
;;;188            //Set reg B2 as default value
;;;189            ST7789V_WriteCmd(0xb2);  //PORCTRL (B2h): Porch Setting
000026  20b2              MOVS     r0,#0xb2
000028  f7fffffe          BL       ST7789V_WriteCmd
;;;190            ST7789V_WriteParam(0x0c);//BPA[6:0]: Back porch setting in normal mode. The minimum setting is 0x01
00002c  200c              MOVS     r0,#0xc
00002e  f7fffffe          BL       ST7789V_WriteParam
;;;191            ST7789V_WriteParam(0x0c);//FPA[6:0]: Front porch setting in normal mode. The minimum setting is 0x01
000032  200c              MOVS     r0,#0xc
000034  f7fffffe          BL       ST7789V_WriteParam
;;;192            ST7789V_WriteParam(0x00);//Disable separate porch control
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       ST7789V_WriteParam
;;;193            ST7789V_WriteParam(0x33);
00003e  2033              MOVS     r0,#0x33
000040  f7fffffe          BL       ST7789V_WriteParam
;;;194            ST7789V_WriteParam(0x33);
000044  2033              MOVS     r0,#0x33
000046  f7fffffe          BL       ST7789V_WriteParam
;;;195     
;;;196            ST7789V_WriteCmd(0xb7);  //GCTRL (B7h): Gate Control
00004a  20b7              MOVS     r0,#0xb7
00004c  f7fffffe          BL       ST7789V_WriteCmd
;;;197            ST7789V_WriteParam(0x35);
000050  2035              MOVS     r0,#0x35
000052  f7fffffe          BL       ST7789V_WriteParam
;;;198            //---------------------------------ST7789S Power setting--------------------------------------//
;;;199            ST7789V_WriteCmd(0xbb); //VCOMS (BBh): VCOMS Setting
000056  20bb              MOVS     r0,#0xbb
000058  f7fffffe          BL       ST7789V_WriteCmd
;;;200            ST7789V_WriteParam(0x2b);//offset 1.175V
00005c  202b              MOVS     r0,#0x2b
00005e  f7fffffe          BL       ST7789V_WriteParam
;;;201    
;;;202            ST7789V_WriteCmd(0xc3); //VRHS (C3h): VRH Set
000062  20c3              MOVS     r0,#0xc3
000064  f7fffffe          BL       ST7789V_WriteCmd
;;;203            ST7789V_WriteParam(0x17); // 4.7+/-( vcom+vcom offset+vdv)
000068  2017              MOVS     r0,#0x17
00006a  f7fffffe          BL       ST7789V_WriteParam
;;;204    
;;;205            ST7789V_WriteCmd(0xc4); //VDVS (C4h): VDV Set
00006e  20c4              MOVS     r0,#0xc4
000070  f7fffffe          BL       ST7789V_WriteCmd
;;;206            ST7789V_WriteParam(0x20);// 0V - default value
000074  2020              MOVS     r0,#0x20
000076  f7fffffe          BL       ST7789V_WriteParam
;;;207    
;;;208            //FRCTRL2 (C6h): Frame Rate Control in Normal Mode
;;;209            //Frame rate=10MHz/(320+FPA[6:0]+BPA[6:0])*(250+RTNA[4:0]*16)
;;;210            //Frame rate=10MHz/(320+12         +12)         *(250+5*16) = 88HZ
;;;211            ST7789V_WriteCmd(0xc6);//NLA2 NLA1 NLA0 (0x00: dot/0x07: column) RTNA4  RTNA3 RTNA2 RTNA1 RTNA0    Frame
00007a  20c6              MOVS     r0,#0xc6
00007c  f7fffffe          BL       ST7789V_WriteCmd
;;;212            ST7789V_WriteParam(0x05);
000080  2005              MOVS     r0,#5
000082  f7fffffe          BL       ST7789V_WriteParam
;;;213    
;;;214            ST7789V_WriteCmd(0xd0); //PWCTRL1 (D0h): Power Control 1
000086  20d0              MOVS     r0,#0xd0
000088  f7fffffe          BL       ST7789V_WriteCmd
;;;215            ST7789V_WriteParam(0xa4);
00008c  20a4              MOVS     r0,#0xa4
00008e  f7fffffe          BL       ST7789V_WriteParam
;;;216            ST7789V_WriteParam(0xa2);// dfault value is 81H
000092  20a2              MOVS     r0,#0xa2
000094  f7fffffe          BL       ST7789V_WriteParam
;;;217            //--------------------------------ST7789S gamma setting---------------------------------------//
;;;218            ST7789V_SetGammaCtrl(); //Set Gamma value control
000098  f7fffffe          BL       ST7789V_SetGammaCtrl
;;;219    
;;;220            /* Table1 setting values */
;;;221            ST7789V_WriteCmd(0x13); //NORON (13h): Normal Display Mode On
00009c  2013              MOVS     r0,#0x13
00009e  f7fffffe          BL       ST7789V_WriteCmd
;;;222            ST7789V_WriteCmd(0x20); // INVOFF (20h): Display Inversion Off
0000a2  2020              MOVS     r0,#0x20
0000a4  f7fffffe          BL       ST7789V_WriteCmd
;;;223            ST7789V_DispOn(); //Display on
0000a8  f7fffffe          BL       ST7789V_DispOn
;;;224    
;;;225    #if 1
;;;226    	/* 设置显示窗口 */
;;;227    	ST7789V_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
0000ac  4804              LDR      r0,|L1.192|
0000ae  8803              LDRH     r3,[r0,#0]  ; g_LcdWidth
0000b0  4804              LDR      r0,|L1.196|
0000b2  8802              LDRH     r2,[r0,#0]  ; g_LcdHeight
0000b4  2100              MOVS     r1,#0
0000b6  4608              MOV      r0,r1
0000b8  f7fffffe          BL       ST7789V_SetDispWin
;;;228    #endif
;;;229    }
0000bc  bd10              POP      {r4,pc}
;;;230    
                          ENDP

0000be  0000              DCW      0x0000
                  |L1.192|
                          DCD      g_LcdWidth
                  |L1.196|
                          DCD      g_LcdHeight

                          AREA ||i.ST7789V_ClrScr||, CODE, READONLY, ALIGN=2

                  ST7789V_ClrScr PROC
;;;462    */
;;;463    void ST7789V_ClrScr(uint16_t _usColor)
000000  b570              PUSH     {r4-r6,lr}
;;;464    {
000002  4604              MOV      r4,r0
;;;465    	uint32_t i;
;;;466    	uint32_t n;
;;;467    
;;;468    	ST7789V_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
000004  4823              LDR      r0,|L2.148|
000006  8803              LDRH     r3,[r0,#0]  ; g_LcdWidth
000008  4823              LDR      r0,|L2.152|
00000a  8802              LDRH     r2,[r0,#0]  ; g_LcdHeight
00000c  2100              MOVS     r1,#0
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       ST7789V_SetDispWin
;;;469    
;;;470    	ST7789V_WriteCmd(0x2C); 			/* 准备读写显存 */
000014  202c              MOVS     r0,#0x2c
000016  f7fffffe          BL       ST7789V_WriteCmd
;;;471    
;;;472    #if 1		/* 优化代码执行速度 */
;;;473    	n = (g_LcdHeight * g_LcdWidth) >> 3;  // DIV 8;
00001a  481f              LDR      r0,|L2.152|
00001c  8800              LDRH     r0,[r0,#0]  ; g_LcdHeight
00001e  491d              LDR      r1,|L2.148|
000020  8809              LDRH     r1,[r1,#0]  ; g_LcdWidth
000022  4348              MULS     r0,r1,r0
000024  10c6              ASRS     r6,r0,#3
;;;474    	for (i = 0; i < n; i++)
000026  2500              MOVS     r5,#0
000028  e030              B        |L2.140|
                  |L2.42|
;;;475    	{
;;;476    		ST7789V_WriteParam(_usColor >> 8);
00002a  1220              ASRS     r0,r4,#8
00002c  f7fffffe          BL       ST7789V_WriteParam
;;;477    		ST7789V_WriteParam(_usColor);
000030  b2e0              UXTB     r0,r4
000032  f7fffffe          BL       ST7789V_WriteParam
;;;478    		ST7789V_WriteParam(_usColor >> 8);
000036  1220              ASRS     r0,r4,#8
000038  f7fffffe          BL       ST7789V_WriteParam
;;;479    		ST7789V_WriteParam(_usColor);
00003c  b2e0              UXTB     r0,r4
00003e  f7fffffe          BL       ST7789V_WriteParam
;;;480    		ST7789V_WriteParam(_usColor >> 8);
000042  1220              ASRS     r0,r4,#8
000044  f7fffffe          BL       ST7789V_WriteParam
;;;481    		ST7789V_WriteParam(_usColor);
000048  b2e0              UXTB     r0,r4
00004a  f7fffffe          BL       ST7789V_WriteParam
;;;482    		ST7789V_WriteParam(_usColor >> 8);
00004e  1220              ASRS     r0,r4,#8
000050  f7fffffe          BL       ST7789V_WriteParam
;;;483    		ST7789V_WriteParam(_usColor);
000054  b2e0              UXTB     r0,r4
000056  f7fffffe          BL       ST7789V_WriteParam
;;;484    
;;;485    		ST7789V_WriteParam(_usColor >> 8);
00005a  1220              ASRS     r0,r4,#8
00005c  f7fffffe          BL       ST7789V_WriteParam
;;;486    		ST7789V_WriteParam(_usColor);
000060  b2e0              UXTB     r0,r4
000062  f7fffffe          BL       ST7789V_WriteParam
;;;487    		ST7789V_WriteParam(_usColor >> 8);
000066  1220              ASRS     r0,r4,#8
000068  f7fffffe          BL       ST7789V_WriteParam
;;;488    		ST7789V_WriteParam(_usColor);
00006c  b2e0              UXTB     r0,r4
00006e  f7fffffe          BL       ST7789V_WriteParam
;;;489    		ST7789V_WriteParam(_usColor >> 8);
000072  1220              ASRS     r0,r4,#8
000074  f7fffffe          BL       ST7789V_WriteParam
;;;490    		ST7789V_WriteParam(_usColor);
000078  b2e0              UXTB     r0,r4
00007a  f7fffffe          BL       ST7789V_WriteParam
;;;491    		ST7789V_WriteParam(_usColor >> 8);
00007e  1220              ASRS     r0,r4,#8
000080  f7fffffe          BL       ST7789V_WriteParam
;;;492    		ST7789V_WriteParam(_usColor);
000084  b2e0              UXTB     r0,r4
000086  f7fffffe          BL       ST7789V_WriteParam
00008a  1c6d              ADDS     r5,r5,#1              ;474
                  |L2.140|
00008c  42b5              CMP      r5,r6                 ;474
00008e  d3cc              BCC      |L2.42|
;;;493    	}
;;;494    #else
;;;495    	n = g_LcdHeight * g_LcdWidth;
;;;496    	for (i = 0; i < n; i++)
;;;497    	{
;;;498    		ST7789V_WriteParam(_usColor >> 8);
;;;499    		ST7789V_WriteParam(_usColor);
;;;500    	}
;;;501    #endif
;;;502    
;;;503    }
000090  bd70              POP      {r4-r6,pc}
;;;504    
                          ENDP

000092  0000              DCW      0x0000
                  |L2.148|
                          DCD      g_LcdWidth
                  |L2.152|
                          DCD      g_LcdHeight

                          AREA ||i.ST7789V_DispOff||, CODE, READONLY, ALIGN=1

                  ST7789V_DispOff PROC
;;;449    */
;;;450    void ST7789V_DispOff(void)
000000  b510              PUSH     {r4,lr}
;;;451    {
;;;452        ST7789V_WriteCmd(0x28); //Display on
000002  2028              MOVS     r0,#0x28
000004  f7fffffe          BL       ST7789V_WriteCmd
;;;453    }
000008  bd10              POP      {r4,pc}
;;;454    
                          ENDP


                          AREA ||i.ST7789V_DispOn||, CODE, READONLY, ALIGN=1

                  ST7789V_DispOn PROC
;;;436    */
;;;437    void ST7789V_DispOn(void)
000000  b510              PUSH     {r4,lr}
;;;438    {
;;;439        ST7789V_WriteCmd(0x29); //Display on
000002  2029              MOVS     r0,#0x29
000004  f7fffffe          BL       ST7789V_WriteCmd
;;;440    }
000008  bd10              POP      {r4,pc}
;;;441    
                          ENDP


                          AREA ||i.ST7789V_DrawBMP||, CODE, READONLY, ALIGN=1

                  ST7789V_DrawBMP PROC
;;;866    */
;;;867    void ST7789V_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;868    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  f8dda020          LDR      r10,[sp,#0x20]
;;;869    	uint32_t index = 0;
000010  2600              MOVS     r6,#0
;;;870    	const uint16_t *p;
;;;871    
;;;872    	/* 设置图片的位置和大小， 即设置显示窗口 */
;;;873    	ST7789V_SetDispWin(_usX, _usY, _usHeight, _usWidth);
000012  462b              MOV      r3,r5
000014  4622              MOV      r2,r4
000016  4649              MOV      r1,r9
000018  4640              MOV      r0,r8
00001a  f7fffffe          BL       ST7789V_SetDispWin
;;;874    
;;;875    	p = _ptr;
00001e  4657              MOV      r7,r10
;;;876    	for (index = 0; index < _usHeight * _usWidth; index++)
000020  bf00              NOP      
000022  e006              B        |L5.50|
                  |L5.36|
;;;877    	{
;;;878    		ST7789V_PutPixel(_usX, _usY, *p++);
000024  f8372b02          LDRH     r2,[r7],#2
000028  4649              MOV      r1,r9
00002a  4640              MOV      r0,r8
00002c  f7fffffe          BL       ST7789V_PutPixel
000030  1c76              ADDS     r6,r6,#1              ;876
                  |L5.50|
000032  fb04f005          MUL      r0,r4,r5              ;876
000036  42b0              CMP      r0,r6                 ;876
000038  d8f4              BHI      |L5.36|
;;;879    	}
;;;880    
;;;881    	/* 退出窗口绘图模式 */
;;;882    	ST7789V_QuitWinMode();
00003a  f7fffffe          BL       ST7789V_QuitWinMode
;;;883    }
00003e  e8bd87f0          POP      {r4-r10,pc}
;;;884    
                          ENDP


                          AREA ||i.ST7789V_DrawCircle||, CODE, READONLY, ALIGN=1

                  ST7789V_DrawCircle PROC
;;;820    */
;;;821    void ST7789V_DrawCircle(uint16_t _usX, uint16_t _usY, uint16_t _usRadius, uint16_t _usColor)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;822    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  469a              MOV      r10,r3
;;;823    	int32_t  D;			/* Decision Variable */
;;;824    	uint32_t  CurX;		/* 当前 X 值 */
;;;825    	uint32_t  CurY;		/* 当前 Y 值 */
;;;826    
;;;827    	D = 3 - (_usRadius << 1);
00000c  2003              MOVS     r0,#3
00000e  eba00948          SUB      r9,r0,r8,LSL #1
;;;828    	CurX = 0;
000012  2400              MOVS     r4,#0
;;;829    	CurY = _usRadius;
000014  4645              MOV      r5,r8
;;;830    
;;;831    	while (CurX <= CurY)
000016  e046              B        |L6.166|
                  |L6.24|
;;;832    	{
;;;833    		ST7789V_PutPixel(_usX + CurX, _usY + CurY, _usColor);
000018  197a              ADDS     r2,r7,r5
00001a  b291              UXTH     r1,r2
00001c  1932              ADDS     r2,r6,r4
00001e  b290              UXTH     r0,r2
000020  4652              MOV      r2,r10
000022  f7fffffe          BL       ST7789V_PutPixel
;;;834    		ST7789V_PutPixel(_usX + CurX, _usY - CurY, _usColor);
000026  1b7a              SUBS     r2,r7,r5
000028  b291              UXTH     r1,r2
00002a  1932              ADDS     r2,r6,r4
00002c  b290              UXTH     r0,r2
00002e  4652              MOV      r2,r10
000030  f7fffffe          BL       ST7789V_PutPixel
;;;835    		ST7789V_PutPixel(_usX - CurX, _usY + CurY, _usColor);
000034  197a              ADDS     r2,r7,r5
000036  b291              UXTH     r1,r2
000038  1b32              SUBS     r2,r6,r4
00003a  b290              UXTH     r0,r2
00003c  4652              MOV      r2,r10
00003e  f7fffffe          BL       ST7789V_PutPixel
;;;836    		ST7789V_PutPixel(_usX - CurX, _usY - CurY, _usColor);
000042  1b7a              SUBS     r2,r7,r5
000044  b291              UXTH     r1,r2
000046  1b32              SUBS     r2,r6,r4
000048  b290              UXTH     r0,r2
00004a  4652              MOV      r2,r10
00004c  f7fffffe          BL       ST7789V_PutPixel
;;;837    		ST7789V_PutPixel(_usX + CurY, _usY + CurX, _usColor);
000050  193a              ADDS     r2,r7,r4
000052  b291              UXTH     r1,r2
000054  1972              ADDS     r2,r6,r5
000056  b290              UXTH     r0,r2
000058  4652              MOV      r2,r10
00005a  f7fffffe          BL       ST7789V_PutPixel
;;;838    		ST7789V_PutPixel(_usX + CurY, _usY - CurX, _usColor);
00005e  1b3a              SUBS     r2,r7,r4
000060  b291              UXTH     r1,r2
000062  1972              ADDS     r2,r6,r5
000064  b290              UXTH     r0,r2
000066  4652              MOV      r2,r10
000068  f7fffffe          BL       ST7789V_PutPixel
;;;839    		ST7789V_PutPixel(_usX - CurY, _usY + CurX, _usColor);
00006c  193a              ADDS     r2,r7,r4
00006e  b291              UXTH     r1,r2
000070  1b72              SUBS     r2,r6,r5
000072  b290              UXTH     r0,r2
000074  4652              MOV      r2,r10
000076  f7fffffe          BL       ST7789V_PutPixel
;;;840    		ST7789V_PutPixel(_usX - CurY, _usY - CurX, _usColor);
00007a  1b3a              SUBS     r2,r7,r4
00007c  b291              UXTH     r1,r2
00007e  1b72              SUBS     r2,r6,r5
000080  b290              UXTH     r0,r2
000082  4652              MOV      r2,r10
000084  f7fffffe          BL       ST7789V_PutPixel
;;;841    
;;;842    		if (D < 0)
000088  f1b90f00          CMP      r9,#0
00008c  da04              BGE      |L6.152|
;;;843    		{
;;;844    			D += (CurX << 2) + 6;
00008e  2006              MOVS     r0,#6
000090  eb000084          ADD      r0,r0,r4,LSL #2
000094  4481              ADD      r9,r9,r0
000096  e005              B        |L6.164|
                  |L6.152|
;;;845    		}
;;;846    		else
;;;847    		{
;;;848    			D += ((CurX - CurY) << 2) + 10;
000098  1b60              SUBS     r0,r4,r5
00009a  210a              MOVS     r1,#0xa
00009c  eb010080          ADD      r0,r1,r0,LSL #2
0000a0  4481              ADD      r9,r9,r0
;;;849    			CurY--;
0000a2  1e6d              SUBS     r5,r5,#1
                  |L6.164|
;;;850    		}
;;;851    		CurX++;
0000a4  1c64              ADDS     r4,r4,#1
                  |L6.166|
0000a6  42ac              CMP      r4,r5                 ;831
0000a8  d9b6              BLS      |L6.24|
;;;852    	}
;;;853    }
0000aa  e8bd87f0          POP      {r4-r10,pc}
;;;854    
                          ENDP


                          AREA ||i.ST7789V_DrawHColorLine||, CODE, READONLY, ALIGN=1

                  ST7789V_DrawHColorLine PROC
;;;691    */
;;;692    void ST7789V_DrawHColorLine(uint16_t _usX1 , uint16_t _usY1, uint16_t _usWidth, const uint16_t *_pColor)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;693    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;694    	uint16_t i, colorValue ;
;;;695    	
;;;696    	ST7789V_SetDispWin(_usX1, _usY1, 1, _usWidth);
00000c  4623              MOV      r3,r4
00000e  2201              MOVS     r2,#1
000010  4649              MOV      r1,r9
000012  4640              MOV      r0,r8
000014  f7fffffe          BL       ST7789V_SetDispWin
;;;697    
;;;698    	ST7789V_WriteCmd(0x2C);
000018  202c              MOVS     r0,#0x2c
00001a  f7fffffe          BL       ST7789V_WriteCmd
;;;699    
;;;700    	/* 写显存 */
;;;701    	for (i = 0; i <_usWidth; i++)
00001e  2700              MOVS     r7,#0
000020  e009              B        |L7.54|
                  |L7.34|
;;;702    	{
;;;703    	        colorValue = *_pColor++;
000022  f8356b02          LDRH     r6,[r5],#2
;;;704    		ST7789V_WriteParam(colorValue>> 8);
000026  1230              ASRS     r0,r6,#8
000028  f7fffffe          BL       ST7789V_WriteParam
;;;705    		ST7789V_WriteParam(colorValue);
00002c  b2f0              UXTB     r0,r6
00002e  f7fffffe          BL       ST7789V_WriteParam
000032  1c78              ADDS     r0,r7,#1              ;701
000034  b287              UXTH     r7,r0                 ;701
                  |L7.54|
000036  42a7              CMP      r7,r4                 ;701
000038  dbf3              BLT      |L7.34|
;;;706    	}
;;;707    }
00003a  e8bd87f0          POP      {r4-r10,pc}
;;;708    
                          ENDP


                          AREA ||i.ST7789V_DrawHLine||, CODE, READONLY, ALIGN=1

                  ST7789V_DrawHLine PROC
;;;646    */
;;;647    void ST7789V_DrawHLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usX2 , uint16_t _usColor)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;648    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;649    	uint16_t i;
;;;650    
;;;651    	ST7789V_SetDispWin(_usX1, _usY1, 1, _usX2 - _usX1 + 1);
00000c  1b28              SUBS     r0,r5,r4
00000e  1c40              ADDS     r0,r0,#1
000010  b283              UXTH     r3,r0
000012  2201              MOVS     r2,#1
000014  4641              MOV      r1,r8
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       ST7789V_SetDispWin
;;;652    
;;;653    	ST7789V_WriteCmd(0x2C);
00001c  202c              MOVS     r0,#0x2c
00001e  f7fffffe          BL       ST7789V_WriteCmd
;;;654    
;;;655    	/* 写显存 */
;;;656    	for (i = 0; i <_usX2-_usX1 + 1; i++)
000022  2700              MOVS     r7,#0
000024  e007              B        |L8.54|
                  |L8.38|
;;;657    	{
;;;658    		ST7789V_WriteParam(_usColor >> 8);
000026  1230              ASRS     r0,r6,#8
000028  f7fffffe          BL       ST7789V_WriteParam
;;;659    		ST7789V_WriteParam(_usColor);
00002c  b2f0              UXTB     r0,r6
00002e  f7fffffe          BL       ST7789V_WriteParam
000032  1c78              ADDS     r0,r7,#1              ;656
000034  b287              UXTH     r7,r0                 ;656
                  |L8.54|
000036  1b28              SUBS     r0,r5,r4              ;656
000038  1c40              ADDS     r0,r0,#1              ;656
00003a  42b8              CMP      r0,r7                 ;656
00003c  dcf3              BGT      |L8.38|
;;;660    	}
;;;661    }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;662    
                          ENDP


                          AREA ||i.ST7789V_DrawHTransLine||, CODE, READONLY, ALIGN=1

                  ST7789V_DrawHTransLine PROC
;;;719    */
;;;720    void ST7789V_DrawHTransLine(uint16_t _usX1 , uint16_t _usY1, uint16_t _usWidth, const uint16_t *_pColor)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;721    {
000004  4606              MOV      r6,r0
000006  468a              MOV      r10,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;722    	uint16_t i, j;
;;;723    	uint16_t Index;
;;;724    
;;;725    	ST7789V_SetCursor(_usX1, _usY1);
00000c  4651              MOV      r1,r10
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       ST7789V_SetCursor
;;;726    
;;;727    	/* 写显存 */
;;;728    	ST7789V_WriteCmd(0x2C);
000014  202c              MOVS     r0,#0x2c
000016  f7fffffe          BL       ST7789V_WriteCmd
;;;729    	for (i = 0,j = 0; i < _usWidth; i++, j++)
00001a  f04f0800          MOV      r8,#0
00001e  46c1              MOV      r9,r8
000020  e020              B        |L9.100|
                  |L9.34|
;;;730    	{
;;;731    		Index = *_pColor++;
000022  f8354b02          LDRH     r4,[r5],#2
;;;732    	    if (Index)
000026  b134              CBZ      r4,|L9.54|
;;;733            {
;;;734    			 ST7789V_WriteParam(Index >> 8);
000028  1220              ASRS     r0,r4,#8
00002a  f7fffffe          BL       ST7789V_WriteParam
;;;735                            ST7789V_WriteParam(Index);
00002e  b2e0              UXTB     r0,r4
000030  f7fffffe          BL       ST7789V_WriteParam
000034  e00e              B        |L9.84|
                  |L9.54|
;;;736    		}
;;;737    		else
;;;738    		{
;;;739    			ST7789V_SetCursor(_usX1 + j, _usY1);
000036  eb060109          ADD      r1,r6,r9
00003a  b288              UXTH     r0,r1
00003c  4651              MOV      r1,r10
00003e  f7fffffe          BL       ST7789V_SetCursor
;;;740    			ST7789V_WriteCmd(0x2C);
000042  202c              MOVS     r0,#0x2c
000044  f7fffffe          BL       ST7789V_WriteCmd
;;;741    			ST7789V_WriteParam(Index >> 8);
000048  1220              ASRS     r0,r4,#8
00004a  f7fffffe          BL       ST7789V_WriteParam
;;;742                            ST7789V_WriteParam(Index);
00004e  b2e0              UXTB     r0,r4
000050  f7fffffe          BL       ST7789V_WriteParam
                  |L9.84|
000054  f1080001          ADD      r0,r8,#1              ;729
000058  fa1ff880          UXTH     r8,r0                 ;729
00005c  f1090001          ADD      r0,r9,#1              ;729
000060  fa1ff980          UXTH     r9,r0                 ;729
                  |L9.100|
000064  45b8              CMP      r8,r7                 ;729
000066  dbdc              BLT      |L9.34|
;;;743    		}
;;;744    	}
;;;745    }
000068  e8bd87f0          POP      {r4-r10,pc}
;;;746    
                          ENDP


                          AREA ||i.ST7789V_DrawLine||, CODE, READONLY, ALIGN=1

                  ST7789V_DrawLine PROC
;;;557    */
;;;558    void ST7789V_DrawLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usX2 , uint16_t _usY2 , uint16_t _usColor)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;559    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
;;;560    	int32_t dx , dy ;
;;;561    	int32_t tx , ty ;
;;;562    	int32_t inc1 , inc2 ;
;;;563    	int32_t d , iTag ;
;;;564    	int32_t x , y ;
;;;565    
;;;566    	/* 采用 Bresenham 算法，在2点间画一条直线 */
;;;567    
;;;568    	ST7789V_PutPixel(_usX1 , _usY1 , _usColor);
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  9a10              LDR      r2,[sp,#0x40]
000014  f7fffffe          BL       ST7789V_PutPixel
;;;569    
;;;570    	/* 如果两点重合，结束后面的动作。*/
;;;571    	if ( _usX1 == _usX2 && _usY1 == _usY2 )
000018  42b4              CMP      r4,r6
00001a  d104              BNE      |L10.38|
00001c  42bd              CMP      r5,r7
00001e  d102              BNE      |L10.38|
                  |L10.32|
;;;572    	{
;;;573    		return;
;;;574    	}
;;;575    
;;;576    	iTag = 0 ;
;;;577    	/* dx = abs ( _usX2 - _usX1 ); */
;;;578    	if (_usX2 >= _usX1)
;;;579    	{
;;;580    		dx = _usX2 - _usX1;
;;;581    	}
;;;582    	else
;;;583    	{
;;;584    		dx = _usX1 - _usX2;
;;;585    	}
;;;586    
;;;587    	/* dy = abs ( _usY2 - _usY1 ); */
;;;588    	if (_usY2 >= _usY1)
;;;589    	{
;;;590    		dy = _usY2 - _usY1;
;;;591    	}
;;;592    	else
;;;593    	{
;;;594    		dy = _usY1 - _usY2;
;;;595    	}
;;;596    
;;;597    	if ( dx < dy )   /*如果dy为计长方向，则交换纵横坐标。*/
;;;598    	{
;;;599    		uint16_t temp;
;;;600    
;;;601    		iTag = 1 ;
;;;602    		temp = _usX1; _usX1 = _usY1; _usY1 = temp;
;;;603    		temp = _usX2; _usX2 = _usY2; _usY2 = temp;
;;;604    		temp = dx; dx = dy; dy = temp;
;;;605    	}
;;;606    	tx = _usX2 > _usX1 ? 1 : -1 ;    /* 确定是增1还是减1 */
;;;607    	ty = _usY2 > _usY1 ? 1 : -1 ;
;;;608    	x = _usX1 ;
;;;609    	y = _usY1 ;
;;;610    	inc1 = 2 * dy ;
;;;611    	inc2 = 2 * ( dy - dx );
;;;612    	d = inc1 - dx ;
;;;613    	while ( x != _usX2 )     /* 循环画点 */
;;;614    	{
;;;615    		if ( d < 0 )
;;;616    		{
;;;617    			d += inc1 ;
;;;618    		}
;;;619    		else
;;;620    		{
;;;621    			y += ty ;
;;;622    			d += inc2 ;
;;;623    		}
;;;624    		if ( iTag )
;;;625    		{
;;;626    			ST7789V_PutPixel ( y , x , _usColor) ;
;;;627    		}
;;;628    		else
;;;629    		{
;;;630    			ST7789V_PutPixel ( x , y , _usColor) ;
;;;631    		}
;;;632    		x += tx ;
;;;633    	}
;;;634    }
000020  b007              ADD      sp,sp,#0x1c
000022  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.38|
000026  2000              MOVS     r0,#0                 ;576
000028  9002              STR      r0,[sp,#8]            ;576
00002a  42a6              CMP      r6,r4                 ;578
00002c  db02              BLT      |L10.52|
00002e  eba60804          SUB      r8,r6,r4              ;580
000032  e001              B        |L10.56|
                  |L10.52|
000034  eba40806          SUB      r8,r4,r6              ;584
                  |L10.56|
000038  42af              CMP      r7,r5                 ;588
00003a  db02              BLT      |L10.66|
00003c  eba70905          SUB      r9,r7,r5              ;590
000040  e001              B        |L10.70|
                  |L10.66|
000042  eba50907          SUB      r9,r5,r7              ;594
                  |L10.70|
000046  45c8              CMP      r8,r9                 ;597
000048  da0c              BGE      |L10.100|
00004a  2101              MOVS     r1,#1                 ;601
00004c  9102              STR      r1,[sp,#8]            ;601
00004e  4620              MOV      r0,r4                 ;602
000050  462c              MOV      r4,r5                 ;602
000052  4605              MOV      r5,r0                 ;602
000054  4630              MOV      r0,r6                 ;603
000056  463e              MOV      r6,r7                 ;603
000058  4607              MOV      r7,r0                 ;603
00005a  fa1ff088          UXTH     r0,r8                 ;604
00005e  46c8              MOV      r8,r9                 ;604
000060  4681              MOV      r9,r0                 ;604
000062  bf00              NOP                            ;605
                  |L10.100|
000064  42a6              CMP      r6,r4                 ;606
000066  dd01              BLE      |L10.108|
000068  2001              MOVS     r0,#1                 ;606
00006a  e001              B        |L10.112|
                  |L10.108|
00006c  f04f30ff          MOV      r0,#0xffffffff        ;606
                  |L10.112|
000070  9006              STR      r0,[sp,#0x18]         ;606
000072  42af              CMP      r7,r5                 ;607
000074  dd01              BLE      |L10.122|
000076  2001              MOVS     r0,#1                 ;607
000078  e001              B        |L10.126|
                  |L10.122|
00007a  f04f30ff          MOV      r0,#0xffffffff        ;607
                  |L10.126|
00007e  9005              STR      r0,[sp,#0x14]         ;607
000080  46a2              MOV      r10,r4                ;608
000082  9501              STR      r5,[sp,#4]            ;609
000084  ea4f0049          LSL      r0,r9,#1              ;610
000088  9004              STR      r0,[sp,#0x10]         ;610
00008a  eba90008          SUB      r0,r9,r8              ;611
00008e  0040              LSLS     r0,r0,#1              ;611
000090  9003              STR      r0,[sp,#0xc]          ;611
000092  9804              LDR      r0,[sp,#0x10]         ;612
000094  eba00b08          SUB      r11,r0,r8             ;612
000098  e01e              B        |L10.216|
                  |L10.154|
00009a  f1bb0f00          CMP      r11,#0                ;615
00009e  da02              BGE      |L10.166|
0000a0  9804              LDR      r0,[sp,#0x10]         ;617
0000a2  4483              ADD      r11,r11,r0            ;617
0000a4  e005              B        |L10.178|
                  |L10.166|
0000a6  9905              LDR      r1,[sp,#0x14]         ;621
0000a8  9801              LDR      r0,[sp,#4]            ;621
0000aa  4408              ADD      r0,r0,r1              ;621
0000ac  9001              STR      r0,[sp,#4]            ;621
0000ae  9803              LDR      r0,[sp,#0xc]          ;622
0000b0  4483              ADD      r11,r11,r0            ;622
                  |L10.178|
0000b2  9802              LDR      r0,[sp,#8]            ;624
0000b4  b138              CBZ      r0,|L10.198|
0000b6  fa1ff18a          UXTH     r1,r10                ;626
0000ba  9a01              LDR      r2,[sp,#4]            ;626
0000bc  b290              UXTH     r0,r2                 ;626
0000be  9a10              LDR      r2,[sp,#0x40]         ;626
0000c0  f7fffffe          BL       ST7789V_PutPixel
0000c4  e006              B        |L10.212|
                  |L10.198|
0000c6  9a01              LDR      r2,[sp,#4]            ;630
0000c8  b291              UXTH     r1,r2                 ;630
0000ca  fa1ff08a          UXTH     r0,r10                ;630
0000ce  9a10              LDR      r2,[sp,#0x40]         ;630
0000d0  f7fffffe          BL       ST7789V_PutPixel
                  |L10.212|
0000d4  9806              LDR      r0,[sp,#0x18]         ;632
0000d6  4482              ADD      r10,r10,r0            ;632
                  |L10.216|
0000d8  45b2              CMP      r10,r6                ;613
0000da  d1de              BNE      |L10.154|
0000dc  bf00              NOP      
0000de  e79f              B        |L10.32|
;;;635    
                          ENDP


                          AREA ||i.ST7789V_DrawRect||, CODE, READONLY, ALIGN=1

                  ST7789V_DrawRect PROC
;;;757    */
;;;758    void ST7789V_DrawRect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;759    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;760    	/*
;;;761    	 ---------------->---
;;;762    	|(_usX，_usY)        |
;;;763    	V                    V  _usHeight
;;;764    	|                    |
;;;765    	 ---------------->---
;;;766    		  _usWidth
;;;767    	*/
;;;768    
;;;769    	ST7789V_DrawLine(_usX, _usY, _usX + _usWidth - 1, _usY, _usColor);	/* 顶 */
000010  19e0              ADDS     r0,r4,r7
000012  1e40              SUBS     r0,r0,#1
000014  b282              UXTH     r2,r0
000016  462b              MOV      r3,r5
000018  4629              MOV      r1,r5
00001a  4620              MOV      r0,r4
00001c  f8cd8000          STR      r8,[sp,#0]
000020  f7fffffe          BL       ST7789V_DrawLine
;;;770    	ST7789V_DrawLine(_usX, _usY + _usHeight - 1, _usX + _usWidth - 1, _usY + _usHeight - 1, _usColor);	/* 底 */
000024  19a8              ADDS     r0,r5,r6
000026  1e40              SUBS     r0,r0,#1
000028  b283              UXTH     r3,r0
00002a  19e0              ADDS     r0,r4,r7
00002c  1e40              SUBS     r0,r0,#1
00002e  b282              UXTH     r2,r0
000030  19a8              ADDS     r0,r5,r6
000032  1e40              SUBS     r0,r0,#1
000034  b281              UXTH     r1,r0
000036  4620              MOV      r0,r4
000038  f8cd8000          STR      r8,[sp,#0]
00003c  f7fffffe          BL       ST7789V_DrawLine
;;;771    
;;;772    	ST7789V_DrawLine(_usX, _usY, _usX, _usY + _usHeight - 1, _usColor);	/* 左 */
000040  19a8              ADDS     r0,r5,r6
000042  1e40              SUBS     r0,r0,#1
000044  b283              UXTH     r3,r0
000046  4622              MOV      r2,r4
000048  4629              MOV      r1,r5
00004a  4620              MOV      r0,r4
00004c  f8cd8000          STR      r8,[sp,#0]
000050  f7fffffe          BL       ST7789V_DrawLine
;;;773    	ST7789V_DrawLine(_usX + _usWidth - 1, _usY, _usX + _usWidth - 1, _usY + _usHeight, _usColor);	/* 右 */
000054  19a9              ADDS     r1,r5,r6
000056  b28b              UXTH     r3,r1
000058  19e1              ADDS     r1,r4,r7
00005a  1e49              SUBS     r1,r1,#1
00005c  b28a              UXTH     r2,r1
00005e  19e1              ADDS     r1,r4,r7
000060  1e49              SUBS     r1,r1,#1
000062  b288              UXTH     r0,r1
000064  4629              MOV      r1,r5
000066  f8cd8000          STR      r8,[sp,#0]
00006a  f7fffffe          BL       ST7789V_DrawLine
;;;774    }
00006e  e8bd83f8          POP      {r3-r9,pc}
;;;775    
                          ENDP


                          AREA ||i.ST7789V_DrawVLine||, CODE, READONLY, ALIGN=1

                  ST7789V_DrawVLine PROC
;;;670    */
;;;671    void ST7789V_DrawVLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usY2 , uint16_t _usColor)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;672    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;673    	uint16_t i;
;;;674    	
;;;675    	for (i = _usY1; i <=_usY2; i++)
00000c  462c              MOV      r4,r5
00000e  e006              B        |L12.30|
                  |L12.16|
;;;676    	{	
;;;677    		ST7789V_PutPixel(_usX1, i, _usColor);	
000010  463a              MOV      r2,r7
000012  4621              MOV      r1,r4
000014  4640              MOV      r0,r8
000016  f7fffffe          BL       ST7789V_PutPixel
00001a  1c60              ADDS     r0,r4,#1              ;675
00001c  b284              UXTH     r4,r0                 ;675
                  |L12.30|
00001e  42b4              CMP      r4,r6                 ;675
000020  ddf6              BLE      |L12.16|
;;;678    	}
;;;679    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;680    
                          ENDP


                          AREA ||i.ST7789V_FillRect||, CODE, READONLY, ALIGN=1

                  ST7789V_FillRect PROC
;;;786    */
;;;787    void ST7789V_FillRect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;788    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  9e08              LDR      r6,[sp,#0x20]
;;;789    	uint32_t i;
;;;790    
;;;791    	/*
;;;792    	 ---------------->---
;;;793    	|(_usX，_usY)        |
;;;794    	V                    V  _usHeight
;;;795    	|                    |
;;;796    	 ---------------->---
;;;797    		  _usWidth
;;;798    	*/
;;;799    
;;;800    	ST7789V_SetDispWin(_usX, _usY, _usHeight, _usWidth);
00000e  462b              MOV      r3,r5
000010  4622              MOV      r2,r4
000012  4649              MOV      r1,r9
000014  4640              MOV      r0,r8
000016  f7fffffe          BL       ST7789V_SetDispWin
;;;801    
;;;802    	ST7789V_WriteCmd(0x2C);
00001a  202c              MOVS     r0,#0x2c
00001c  f7fffffe          BL       ST7789V_WriteCmd
;;;803    	for (i = 0; i < _usHeight * _usWidth; i++)
000020  2700              MOVS     r7,#0
000022  e006              B        |L13.50|
                  |L13.36|
;;;804    	{
;;;805    		ST7789V_WriteParam(_usColor >> 8);
000024  1230              ASRS     r0,r6,#8
000026  f7fffffe          BL       ST7789V_WriteParam
;;;806    		ST7789V_WriteParam(_usColor);
00002a  b2f0              UXTB     r0,r6
00002c  f7fffffe          BL       ST7789V_WriteParam
000030  1c7f              ADDS     r7,r7,#1              ;803
                  |L13.50|
000032  fb04f005          MUL      r0,r4,r5              ;803
000036  42b8              CMP      r0,r7                 ;803
000038  d8f4              BHI      |L13.36|
;;;807    	}
;;;808    }
00003a  e8bd87f0          POP      {r4-r10,pc}
;;;809    
                          ENDP


                          AREA ||i.ST7789V_GetPixel||, CODE, READONLY, ALIGN=1

                  ST7789V_GetPixel PROC
;;;534    */
;;;535    uint16_t ST7789V_GetPixel(uint16_t _usX, uint16_t _usY)
000000  b538              PUSH     {r3-r5,lr}
;;;536    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;537    	uint8_t buf[3] = {0x0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;538    
;;;539    	ST7789V_SetCursor(_usX, _usY);	/* 设置光标位置 */
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       ST7789V_SetCursor
;;;540    
;;;541    	ST7789V_WriteCmd(0x2E);
000012  202e              MOVS     r0,#0x2e
000014  f7fffffe          BL       ST7789V_WriteCmd
;;;542    	ST7789V_ReadData(buf, 3); 	/* 第1个哑读，丢弃 */
000018  2103              MOVS     r1,#3
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       ST7789V_ReadData
;;;543    
;;;544        return ((buf[1] << 8) | buf[2]);
000020  f89d0002          LDRB     r0,[sp,#2]
000024  f89d1001          LDRB     r1,[sp,#1]
000028  ea402001          ORR      r0,r0,r1,LSL #8
;;;545    }
00002c  bd38              POP      {r3-r5,pc}
;;;546    
                          ENDP


                          AREA ||i.ST7789V_InitHard||, CODE, READONLY, ALIGN=2

                  ST7789V_InitHard PROC
;;;42     */
;;;43     uint32_t ST7789V_InitHard(void)
000000  b510              PUSH     {r4,lr}
;;;44     {
;;;45     	uint32_t id;
;;;46     
;;;47     	id = ST7789V_ReadID();
000002  f7fffffe          BL       ST7789V_ReadID
000006  4604              MOV      r4,r0
;;;48     
;;;49     	if (id == IC_ST7789V_ID)
000008  4807              LDR      r0,|L15.40|
00000a  4284              CMP      r4,r0
00000c  d109              BNE      |L15.34|
;;;50     	{
;;;51     		Init_7789();	/* 初始化5420和4001屏硬件 */
00000e  f7fffffe          BL       Init_7789
;;;52     
;;;53     		s_RGBChgEn = 0;
000012  2000              MOVS     r0,#0
000014  4905              LDR      r1,|L15.44|
000016  7008              STRB     r0,[r1,#0]
;;;54     
;;;55     		//ST7789V_PutPixel(1,1, 0x12);
;;;56     		//g_ChipID = ST7789V_GetPixel(1,1);
;;;57     
;;;58     		//ST7789V_PutPixel(1,1, 0x34);
;;;59     		//g_ChipID = ST7789V_GetPixel(1,1);
;;;60     
;;;61     		//ST7789V_PutPixel(1,1, 0x56);
;;;62     		//g_ChipID = ST7789V_GetPixel(1,1);
;;;63     
;;;64     		g_ChipID = IC_7789;
000018  f2477089          MOV      r0,#0x7789
00001c  4904              LDR      r1,|L15.48|
00001e  8008              STRH     r0,[r1,#0]
                  |L15.32|
;;;65     
;;;66                     return IC_7789;
;;;67     	}
;;;68     
;;;69             return IC_UNKN;
;;;70     }
000020  bd10              POP      {r4,pc}
                  |L15.34|
000022  f64e60ee          MOV      r0,#0xeeee            ;69
000026  e7fb              B        |L15.32|
;;;71     
                          ENDP

                  |L15.40|
                          DCD      0x00858552
                  |L15.44|
                          DCD      s_RGBChgEn
                  |L15.48|
                          DCD      g_ChipID

                          AREA ||i.ST7789V_PutPixel||, CODE, READONLY, ALIGN=1

                  ST7789V_PutPixel PROC
;;;514    */
;;;515    void ST7789V_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
000000  b570              PUSH     {r4-r6,lr}
;;;516    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;517    	ST7789V_SetCursor(_usX, _usY);	/* 设置光标位置 */
000008  4631              MOV      r1,r6
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       ST7789V_SetCursor
;;;518    
;;;519    	/* 写显存 */
;;;520    	ST7789V_WriteCmd(0x2C);
000010  202c              MOVS     r0,#0x2c
000012  f7fffffe          BL       ST7789V_WriteCmd
;;;521    	ST7789V_WriteParam(_usColor >> 8);
000016  1220              ASRS     r0,r4,#8
000018  f7fffffe          BL       ST7789V_WriteParam
;;;522    	ST7789V_WriteParam(_usColor);
00001c  b2e0              UXTB     r0,r4
00001e  f7fffffe          BL       ST7789V_WriteParam
;;;523    }
000022  bd70              POP      {r4-r6,pc}
;;;524    
                          ENDP


                          AREA ||i.ST7789V_QuitWinMode||, CODE, READONLY, ALIGN=2

                  ST7789V_QuitWinMode PROC
;;;405    */
;;;406    static void ST7789V_QuitWinMode(void)
000000  b510              PUSH     {r4,lr}
;;;407    {
;;;408    	ST7789V_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
000002  4804              LDR      r0,|L17.20|
000004  8803              LDRH     r3,[r0,#0]  ; g_LcdWidth
000006  4804              LDR      r0,|L17.24|
000008  8802              LDRH     r2,[r0,#0]  ; g_LcdHeight
00000a  2100              MOVS     r1,#0
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       ST7789V_SetDispWin
;;;409    }
000012  bd10              POP      {r4,pc}
;;;410    
                          ENDP

                  |L17.20|
                          DCD      g_LcdWidth
                  |L17.24|
                          DCD      g_LcdHeight

                          AREA ||i.ST7789V_ReadData||, CODE, READONLY, ALIGN=2

                  ST7789V_ReadData PROC
;;;244    */
;;;245    static void ST7789V_ReadData(uint8_t *readBuf, uint8_t _uCount)
000000  b57c              PUSH     {r2-r6,lr}
;;;246    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;247            //CS(CS)=PC9 RS(D/CX)=PC8 WR(WRX)=PC7 RD(RDX)=PC6 RST=PA8
;;;248    
;;;249            uint8_t i =0x00;   
000006  2400              MOVS     r4,#0
;;;250            GPIO_InitTypeDef GPIO_InitStructure;
;;;251    
;;;252    	/* 使能 GPIOD */
;;;253    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
000008  2101              MOVS     r1,#1
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;254    
;;;255    	/*  GPIO 配置为复用推挽输出 */
;;;256    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
000010  2003              MOVS     r0,#3
000012  f88d0005          STRB     r0,[sp,#5]
;;;257    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
000016  2000              MOVS     r0,#0
000018  f88d0004          STRB     r0,[sp,#4]
;;;258    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; 
00001c  f88d0006          STRB     r0,[sp,#6]
;;;259    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000020  f88d0007          STRB     r0,[sp,#7]
;;;260    
;;;261    	/* LCD Data Bus */
;;;262    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
000024  f64f70ff          MOV      r0,#0xffff
000028  9000              STR      r0,[sp,#0]
;;;263    	GPIO_Init(GPIOB, &GPIO_InitStructure);
00002a  4669              MOV      r1,sp
00002c  4815              LDR      r0,|L18.132|
00002e  f7fffffe          BL       GPIO_Init
;;;264     
;;;265            // INIT status
;;;266            //GPIO_SetBits(GPIOA, GPIO_Pin_8); //RST = 1;
;;;267            //GPIO_SetBits(GPIOC, GPIO_Pin_8);  //DCX = 1, //DCX = 0;Write Comand
;;;268            //GPIO_SetBits(GPIOC, GPIO_Pin_6);  // RD = 1
;;;269            //GPIO_SetBits(GPIOC, GPIO_Pin_7);  //WR = 1;
;;;270            //GPIO_SetBits(GPIOC, GPIO_Pin_9);  // CS = 1;
;;;271            GPIO_ResetBits(GPIOC, GPIO_Pin_9); // CS = 0
000032  f44f7100          MOV      r1,#0x200
000036  4814              LDR      r0,|L18.136|
000038  f7fffffe          BL       GPIO_ResetBits
;;;272    
;;;273            for(i = 0; i < _uCount; i++)
00003c  bf00              NOP      
00003e  e00d              B        |L18.92|
                  |L18.64|
;;;274            {
;;;275                    GPIO_ResetBits(GPIOC, GPIO_Pin_6); // RD = 0
000040  2140              MOVS     r1,#0x40
000042  4811              LDR      r0,|L18.136|
000044  f7fffffe          BL       GPIO_ResetBits
;;;276                    GPIO_SetBits(GPIOC, GPIO_Pin_6);  //RD = 1;
000048  2140              MOVS     r1,#0x40
00004a  480f              LDR      r0,|L18.136|
00004c  f7fffffe          BL       GPIO_SetBits
;;;277                    readBuf[i] = (uint8_t)(GPIO_ReadInputData(GPIOB) & 0xFF);
000050  480c              LDR      r0,|L18.132|
000052  f7fffffe          BL       GPIO_ReadInputData
000056  5528              STRB     r0,[r5,r4]
000058  1c60              ADDS     r0,r4,#1              ;273
00005a  b2c4              UXTB     r4,r0                 ;273
                  |L18.92|
00005c  42b4              CMP      r4,r6                 ;273
00005e  dbef              BLT      |L18.64|
;;;278            }
;;;279            GPIO_SetBits(GPIOC, GPIO_Pin_9);  // CS = 1;
000060  f44f7100          MOV      r1,#0x200
000064  4808              LDR      r0,|L18.136|
000066  f7fffffe          BL       GPIO_SetBits
;;;280    
;;;281            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
00006a  2001              MOVS     r0,#1
00006c  f88d0004          STRB     r0,[sp,#4]
;;;282            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000070  f88d0007          STRB     r0,[sp,#7]
;;;283    
;;;284    	/* LCD Data Bus */
;;;285    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
000074  f64f70ff          MOV      r0,#0xffff
000078  9000              STR      r0,[sp,#0]
;;;286    	GPIO_Init(GPIOB, &GPIO_InitStructure);
00007a  4669              MOV      r1,sp
00007c  4801              LDR      r0,|L18.132|
00007e  f7fffffe          BL       GPIO_Init
;;;287    }
000082  bd7c              POP      {r2-r6,pc}
;;;288    
                          ENDP

                  |L18.132|
                          DCD      0x40020400
                  |L18.136|
                          DCD      0x40020800

                          AREA ||i.ST7789V_ReadID||, CODE, READONLY, ALIGN=1

                  ST7789V_ReadID PROC
;;;418    */
;;;419    uint32_t ST7789V_ReadID(void)
000000  b508              PUSH     {r3,lr}
;;;420    {
;;;421    	uint8_t buf[4] = {0x0};
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;422    
;;;423            ST7789V_WriteCmd(0x04); //RDDID (Read Display ID)
000006  2004              MOVS     r0,#4
000008  f7fffffe          BL       ST7789V_WriteCmd
;;;424            ST7789V_ReadData(buf, 4);
00000c  2104              MOVS     r1,#4
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       ST7789V_ReadData
;;;425    
;;;426    	return (buf[1] << 16) + (buf[2] << 8) + buf[3];
000014  f89d0001          LDRB     r0,[sp,#1]
000018  0400              LSLS     r0,r0,#16
00001a  f89d1002          LDRB     r1,[sp,#2]
00001e  eb002001          ADD      r0,r0,r1,LSL #8
000022  f89d1003          LDRB     r1,[sp,#3]
000026  4408              ADD      r0,r0,r1
;;;427    }
000028  bd08              POP      {r3,pc}
;;;428    
                          ENDP


                          AREA ||i.ST7789V_SetCursor||, CODE, READONLY, ALIGN=1

                  ST7789V_SetCursor PROC
;;;382    */
;;;383    static void ST7789V_SetCursor(uint16_t _usX, uint16_t _usY)
000000  b570              PUSH     {r4-r6,lr}
;;;384    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;385    	ST7789V_WriteCmd(0X2A); 		/* 设置X坐标 */
000006  202a              MOVS     r0,#0x2a
000008  f7fffffe          BL       ST7789V_WriteCmd
;;;386    	ST7789V_WriteParam(_usX >> 8);	/* 先高8位，然后低8位 */
00000c  1220              ASRS     r0,r4,#8
00000e  f7fffffe          BL       ST7789V_WriteParam
;;;387    	ST7789V_WriteParam(_usX);		/* 设置起始点和结束点*/
000012  b2e0              UXTB     r0,r4
000014  f7fffffe          BL       ST7789V_WriteParam
;;;388    	ST7789V_WriteParam(_usX >> 8);	/* 先高8位，然后低8位 */
000018  1220              ASRS     r0,r4,#8
00001a  f7fffffe          BL       ST7789V_WriteParam
;;;389    	ST7789V_WriteParam(_usX);		/* 设置起始点和结束点*/
00001e  b2e0              UXTB     r0,r4
000020  f7fffffe          BL       ST7789V_WriteParam
;;;390    
;;;391        ST7789V_WriteCmd(0X2B); 		/* 设置Y坐标*/
000024  202b              MOVS     r0,#0x2b
000026  f7fffffe          BL       ST7789V_WriteCmd
;;;392    	ST7789V_WriteParam(_usY >> 8);
00002a  1228              ASRS     r0,r5,#8
00002c  f7fffffe          BL       ST7789V_WriteParam
;;;393    	ST7789V_WriteParam(_usY);
000030  b2e8              UXTB     r0,r5
000032  f7fffffe          BL       ST7789V_WriteParam
;;;394    	ST7789V_WriteParam(_usY >> 8);
000036  1228              ASRS     r0,r5,#8
000038  f7fffffe          BL       ST7789V_WriteParam
;;;395    	ST7789V_WriteParam(_usY);
00003c  b2e8              UXTB     r0,r5
00003e  f7fffffe          BL       ST7789V_WriteParam
;;;396    }
000042  bd70              POP      {r4-r6,pc}
;;;397    
                          ENDP


                          AREA ||i.ST7789V_SetDirection||, CODE, READONLY, ALIGN=2

                  ST7789V_SetDirection PROC
;;;79     */
;;;80     void ST7789V_SetDirection(uint8_t _ucDir)
000000  b510              PUSH     {r4,lr}
;;;81     {
000002  4604              MOV      r4,r0
;;;82     	/*
;;;83     		Memory Access Control (36h)
;;;84     		This command defines read/write scanning direction of the frame memory.
;;;85     
;;;86     		These 3 bits control the direction from the MPU to memory write/read.
;;;87     
;;;88     		Bit  Symbol  Name  Description
;;;89     		D7   MY  Row Address Order
;;;90     		D6   MX  Column Address Order
;;;91     		D5   MV  Row/Column Exchange
;;;92     		D4   ML  Vertical Refresh Order  LCD vertical refresh direction control. 、
;;;93     
;;;94     		D3   BGR RGB-BGR Order   Color selector switch control
;;;95     		     (0 = RGB color filter panel, 1 = BGR color filter panel )
;;;96     		D2   MH  Horizontal Refresh ORDER  LCD horizontal refreshing direction control.
;;;97     		D1   X   Reserved  Reserved
;;;98     		D0   X   Reserved  Reserved
;;;99     	*/
;;;100    	ST7789V_WriteCmd(0x36);
000004  2036              MOVS     r0,#0x36
000006  f7fffffe          BL       ST7789V_WriteCmd
;;;101    	/* 0 表示竖屏(排线在下)，1表示竖屏(排线在上), 2表示横屏(排线在左边)  3表示横屏 (排线在右边) */
;;;102    	if (_ucDir == 0)
00000a  b954              CBNZ     r4,|L21.34|
;;;103    	{
;;;104    		ST7789V_WriteParam(0xA0);	/* 横屏(排线在左边) */
00000c  20a0              MOVS     r0,#0xa0
00000e  f7fffffe          BL       ST7789V_WriteParam
;;;105    		g_LcdHeight = 240;
000012  20f0              MOVS     r0,#0xf0
000014  4916              LDR      r1,|L21.112|
000016  8008              STRH     r0,[r1,#0]
;;;106    		g_LcdWidth = 320;
000018  f44f70a0          MOV      r0,#0x140
00001c  4915              LDR      r1,|L21.116|
00001e  8008              STRH     r0,[r1,#0]
000020  e025              B        |L21.110|
                  |L21.34|
;;;107    	}
;;;108    	else if (_ucDir == 1)
000022  2c01              CMP      r4,#1
000024  d10a              BNE      |L21.60|
;;;109    	{
;;;110    		ST7789V_WriteParam(0x60);	/* 横屏 (排线在右边) */
000026  2060              MOVS     r0,#0x60
000028  f7fffffe          BL       ST7789V_WriteParam
;;;111    		g_LcdHeight = 240;
00002c  20f0              MOVS     r0,#0xf0
00002e  4910              LDR      r1,|L21.112|
000030  8008              STRH     r0,[r1,#0]
;;;112    		g_LcdWidth = 320;
000032  f44f70a0          MOV      r0,#0x140
000036  490f              LDR      r1,|L21.116|
000038  8008              STRH     r0,[r1,#0]
00003a  e018              B        |L21.110|
                  |L21.60|
;;;113    	}
;;;114    	else if (_ucDir == 2)
00003c  2c02              CMP      r4,#2
00003e  d10a              BNE      |L21.86|
;;;115    	{
;;;116    		ST7789V_WriteParam(0xC0);	/* 竖屏(排线在上) */
000040  20c0              MOVS     r0,#0xc0
000042  f7fffffe          BL       ST7789V_WriteParam
;;;117    		g_LcdHeight = 320;
000046  f44f70a0          MOV      r0,#0x140
00004a  4909              LDR      r1,|L21.112|
00004c  8008              STRH     r0,[r1,#0]
;;;118    		g_LcdWidth = 240;
00004e  20f0              MOVS     r0,#0xf0
000050  4908              LDR      r1,|L21.116|
000052  8008              STRH     r0,[r1,#0]
000054  e00b              B        |L21.110|
                  |L21.86|
;;;119    	}
;;;120    	else if (_ucDir == 3)
000056  2c03              CMP      r4,#3
000058  d109              BNE      |L21.110|
;;;121    	{
;;;122    		ST7789V_WriteParam(0x00);	/* 竖屏(排线在下) */
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       ST7789V_WriteParam
;;;123    		g_LcdHeight = 320;
000060  f44f70a0          MOV      r0,#0x140
000064  4902              LDR      r1,|L21.112|
000066  8008              STRH     r0,[r1,#0]
;;;124    		g_LcdWidth = 240;
000068  20f0              MOVS     r0,#0xf0
00006a  4902              LDR      r1,|L21.116|
00006c  8008              STRH     r0,[r1,#0]
                  |L21.110|
;;;125    	}
;;;126    }
00006e  bd10              POP      {r4,pc}
;;;127    
                          ENDP

                  |L21.112|
                          DCD      g_LcdHeight
                  |L21.116|
                          DCD      g_LcdWidth

                          AREA ||i.ST7789V_SetDispWin||, CODE, READONLY, ALIGN=1

                  ST7789V_SetDispWin PROC
;;;359    */
;;;360    static void ST7789V_SetDispWin(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;361    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;362    	ST7789V_WriteCmd(0X2A); 		/* 设置X坐标 */
00000c  202a              MOVS     r0,#0x2a
00000e  f7fffffe          BL       ST7789V_WriteCmd
;;;363    	ST7789V_WriteParam((uint8_t)((_usX & 0xFF00) >> 8));	/* 起始点 */
000012  0a20              LSRS     r0,r4,#8
000014  f7fffffe          BL       ST7789V_WriteParam
;;;364    	ST7789V_WriteParam((uint8_t)(_usX & 0x00FF));
000018  b2e0              UXTB     r0,r4
00001a  f7fffffe          BL       ST7789V_WriteParam
;;;365    	ST7789V_WriteParam((uint8_t)(((_usX + _usWidth - 1) & 0xFF00) >> 8));	/* 结束点 */
00001e  19e1              ADDS     r1,r4,r7
000020  1e49              SUBS     r1,r1,#1
000022  f3c12007          UBFX     r0,r1,#8,#8
000026  f7fffffe          BL       ST7789V_WriteParam
;;;366    	ST7789V_WriteParam((uint8_t)(_usX + _usWidth - 1));
00002a  19e1              ADDS     r1,r4,r7
00002c  1e49              SUBS     r1,r1,#1
00002e  b2c8              UXTB     r0,r1
000030  f7fffffe          BL       ST7789V_WriteParam
;;;367    
;;;368    	ST7789V_WriteCmd(0X2B); 				  /* 设置Y坐标*/
000034  202b              MOVS     r0,#0x2b
000036  f7fffffe          BL       ST7789V_WriteCmd
;;;369    	ST7789V_WriteParam((uint8_t)((_usY & 0xFF00) >> 8));   /* 起始点 */
00003a  0a28              LSRS     r0,r5,#8
00003c  f7fffffe          BL       ST7789V_WriteParam
;;;370    	ST7789V_WriteParam((uint8_t)(_usY & 0x00FF));
000040  b2e8              UXTB     r0,r5
000042  f7fffffe          BL       ST7789V_WriteParam
;;;371    	ST7789V_WriteParam((uint8_t)(((_usY + _usHeight - 1) & 0xFF00) >>8));		/* 结束点 */
000046  19a9              ADDS     r1,r5,r6
000048  1e49              SUBS     r1,r1,#1
00004a  f3c12007          UBFX     r0,r1,#8,#8
00004e  f7fffffe          BL       ST7789V_WriteParam
;;;372    	ST7789V_WriteParam((uint8_t)(_usY + _usHeight - 1));
000052  19a9              ADDS     r1,r5,r6
000054  1e49              SUBS     r1,r1,#1
000056  b2c8              UXTB     r0,r1
000058  f7fffffe          BL       ST7789V_WriteParam
;;;373    }
00005c  e8bd81f0          POP      {r4-r8,pc}
;;;374    
                          ENDP


                          AREA ||i.ST7789V_SetGammaCtrl||, CODE, READONLY, ALIGN=1

                  ST7789V_SetGammaCtrl PROC
;;;127    
;;;128    static void ST7789V_SetGammaCtrl(void)
000000  b510              PUSH     {r4,lr}
;;;129    {
;;;130                ST7789V_WriteCmd(0xe0);  //PVGAMCTRL (E0h): Positive Voltage Gamma Control
000002  20e0              MOVS     r0,#0xe0
000004  f7fffffe          BL       ST7789V_WriteCmd
;;;131                ST7789V_WriteParam(0xf0);
000008  20f0              MOVS     r0,#0xf0
00000a  f7fffffe          BL       ST7789V_WriteParam
;;;132                ST7789V_WriteParam(0x00);
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       ST7789V_WriteParam
;;;133                ST7789V_WriteParam(0x0a);
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       ST7789V_WriteParam
;;;134                ST7789V_WriteParam(0x10);
00001a  2010              MOVS     r0,#0x10
00001c  f7fffffe          BL       ST7789V_WriteParam
;;;135                ST7789V_WriteParam(0x12);
000020  2012              MOVS     r0,#0x12
000022  f7fffffe          BL       ST7789V_WriteParam
;;;136                ST7789V_WriteParam(0x1b);
000026  201b              MOVS     r0,#0x1b
000028  f7fffffe          BL       ST7789V_WriteParam
;;;137                ST7789V_WriteParam(0x39);
00002c  2039              MOVS     r0,#0x39
00002e  f7fffffe          BL       ST7789V_WriteParam
;;;138                ST7789V_WriteParam(0x44);
000032  2044              MOVS     r0,#0x44
000034  f7fffffe          BL       ST7789V_WriteParam
;;;139                ST7789V_WriteParam(0x47);
000038  2047              MOVS     r0,#0x47
00003a  f7fffffe          BL       ST7789V_WriteParam
;;;140                ST7789V_WriteParam(0x28);
00003e  2028              MOVS     r0,#0x28
000040  f7fffffe          BL       ST7789V_WriteParam
;;;141                ST7789V_WriteParam(0x12);
000044  2012              MOVS     r0,#0x12
000046  f7fffffe          BL       ST7789V_WriteParam
;;;142                ST7789V_WriteParam(0x10);
00004a  2010              MOVS     r0,#0x10
00004c  f7fffffe          BL       ST7789V_WriteParam
;;;143                ST7789V_WriteParam(0x16);
000050  2016              MOVS     r0,#0x16
000052  f7fffffe          BL       ST7789V_WriteParam
;;;144                ST7789V_WriteParam(0x1b);
000056  201b              MOVS     r0,#0x1b
000058  f7fffffe          BL       ST7789V_WriteParam
;;;145        
;;;146                ST7789V_WriteCmd(0xe1);  //NVGAMCTRL (E1h): Negative Voltage Gamma Control
00005c  20e1              MOVS     r0,#0xe1
00005e  f7fffffe          BL       ST7789V_WriteCmd
;;;147                ST7789V_WriteParam(0xf0);
000062  20f0              MOVS     r0,#0xf0
000064  f7fffffe          BL       ST7789V_WriteParam
;;;148                ST7789V_WriteParam(0x00);
000068  2000              MOVS     r0,#0
00006a  f7fffffe          BL       ST7789V_WriteParam
;;;149                ST7789V_WriteParam(0x0a);
00006e  200a              MOVS     r0,#0xa
000070  f7fffffe          BL       ST7789V_WriteParam
;;;150                ST7789V_WriteParam(0x10);
000074  2010              MOVS     r0,#0x10
000076  f7fffffe          BL       ST7789V_WriteParam
;;;151                ST7789V_WriteParam(0x11);
00007a  2011              MOVS     r0,#0x11
00007c  f7fffffe          BL       ST7789V_WriteParam
;;;152                ST7789V_WriteParam(0x1a);
000080  201a              MOVS     r0,#0x1a
000082  f7fffffe          BL       ST7789V_WriteParam
;;;153                ST7789V_WriteParam(0x3b);
000086  203b              MOVS     r0,#0x3b
000088  f7fffffe          BL       ST7789V_WriteParam
;;;154                ST7789V_WriteParam(0x34);
00008c  2034              MOVS     r0,#0x34
00008e  f7fffffe          BL       ST7789V_WriteParam
;;;155                ST7789V_WriteParam(0x4e);
000092  204e              MOVS     r0,#0x4e
000094  f7fffffe          BL       ST7789V_WriteParam
;;;156                ST7789V_WriteParam(0x3a);
000098  203a              MOVS     r0,#0x3a
00009a  f7fffffe          BL       ST7789V_WriteParam
;;;157                ST7789V_WriteParam(0x17);
00009e  2017              MOVS     r0,#0x17
0000a0  f7fffffe          BL       ST7789V_WriteParam
;;;158                ST7789V_WriteParam(0x16);
0000a4  2016              MOVS     r0,#0x16
0000a6  f7fffffe          BL       ST7789V_WriteParam
;;;159                ST7789V_WriteParam(0x21);
0000aa  2021              MOVS     r0,#0x21
0000ac  f7fffffe          BL       ST7789V_WriteParam
;;;160                ST7789V_WriteParam(0x22);
0000b0  2022              MOVS     r0,#0x22
0000b2  f7fffffe          BL       ST7789V_WriteParam
;;;161    
;;;162    }
0000b6  bd10              POP      {r4,pc}
;;;163    
                          ENDP


                          AREA ||i.ST7789V_SoftReset||, CODE, READONLY, ALIGN=1

                  ST7789V_SoftReset PROC
;;;230    
;;;231    void ST7789V_SoftReset(void)
000000  b510              PUSH     {r4,lr}
;;;232    {
;;;233            ST7789V_WriteCmd(0X01);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       ST7789V_WriteCmd
;;;234            ST7789V_WriteParam(0X01);
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       ST7789V_WriteParam
;;;235            bsp_DelayMS(10);
00000e  200a              MOVS     r0,#0xa
000010  f7fffffe          BL       bsp_DelayMS
;;;236    }
000014  bd10              POP      {r4,pc}
;;;237    /*
                          ENDP


                          AREA ||i.ST7789V_WriteCmd||, CODE, READONLY, ALIGN=2

                  ST7789V_WriteCmd PROC
;;;297    */
;;;298    static void ST7789V_WriteCmd(uint8_t _ucCmd)
000000  b510              PUSH     {r4,lr}
;;;299    {
000002  4604              MOV      r4,r0
;;;300            //CS(CS)=PC9 RS(D/CX)=PC8 WR(WRX)=PC7 RD(RDX)=PC6 RST=PA8
;;;301    
;;;302            // INIT status
;;;303            //GPIO_SetBits(GPIOA, GPIO_Pin_8); //RST = 1;
;;;304            //GPIO_SetBits(GPIOC, GPIO_Pin_8);  //DCX = 1, //DCX = 0;Write Comand
;;;305            //GPIO_SetBits(GPIOC, GPIO_Pin_6);  // RD = 1
;;;306            //GPIO_SetBits(GPIOC, GPIO_Pin_7);  //WR = 1;
;;;307            //GPIO_SetBits(GPIOC, GPIO_Pin_9);  // CS = 1;
;;;308    
;;;309            GPIO_ResetBits(GPIOC, GPIO_Pin_9); // CS = 0
000004  f44f7100          MOV      r1,#0x200
000008  480f              LDR      r0,|L25.72|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;310            GPIO_ResetBits(GPIOC, GPIO_Pin_8);  //DCX = 0, //DCX = 0;Write Comand
00000e  f44f7180          MOV      r1,#0x100
000012  480d              LDR      r0,|L25.72|
000014  f7fffffe          BL       GPIO_ResetBits
;;;311            GPIO_ResetBits(GPIOC, GPIO_Pin_7); // WR = 0
000018  2180              MOVS     r1,#0x80
00001a  480b              LDR      r0,|L25.72|
00001c  f7fffffe          BL       GPIO_ResetBits
;;;312            
;;;313            GPIO_Write(GPIOB, (0xff << 8) | _ucCmd);
000020  f444417f          ORR      r1,r4,#0xff00
000024  4809              LDR      r0,|L25.76|
000026  f7fffffe          BL       GPIO_Write
;;;314            
;;;315            GPIO_SetBits(GPIOC, GPIO_Pin_7);  //WR = 1;
00002a  2180              MOVS     r1,#0x80
00002c  4806              LDR      r0,|L25.72|
00002e  f7fffffe          BL       GPIO_SetBits
;;;316            GPIO_SetBits(GPIOC, GPIO_Pin_9);  // CS = 1;
000032  f44f7100          MOV      r1,#0x200
000036  4804              LDR      r0,|L25.72|
000038  f7fffffe          BL       GPIO_SetBits
;;;317            GPIO_SetBits(GPIOC, GPIO_Pin_8);  //DCX = 1, //DCX = 0;Write Comand
00003c  f44f7180          MOV      r1,#0x100
000040  4801              LDR      r0,|L25.72|
000042  f7fffffe          BL       GPIO_SetBits
;;;318    }
000046  bd10              POP      {r4,pc}
;;;319    
                          ENDP

                  |L25.72|
                          DCD      0x40020800
                  |L25.76|
                          DCD      0x40020400

                          AREA ||i.ST7789V_WriteParam||, CODE, READONLY, ALIGN=2

                  ST7789V_WriteParam PROC
;;;328    */
;;;329    static void ST7789V_WriteParam(uint8_t _ucParam)
000000  b510              PUSH     {r4,lr}
;;;330    {
000002  4604              MOV      r4,r0
;;;331            //CS(CS)=PC9 RS(D/CX)=PC8 WR(WRX)=PC7 RD(RDX)=PC6 RST=PA8
;;;332    
;;;333            // INIT status
;;;334            //GPIO_SetBits(GPIOA, GPIO_Pin_8); //RST = 1;
;;;335            //GPIO_SetBits(GPIOC, GPIO_Pin_8);  //DCX = 1, //DCX = 0;Write Comand
;;;336            //GPIO_SetBits(GPIOC, GPIO_Pin_6);  // RD = 1
;;;337            //GPIO_SetBits(GPIOC, GPIO_Pin_7);  //WR = 1;
;;;338            //GPIO_SetBits(GPIOC, GPIO_Pin_9);  // CS = 1;
;;;339    
;;;340            GPIO_ResetBits(GPIOC, GPIO_Pin_9); // CS = 0
000004  f44f7100          MOV      r1,#0x200
000008  480a              LDR      r0,|L26.52|
00000a  f7fffffe          BL       GPIO_ResetBits
;;;341            GPIO_ResetBits(GPIOC, GPIO_Pin_7); // WR = 0
00000e  2180              MOVS     r1,#0x80
000010  4808              LDR      r0,|L26.52|
000012  f7fffffe          BL       GPIO_ResetBits
;;;342            
;;;343            GPIO_Write(GPIOB, (0xff << 8) | _ucParam);
000016  f444417f          ORR      r1,r4,#0xff00
00001a  4807              LDR      r0,|L26.56|
00001c  f7fffffe          BL       GPIO_Write
;;;344            
;;;345            GPIO_SetBits(GPIOC, GPIO_Pin_7);  //WR = 1;
000020  2180              MOVS     r1,#0x80
000022  4804              LDR      r0,|L26.52|
000024  f7fffffe          BL       GPIO_SetBits
;;;346            GPIO_SetBits(GPIOC, GPIO_Pin_9);  // CS = 1;
000028  f44f7100          MOV      r1,#0x200
00002c  4801              LDR      r0,|L26.52|
00002e  f7fffffe          BL       GPIO_SetBits
;;;347    }
000032  bd10              POP      {r4,pc}
;;;348    /*
                          ENDP

                  |L26.52|
                          DCD      0x40020800
                  |L26.56|
                          DCD      0x40020400

                          AREA ||.data||, DATA, ALIGN=0

                  s_RGBChgEn
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\User\\bsp\\bsp_lcd_st7789v.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_bsp_lcd_st7789v_c_6bac6749____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___17_bsp_lcd_st7789v_c_6bac6749____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_bsp_lcd_st7789v_c_6bac6749____REVSH|
#line 402
|__asm___17_bsp_lcd_st7789v_c_6bac6749____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_bsp_lcd_st7789v_c_6bac6749____RRX|
#line 587
|__asm___17_bsp_lcd_st7789v_c_6bac6749____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
