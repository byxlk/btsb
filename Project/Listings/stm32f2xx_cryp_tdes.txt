; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\stm32f2xx_cryp_tdes.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\stm32f2xx_cryp_tdes.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\Libraries\CMSIS\Include -I..\Libraries\CMSIS\RTOS\Template -I..\Libraries\STM32F2xx_StdPeriph_Driver\inc -I..\Libraries\CMSIS\Device\ST\STM32F2xx\Include -I..\FatFS\src -I..\FreeRTOS\include -I..\FreeRTOS\portable\RVDS\ARM_CM3 -I..\User -I..\User\bsp -I..\User\emWinTask -I..\STemWin\Config -I..\STemWin\DisplayDriver -I..\STemWin\inc -I..\STemWin\OS -IH:\BluetoothSoundBox\Project_BtSB\SZ_VIPIN_BTSB_Project\Project\RTE -IC:\Keil_v521a\ARM\PACK\Keil\STM32F2xx_DFP\2.6.0\Drivers\CMSIS\Device\ST\STM32F2xx\Include -IC:\Keil_v521a\ARM\CMSIS\Include -D__UVISION_VERSION=521 -DSTM32F205xx -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\stm32f2xx_cryp_tdes.crf ..\Libraries\STM32F2xx_StdPeriph_Driver\src\stm32f2xx_cryp_tdes.c]
                          THUMB

                          AREA ||i.CRYP_TDES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_CBC PROC
;;;203      */
;;;204    ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;205                              uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;206    {
000004  b093              SUB      sp,sp,#0x4c
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  469b              MOV      r11,r3
;;;207      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;208      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;209      CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
;;;210      __IO uint32_t counter = 0;
00000e  2000              MOVS     r0,#0
000010  9004              STR      r0,[sp,#0x10]
;;;211      uint32_t busystatus = 0;
000012  9003              STR      r0,[sp,#0xc]
;;;212      ErrorStatus status = SUCCESS;
000014  2001              MOVS     r0,#1
000016  9002              STR      r0,[sp,#8]
;;;213      uint32_t keyaddr    = (uint32_t)Key;
000018  464c              MOV      r4,r9
;;;214      uint32_t inputaddr  = (uint32_t)Input;
00001a  465d              MOV      r5,r11
;;;215      uint32_t outputaddr = (uint32_t)Output;
00001c  9e1d              LDR      r6,[sp,#0x74]
;;;216      uint32_t ivaddr     = (uint32_t)InitVectors;
00001e  4657              MOV      r7,r10
;;;217      uint32_t i = 0;
000020  2000              MOVS     r0,#0
000022  9001              STR      r0,[sp,#4]
;;;218    
;;;219      /* Crypto structures initialisation*/
;;;220      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000024  a809              ADD      r0,sp,#0x24
000026  f7fffffe          BL       CRYP_KeyStructInit
;;;221    
;;;222      /* Crypto Init for Encryption process */
;;;223      if(Mode == MODE_ENCRYPT) /* TDES encryption */
00002a  f1b80f01          CMP      r8,#1
00002e  d103              BNE      |L1.56|
;;;224      {
;;;225        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
000030  2000              MOVS     r0,#0
000032  f8ad0044          STRH     r0,[sp,#0x44]
000036  e002              B        |L1.62|
                  |L1.56|
;;;226      }
;;;227      else
;;;228      {
;;;229        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000038  2004              MOVS     r0,#4
00003a  f8ad0044          STRH     r0,[sp,#0x44]
                  |L1.62|
;;;230      }
;;;231      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
00003e  2008              MOVS     r0,#8
000040  f8ad0046          STRH     r0,[sp,#0x46]
;;;232      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000044  2080              MOVS     r0,#0x80
000046  f8ad0048          STRH     r0,[sp,#0x48]
;;;233    
;;;234      CRYP_Init(&TDES_CRYP_InitStructure);
00004a  a811              ADD      r0,sp,#0x44
00004c  f7fffffe          BL       CRYP_Init
;;;235    
;;;236      /* Key Initialisation */
;;;237      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000050  6820              LDR      r0,[r4,#0]
000052  ba00              REV      r0,r0
000054  900b              STR      r0,[sp,#0x2c]
;;;238      keyaddr+=4;
000056  1d24              ADDS     r4,r4,#4
;;;239      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000058  6820              LDR      r0,[r4,#0]
00005a  ba00              REV      r0,r0
00005c  900c              STR      r0,[sp,#0x30]
;;;240      keyaddr+=4;
00005e  1d24              ADDS     r4,r4,#4
;;;241      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000060  6820              LDR      r0,[r4,#0]
000062  ba00              REV      r0,r0
000064  900d              STR      r0,[sp,#0x34]
;;;242      keyaddr+=4;
000066  1d24              ADDS     r4,r4,#4
;;;243      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000068  6820              LDR      r0,[r4,#0]
00006a  ba00              REV      r0,r0
00006c  900e              STR      r0,[sp,#0x38]
;;;244      keyaddr+=4;
00006e  1d24              ADDS     r4,r4,#4
;;;245      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000070  6820              LDR      r0,[r4,#0]
000072  ba00              REV      r0,r0
000074  900f              STR      r0,[sp,#0x3c]
;;;246      keyaddr+=4;
000076  1d24              ADDS     r4,r4,#4
;;;247      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000078  6820              LDR      r0,[r4,#0]
00007a  ba00              REV      r0,r0
00007c  9010              STR      r0,[sp,#0x40]
;;;248      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
00007e  a809              ADD      r0,sp,#0x24
000080  f7fffffe          BL       CRYP_KeyInit
;;;249    
;;;250      /* Initialization Vectors */
;;;251      TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
000084  6838              LDR      r0,[r7,#0]
000086  ba00              REV      r0,r0
000088  9005              STR      r0,[sp,#0x14]
;;;252      ivaddr+=4;
00008a  1d3f              ADDS     r7,r7,#4
;;;253      TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
00008c  6838              LDR      r0,[r7,#0]
00008e  ba00              REV      r0,r0
000090  9006              STR      r0,[sp,#0x18]
;;;254      CRYP_IVInit(&TDES_CRYP_IVInitStructure);
000092  a805              ADD      r0,sp,#0x14
000094  f7fffffe          BL       CRYP_IVInit
;;;255    
;;;256      /* Flush IN/OUT FIFO */
;;;257      CRYP_FIFOFlush();
000098  f7fffffe          BL       CRYP_FIFOFlush
;;;258    
;;;259      /* Enable Crypto processor */
;;;260      CRYP_Cmd(ENABLE);
00009c  2001              MOVS     r0,#1
00009e  f7fffffe          BL       CRYP_Cmd
;;;261    
;;;262      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
0000a2  2000              MOVS     r0,#0
0000a4  9001              STR      r0,[sp,#4]
0000a6  e028              B        |L1.250|
                  |L1.168|
;;;263      {
;;;264        /* Write the Input block in the Input FIFO */
;;;265        CRYP_DataIn(*(uint32_t*)(inputaddr));
0000a8  6828              LDR      r0,[r5,#0]
0000aa  f7fffffe          BL       CRYP_DataIn
;;;266        inputaddr+=4;
0000ae  1d2d              ADDS     r5,r5,#4
;;;267        CRYP_DataIn(*(uint32_t*)(inputaddr));
0000b0  6828              LDR      r0,[r5,#0]
0000b2  f7fffffe          BL       CRYP_DataIn
;;;268        inputaddr+=4;
0000b6  1d2d              ADDS     r5,r5,#4
;;;269    
;;;270        /* Wait until the complete message has been processed */
;;;271        counter = 0;
0000b8  2000              MOVS     r0,#0
0000ba  9004              STR      r0,[sp,#0x10]
;;;272        do
0000bc  bf00              NOP      
                  |L1.190|
;;;273        {
;;;274          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
0000be  2010              MOVS     r0,#0x10
0000c0  f7fffffe          BL       CRYP_GetFlagStatus
0000c4  9003              STR      r0,[sp,#0xc]
;;;275          counter++;
0000c6  9804              LDR      r0,[sp,#0x10]
0000c8  1c40              ADDS     r0,r0,#1
0000ca  9004              STR      r0,[sp,#0x10]
;;;276        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
0000cc  9804              LDR      r0,[sp,#0x10]
0000ce  f5b03f80          CMP      r0,#0x10000
0000d2  d002              BEQ      |L1.218|
0000d4  9803              LDR      r0,[sp,#0xc]
0000d6  2800              CMP      r0,#0
0000d8  d1f1              BNE      |L1.190|
                  |L1.218|
;;;277    
;;;278        if (busystatus != RESET)
0000da  9803              LDR      r0,[sp,#0xc]
0000dc  b110              CBZ      r0,|L1.228|
;;;279       {
;;;280           status = ERROR;
0000de  2000              MOVS     r0,#0
0000e0  9002              STR      r0,[sp,#8]
0000e2  e007              B        |L1.244|
                  |L1.228|
;;;281        }
;;;282        else
;;;283        {
;;;284    
;;;285          /* Read the Output block from the Output FIFO */
;;;286          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000e4  f7fffffe          BL       CRYP_DataOut
0000e8  6030              STR      r0,[r6,#0]
;;;287          outputaddr+=4;
0000ea  1d36              ADDS     r6,r6,#4
;;;288          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000ec  f7fffffe          BL       CRYP_DataOut
0000f0  6030              STR      r0,[r6,#0]
;;;289          outputaddr+=4;
0000f2  1d36              ADDS     r6,r6,#4
                  |L1.244|
0000f4  9801              LDR      r0,[sp,#4]            ;262
0000f6  3008              ADDS     r0,r0,#8              ;262
0000f8  9001              STR      r0,[sp,#4]            ;262
                  |L1.250|
0000fa  991c              LDR      r1,[sp,#0x70]         ;262
0000fc  9801              LDR      r0,[sp,#4]            ;262
0000fe  4288              CMP      r0,r1                 ;262
000100  d202              BCS      |L1.264|
000102  9802              LDR      r0,[sp,#8]            ;262
000104  2800              CMP      r0,#0                 ;262
000106  d1cf              BNE      |L1.168|
                  |L1.264|
;;;290        }
;;;291      }
;;;292    
;;;293      /* Disable Crypto */
;;;294      CRYP_Cmd(DISABLE);
000108  2000              MOVS     r0,#0
00010a  f7fffffe          BL       CRYP_Cmd
;;;295    
;;;296      return status; 
00010e  9802              LDR      r0,[sp,#8]
;;;297    }
000110  b013              ADD      sp,sp,#0x4c
000112  e8bd8ff0          POP      {r4-r11,pc}
;;;298    /**
                          ENDP


                          AREA ||i.CRYP_TDES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_ECB PROC
;;;101      */
;;;102    ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;103                              uint32_t Ilength, uint8_t *Output)
;;;104    {
000004  b08d              SUB      sp,sp,#0x34
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
00000c  469a              MOV      r10,r3
;;;105      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;106      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;107      __IO uint32_t counter = 0;
00000e  2000              MOVS     r0,#0
000010  9002              STR      r0,[sp,#8]
;;;108      uint32_t busystatus = 0;
000012  4683              MOV      r11,r0
;;;109      ErrorStatus status = SUCCESS;
000014  2001              MOVS     r0,#1
000016  9001              STR      r0,[sp,#4]
;;;110      uint32_t keyaddr    = (uint32_t)Key;
000018  4644              MOV      r4,r8
;;;111      uint32_t inputaddr  = (uint32_t)Input;
00001a  464d              MOV      r5,r9
;;;112      uint32_t outputaddr = (uint32_t)Output;
00001c  9e16              LDR      r6,[sp,#0x58]
;;;113      uint32_t i = 0;
00001e  2000              MOVS     r0,#0
000020  9000              STR      r0,[sp,#0]
;;;114    
;;;115      /* Crypto structures initialisation*/
;;;116      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000022  a803              ADD      r0,sp,#0xc
000024  f7fffffe          BL       CRYP_KeyStructInit
;;;117    
;;;118      /* Crypto Init for Encryption process */
;;;119      if(Mode == MODE_ENCRYPT) /* TDES encryption */
000028  2f01              CMP      r7,#1
00002a  d103              BNE      |L2.52|
;;;120      {
;;;121         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
00002c  2000              MOVS     r0,#0
00002e  f8ad002c          STRH     r0,[sp,#0x2c]
000032  e002              B        |L2.58|
                  |L2.52|
;;;122      }
;;;123      else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
;;;124      {
;;;125         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000034  2004              MOVS     r0,#4
000036  f8ad002c          STRH     r0,[sp,#0x2c]
                  |L2.58|
;;;126      }
;;;127    
;;;128      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
00003a  2000              MOVS     r0,#0
00003c  f8ad002e          STRH     r0,[sp,#0x2e]
;;;129      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
000040  2080              MOVS     r0,#0x80
000042  f8ad0030          STRH     r0,[sp,#0x30]
;;;130      CRYP_Init(&TDES_CRYP_InitStructure);
000046  a80b              ADD      r0,sp,#0x2c
000048  f7fffffe          BL       CRYP_Init
;;;131    
;;;132      /* Key Initialisation */
;;;133      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
00004c  6820              LDR      r0,[r4,#0]
00004e  ba00              REV      r0,r0
000050  9005              STR      r0,[sp,#0x14]
;;;134      keyaddr+=4;
000052  1d24              ADDS     r4,r4,#4
;;;135      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000054  6820              LDR      r0,[r4,#0]
000056  ba00              REV      r0,r0
000058  9006              STR      r0,[sp,#0x18]
;;;136      keyaddr+=4;
00005a  1d24              ADDS     r4,r4,#4
;;;137      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
00005c  6820              LDR      r0,[r4,#0]
00005e  ba00              REV      r0,r0
000060  9007              STR      r0,[sp,#0x1c]
;;;138      keyaddr+=4;
000062  1d24              ADDS     r4,r4,#4
;;;139      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000064  6820              LDR      r0,[r4,#0]
000066  ba00              REV      r0,r0
000068  9008              STR      r0,[sp,#0x20]
;;;140      keyaddr+=4;
00006a  1d24              ADDS     r4,r4,#4
;;;141      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
00006c  6820              LDR      r0,[r4,#0]
00006e  ba00              REV      r0,r0
000070  9009              STR      r0,[sp,#0x24]
;;;142      keyaddr+=4;
000072  1d24              ADDS     r4,r4,#4
;;;143      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000074  6820              LDR      r0,[r4,#0]
000076  ba00              REV      r0,r0
000078  900a              STR      r0,[sp,#0x28]
;;;144      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
00007a  a803              ADD      r0,sp,#0xc
00007c  f7fffffe          BL       CRYP_KeyInit
;;;145    
;;;146      /* Flush IN/OUT FIFO */
;;;147      CRYP_FIFOFlush();
000080  f7fffffe          BL       CRYP_FIFOFlush
;;;148    
;;;149      /* Enable Crypto processor */
;;;150      CRYP_Cmd(ENABLE);
000084  2001              MOVS     r0,#1
000086  f7fffffe          BL       CRYP_Cmd
;;;151    
;;;152      for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
00008a  2000              MOVS     r0,#0
00008c  9000              STR      r0,[sp,#0]
00008e  e029              B        |L2.228|
                  |L2.144|
;;;153      {
;;;154        /* Write the Input block in the Input FIFO */
;;;155        CRYP_DataIn(*(uint32_t*)(inputaddr));
000090  6828              LDR      r0,[r5,#0]
000092  f7fffffe          BL       CRYP_DataIn
;;;156        inputaddr+=4;
000096  1d2d              ADDS     r5,r5,#4
;;;157        CRYP_DataIn(*(uint32_t*)(inputaddr));
000098  6828              LDR      r0,[r5,#0]
00009a  f7fffffe          BL       CRYP_DataIn
;;;158        inputaddr+=4;
00009e  1d2d              ADDS     r5,r5,#4
;;;159    
;;;160        /* Wait until the complete message has been processed */
;;;161        counter = 0;
0000a0  2000              MOVS     r0,#0
0000a2  9002              STR      r0,[sp,#8]
;;;162        do
0000a4  bf00              NOP      
                  |L2.166|
;;;163        {
;;;164          busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
0000a6  2010              MOVS     r0,#0x10
0000a8  f7fffffe          BL       CRYP_GetFlagStatus
0000ac  4683              MOV      r11,r0
;;;165          counter++;
0000ae  9802              LDR      r0,[sp,#8]
0000b0  1c40              ADDS     r0,r0,#1
0000b2  9002              STR      r0,[sp,#8]
;;;166        }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
0000b4  9802              LDR      r0,[sp,#8]
0000b6  f5b03f80          CMP      r0,#0x10000
0000ba  d002              BEQ      |L2.194|
0000bc  f1bb0f00          CMP      r11,#0
0000c0  d1f1              BNE      |L2.166|
                  |L2.194|
;;;167    
;;;168        if (busystatus != RESET)
0000c2  f1bb0f00          CMP      r11,#0
0000c6  d002              BEQ      |L2.206|
;;;169        {
;;;170           status = ERROR;
0000c8  2000              MOVS     r0,#0
0000ca  9001              STR      r0,[sp,#4]
0000cc  e007              B        |L2.222|
                  |L2.206|
;;;171        }
;;;172        else
;;;173        {
;;;174    
;;;175          /* Read the Output block from the Output FIFO */
;;;176          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000ce  f7fffffe          BL       CRYP_DataOut
0000d2  6030              STR      r0,[r6,#0]
;;;177          outputaddr+=4;
0000d4  1d36              ADDS     r6,r6,#4
;;;178          *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000d6  f7fffffe          BL       CRYP_DataOut
0000da  6030              STR      r0,[r6,#0]
;;;179          outputaddr+=4;
0000dc  1d36              ADDS     r6,r6,#4
                  |L2.222|
0000de  9800              LDR      r0,[sp,#0]            ;152
0000e0  3008              ADDS     r0,r0,#8              ;152
0000e2  9000              STR      r0,[sp,#0]            ;152
                  |L2.228|
0000e4  9800              LDR      r0,[sp,#0]            ;152
0000e6  4550              CMP      r0,r10                ;152
0000e8  d202              BCS      |L2.240|
0000ea  9801              LDR      r0,[sp,#4]            ;152
0000ec  2800              CMP      r0,#0                 ;152
0000ee  d1cf              BNE      |L2.144|
                  |L2.240|
;;;180        }
;;;181      }
;;;182    
;;;183      /* Disable Crypto */
;;;184      CRYP_Cmd(DISABLE);
0000f0  2000              MOVS     r0,#0
0000f2  f7fffffe          BL       CRYP_Cmd
;;;185    
;;;186      return status; 
0000f6  9801              LDR      r0,[sp,#4]
;;;187    }
0000f8  b00d              ADD      sp,sp,#0x34
0000fa  e8bd8ff0          POP      {r4-r11,pc}
;;;188    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\Libraries\\STM32F2xx_StdPeriph_Driver\\src\\stm32f2xx_cryp_tdes.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f2xx_cryp_tdes_c_2fc87a0d____REV16|
#line 388 "..\\Libraries\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___21_stm32f2xx_cryp_tdes_c_2fc87a0d____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f2xx_cryp_tdes_c_2fc87a0d____REVSH|
#line 402
|__asm___21_stm32f2xx_cryp_tdes_c_2fc87a0d____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f2xx_cryp_tdes_c_2fc87a0d____RRX|
#line 587
|__asm___21_stm32f2xx_cryp_tdes_c_2fc87a0d____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
